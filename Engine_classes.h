// Class Engine.Actor
// Size: 0x278 (Inherited: 0x28)
struct AActor : UObject {
	struct FActorTickFunction PrimaryActorTick; // 0x28(0x30)
	char bNetTemporary : 1; // 0x58(0x01)
	char bNetStartup : 1; // 0x58(0x01)
	char bOnlyRelevantToOwner : 1; // 0x58(0x01)
	char bAlwaysRelevant : 1; // 0x58(0x01)
	char bReplicateMovement : 1; // 0x58(0x01)
	char bCallPreReplication : 1; // 0x58(0x01)
	char bCallPreReplicationForReplay : 1; // 0x58(0x01)
	char bHidden : 1; // 0x58(0x01)
	char bTearOff : 1; // 0x59(0x01)
	char bForceNetAddressable : 1; // 0x59(0x01)
	char bExchangedRoles : 1; // 0x59(0x01)
	char bNetLoadOnClient : 1; // 0x59(0x01)
	char bNetUseOwnerRelevancy : 1; // 0x59(0x01)
	char bRelevantForNetworkReplays : 1; // 0x59(0x01)
	char bRelevantForLevelBounds : 1; // 0x59(0x01)
	char bReplayRewindable : 1; // 0x59(0x01)
	char bAllowTickBeforeBeginPlay : 1; // 0x5a(0x01)
	char bAutoDestroyWhenFinished : 1; // 0x5a(0x01)
	char bCanBeDamaged : 1; // 0x5a(0x01)
	char bBlockInput : 1; // 0x5a(0x01)
	char bCollideWhenPlacing : 1; // 0x5a(0x01)
	char bFindCameraComponentWhenViewTarget : 1; // 0x5a(0x01)
	char bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x5a(0x01)
	char bIgnoresOriginShifting : 1; // 0x5a(0x01)
	char bEnableAutoLODGeneration : 1; // 0x5b(0x01)
	char bIsEditorOnlyActor : 1; // 0x5b(0x01)
	char bActorSeamlessTraveled : 1; // 0x5b(0x01)
	char bReplicates : 1; // 0x5b(0x01)
	char bCanBeInCluster : 1; // 0x5b(0x01)
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x5b(0x01)
	char pad_5B_6 : 2; // 0x5b(0x01)
	char pad_5C_0 : 5; // 0x5c(0x01)
	char bActorEnableCollision : 1; // 0x5c(0x01)
	char bActorIsBeingDestroyed : 1; // 0x5c(0x01)
	char pad_5C_7 : 1; // 0x5c(0x01)
	char pad_5D[0x1]; // 0x5d(0x01)
	enum class EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x5e(0x01)
	enum class EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x5f(0x01)
	enum class ENetRole RemoteRole; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FRepMovement ReplicatedMovement; // 0x68(0x68)
	float InitialLifeSpan; // 0xd0(0x04)
	float CustomTimeDilation; // 0xd4(0x04)
	char pad_D8[0x8]; // 0xd8(0x08)
	struct FRepAttachment AttachmentReplication; // 0xe0(0x60)
	struct AActor* Owner; // 0x140(0x08)
	struct FName NetDriverName; // 0x148(0x08)
	enum class ENetRole Role; // 0x150(0x01)
	enum class ENetDormancy NetDormancy; // 0x151(0x01)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x152(0x01)
	enum class EAutoReceiveInput AutoReceiveInput; // 0x153(0x01)
	int32_t InputPriority; // 0x154(0x04)
	struct UInputComponent* InputComponent; // 0x158(0x08)
	float NetCullDistanceSquared; // 0x160(0x04)
	int32_t NetTag; // 0x164(0x04)
	float NetUpdateFrequency; // 0x168(0x04)
	float MinNetUpdateFrequency; // 0x16c(0x04)
	float NetPriority; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	struct APawn* Instigator; // 0x178(0x08)
	struct TArray<struct AActor*> Children; // 0x180(0x10)
	struct USceneComponent* RootComponent; // 0x190(0x08)
	char pad_198[0x8]; // 0x198(0x08)
	int32_t RayTracingGroupId; // 0x1a0(0x04)
	char pad_1A4[0x4]; // 0x1a4(0x04)
	struct TArray<struct FName> Layers; // 0x1a8(0x10)
	struct TWeakObjectPtr<struct UChildActorComponent> ParentComponent; // 0x1b8(0x08)
	char pad_1C0[0x8]; // 0x1c0(0x08)
	struct TArray<struct FName> Tags; // 0x1c8(0x10)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x1d8(0x01)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x1d9(0x01)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x1da(0x01)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x1db(0x01)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0x1dc(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x1dd(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x1de(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x1df(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x1e0(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x1e1(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x1e2(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x1e3(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x1e4(0x01)
	struct FMulticastSparseDelegate OnActorHit; // 0x1e5(0x01)
	struct FMulticastSparseDelegate OnDestroyed; // 0x1e6(0x01)
	struct FMulticastSparseDelegate OnEndPlay; // 0x1e7(0x01)
	char pad_1E8[0x60]; // 0x1e8(0x60)
	struct TArray<struct UActorComponent*> InstanceComponents; // 0x248(0x10)
	struct TArray<struct UActorComponent*> BlueprintCreatedComponents; // 0x258(0x10)
	char pad_268[0x10]; // 0x268(0x10)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2e440
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void TearOff(); // Function Engine.Actor.TearOff // (Native|Public|BlueprintCallable) // @ game+0x3929e50
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.Actor.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2e330
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2e3b0
	void SetReplicates(bool bInReplicates); // Function Engine.Actor.SetReplicates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x4a2e2a0
	void SetReplicateMovement(bool bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement // (Native|Public|BlueprintCallable) // @ game+0x4a2e210
	void SetRayTracingGroupId(int32_t InRaytracingGroupId); // Function Engine.Actor.SetRayTracingGroupId // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2e180
	void SetOwner(struct AActor* NewOwner); // Function Engine.Actor.SetOwner // (Native|Public|BlueprintCallable) // @ game+0x4a2e0f0
	void SetNetDormancy(enum class ENetDormancy NewDormancy); // Function Engine.Actor.SetNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x4a2e070
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan // (Native|Public|BlueprintCallable) // @ game+0x4a2dfe0
	void SetAutoDestroyWhenFinished(bool bVal); // Function Engine.Actor.SetAutoDestroyWhenFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2df50
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2ded0
	void SetActorTickEnabled(bool bEnabled); // Function Engine.Actor.SetActorTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2de40
	void SetActorScale3D(struct FVector NewScale3D); // Function Engine.Actor.SetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a2ddb0
	void SetActorRelativeScale3D(struct FVector NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a2dd20
	void SetActorHiddenInGame(bool bNewHidden); // Function Engine.Actor.SetActorHiddenInGame // (Native|Public|BlueprintCallable) // @ game+0x4a2dc90
	void SetActorEnableCollision(bool bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2dc00
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x4a2db70
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x4a2dae0
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveRadialDamage(float DamageReceived, struct UDamageType* DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveRadialDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2552560
	void ReceivePointDamage(float Damage, struct UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent* HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController* InstigatedBy, struct AActor* DamageCauser, struct FHitResult& HitInfo); // Function Engine.Actor.ReceivePointDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2552560
	void ReceiveHit(struct UPrimitiveComponent* MyComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Engine.Actor.ReceiveHit // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2552560
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.Actor.ReceiveEndPlay // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	void ReceiveAnyDamage(float Damage, struct UDamageType* DamageType, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveAnyDamage // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorOnReleased(struct FKey ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorOnClicked(struct FKey ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorEndOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorBeginOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x4a2d9c0
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement // (Native|Public) // @ game+0x19fbd60
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement // (Native|Public) // @ game+0x2252200
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner // (Native|Protected) // @ game+0x19fbbc0
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator // (Native|Public) // @ game+0x4a2d9a0
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication // (Native|Public) // @ game+0x1a008d0
	void MakeNoise(float Loudness, struct APawn* NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName Tag); // Function Engine.Actor.MakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a2d7f0
	bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation); // Function Engine.Actor.K2_TeleportTo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a2d6f0
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2d490
	bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a2d3a0
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2d150
	void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2cf60
	void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2cd70
	bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2cb20
	bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2c920
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnEndViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnEndViewTarget // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnBecomeViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnBecomeViewTarget // (Event|Public|BlueprintEvent) // @ game+0x2552560
	struct USceneComponent* K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2267be0
	struct TArray<struct UActorComponent*> K2_GetComponentsByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2c840
	struct FRotator K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2c760
	struct FVector K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2c6e0
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule); // Function Engine.Actor.K2_DetachFromActor // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2c5d0
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor // (Native|Public|BlueprintCallable) // @ game+0x4a2c5b0
	void K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2c3e0
	void K2_AttachToActor(struct AActor* ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2c210
	void K2_AttachRootComponentToActor(struct AActor* InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2c0b0
	void K2_AttachRootComponentTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2bf50
	void K2_AddActorWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransformKeepScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2bd00
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2bab0
	void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2b8c0
	void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2b6d0
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2b480
	void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2b290
	void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a2b0a0
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.Actor.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2b000
	bool IsChildActor(); // Function Engine.Actor.IsChildActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2afd0
	bool IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2afa0
	bool IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2af70
	bool HasAuthority(); // Function Engine.Actor.HasAuthority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2af40
	float GetVerticalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetVerticalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2aea0
	struct FVector GetVelocity(); // Function Engine.Actor.GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2ae50
	struct FTransform GetTransform(); // Function Engine.Actor.GetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2ade0
	bool GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2adb0
	float GetSquaredHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredHorizontalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2ad10
	float GetSquaredDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2ac70
	enum class ENetRole GetRemoteRole(); // Function Engine.Actor.GetRemoteRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273110
	int32_t GetRayTracingGroupId(); // Function Engine.Actor.GetRayTracingGroupId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2ac40
	struct UChildActorComponent* GetParentComponent(); // Function Engine.Actor.GetParentComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2ac10
	struct AActor* GetParentActor(); // Function Engine.Actor.GetParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2abe0
	struct AActor* GetOwner(); // Function Engine.Actor.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2abc0
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2ab10
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.Actor.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2aa10
	enum class ENetRole GetLocalRole(); // Function Engine.Actor.GetLocalRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a9f0
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a9b0
	struct FTransform GetLevelTransform(); // Function Engine.Actor.GetLevelTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a920
	struct ULevel* GetLevel(); // Function Engine.Actor.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a8f0
	struct AController* GetInstigatorController(); // Function Engine.Actor.GetInstigatorController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a8c0
	struct APawn* GetInstigator(); // Function Engine.Actor.GetInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a890
	struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a770
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a6d0
	float GetInputAxisKeyValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a5d0
	float GetHorizontalDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a530
	float GetHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a490
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a460
	float GetDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a3c0
	float GetDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a320
	struct TArray<struct UActorComponent*> GetComponentsByTag(struct UActorComponent* ComponentClass, struct FName Tag); // Function Engine.Actor.GetComponentsByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a210
	struct TArray<struct UActorComponent*> GetComponentsByInterface(struct UInterface* Interface); // Function Engine.Actor.GetComponentsByInterface // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a130
	struct UActorComponent* GetComponentByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.GetComponentByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a2a090
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29f10
	struct AActor* GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29ee0
	void GetAttachedActors(struct TArray<struct AActor*>& OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors); // Function Engine.Actor.GetAttachedActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29f50
	void GetAllChildActors(struct TArray<struct AActor*>& ChildActors, bool bIncludeDescendants); // Function Engine.Actor.GetAllChildActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29de0
	struct FVector GetActorUpVector(); // Function Engine.Actor.GetActorUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29d70
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29d40
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29d10
	struct FVector GetActorScale3D(); // Function Engine.Actor.GetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29cd0
	struct FVector GetActorRightVector(); // Function Engine.Actor.GetActorRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29c60
	struct FVector GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29c20
	struct FVector GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29bb0
	void GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29ac0
	bool GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29a90
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent, bool bIncludeFromChildActors); // Function Engine.Actor.GetActorBounds // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a29900
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate // (Native|Public|BlueprintCallable) // @ game+0x4a298e0
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x4a298c0
	void FinishAddComponent(struct UActorComponent* Component, bool bManualAttachment, struct FTransform& RelativeTransform); // Function Engine.Actor.FinishAddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a29730
	void EnableInput(struct APlayerController* PlayerController); // Function Engine.Actor.EnableInput // (Native|Public|BlueprintCallable) // @ game+0x3fbd340
	void DisableInput(struct APlayerController* PlayerController); // Function Engine.Actor.DisableInput // (Native|Public|BlueprintCallable) // @ game+0xe80230
	void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent // (Final|Native|Public|BlueprintCallable) // @ game+0x4a296a0
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x4a29610
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x4a29580
	struct UActorComponent* AddComponentByClass(struct UActorComponent* Class, bool bManualAttachment, struct FTransform& RelativeTransform, bool bDeferredFinish); // Function Engine.Actor.AddComponentByClass // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a29390
	struct UActorComponent* AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct UObject* ComponentTemplateContext, bool bDeferredFinish); // Function Engine.Actor.AddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a29180
	bool ActorHasTag(struct FName Tag); // Function Engine.Actor.ActorHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a290e0
};

// Class Engine.DataAsset
// Size: 0x30 (Inherited: 0x28)
struct UDataAsset : UObject {
	struct UDataAsset* NativeClass; // 0x28(0x08)
};

// Class Engine.PrimaryDataAsset
// Size: 0x30 (Inherited: 0x30)
struct UPrimaryDataAsset : UDataAsset {
};

// Class Engine.ActorComponent
// Size: 0xb0 (Inherited: 0x28)
struct UActorComponent : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FActorComponentTickFunction PrimaryComponentTick; // 0x30(0x30)
	struct TArray<struct FName> ComponentTags; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)
	char pad_80[0x4]; // 0x80(0x04)
	int32_t UCSSerializationIndex; // 0x84(0x04)
	char pad_88_0 : 3; // 0x88(0x01)
	char bNetAddressable : 1; // 0x88(0x01)
	char bReplicates : 1; // 0x88(0x01)
	char pad_88_5 : 3; // 0x88(0x01)
	char pad_89[0x1]; // 0x89(0x01)
	char bAutoActivate : 1; // 0x8a(0x01)
	char bIsActive : 1; // 0x8a(0x01)
	char bEditableWhenInherited : 1; // 0x8a(0x01)
	char pad_8A_3 : 1; // 0x8a(0x01)
	char bCanEverAffectNavigation : 1; // 0x8a(0x01)
	char pad_8A_5 : 1; // 0x8a(0x01)
	char bIsEditorOnly : 1; // 0x8a(0x01)
	char pad_8A_7 : 1; // 0x8a(0x01)
	char pad_8B[0x1]; // 0x8b(0x01)
	enum class EComponentCreationMethod CreationMethod; // 0x8c(0x01)
	struct FMulticastSparseDelegate OnComponentActivated; // 0x8d(0x01)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0x8e(0x01)
	char pad_8F[0x1]; // 0x8f(0x01)
	struct TArray<struct FSimpleMemberReference> UCSModifiedProperties; // 0x90(0x10)
	char pad_A0[0x10]; // 0xa0(0x10)

	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive // (Native|Public|BlueprintCallable) // @ game+0x19fbbc0
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.ActorComponent.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x4a328d0
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x4a32950
	void SetIsReplicated(bool ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated // (Final|Native|Public|BlueprintCallable) // @ game+0x4a32840
	void SetComponentTickIntervalAndCooldown(float TickInterval); // Function Engine.ActorComponent.SetComponentTickIntervalAndCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x4a327c0
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x4a32740
	void SetComponentTickEnabled(bool bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled // (Native|Public|BlueprintCallable) // @ game+0x4a326b0
	void SetAutoActivate(bool bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate // (Native|Public|BlueprintCallable) // @ game+0x4a2e210
	void SetActive(bool bNewActive, bool bReset); // Function Engine.ActorComponent.SetActive // (Native|Public|BlueprintCallable) // @ game+0x4a325e0
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x4a32550
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x4a324c0
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive // (Native|Public) // @ game+0x19fbd60
	void K2_DestroyComponent(struct UObject* Object); // Function Engine.ActorComponent.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4a323b0
	bool IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a32380
	bool IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a32350
	bool IsActive(); // Function Engine.ActorComponent.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a32320
	struct AActor* GetOwner(); // Function Engine.ActorComponent.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a32300
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a322d0
	void Deactivate(); // Function Engine.ActorComponent.Deactivate // (Native|Public|BlueprintCallable) // @ game+0x122ec10
	bool ComponentHasTag(struct FName Tag); // Function Engine.ActorComponent.ComponentHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a32090
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x4a31f30
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x4a31ea0
	void Activate(bool bReset); // Function Engine.ActorComponent.Activate // (Native|Public|BlueprintCallable) // @ game+0x3fc24d0
};

// Class Engine.BlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintFunctionLibrary : UObject {
};

// Class Engine.SceneComponent
// Size: 0x2b0 (Inherited: 0xb0)
struct USceneComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct TWeakObjectPtr<struct APhysicsVolume> PhysicsVolume; // 0xb8(0x08)
	struct USceneComponent* AttachParent; // 0xc0(0x08)
	struct FName AttachSocketName; // 0xc8(0x08)
	struct TArray<struct USceneComponent*> AttachChildren; // 0xd0(0x10)
	struct TArray<struct USceneComponent*> ClientAttachedChildren; // 0xe0(0x10)
	char pad_F0[0x48]; // 0xf0(0x48)
	struct FVector RelativeLocation; // 0x138(0x18)
	struct FRotator RelativeRotation; // 0x150(0x18)
	struct FVector RelativeScale3D; // 0x168(0x18)
	struct FVector ComponentVelocity; // 0x180(0x18)
	char bComponentToWorldUpdated : 1; // 0x198(0x01)
	char pad_198_1 : 1; // 0x198(0x01)
	char bAbsoluteLocation : 1; // 0x198(0x01)
	char bAbsoluteRotation : 1; // 0x198(0x01)
	char bAbsoluteScale : 1; // 0x198(0x01)
	char bVisible : 1; // 0x198(0x01)
	char bShouldBeAttached : 1; // 0x198(0x01)
	char bShouldSnapLocationWhenAttached : 1; // 0x198(0x01)
	char bShouldSnapRotationWhenAttached : 1; // 0x199(0x01)
	char bShouldUpdatePhysicsVolume : 1; // 0x199(0x01)
	char bHiddenInGame : 1; // 0x199(0x01)
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x199(0x01)
	char bUseAttachParentBound : 1; // 0x199(0x01)
	char bComputeFastLocalBounds : 1; // 0x199(0x01)
	char bComputeBoundsOnceForGame : 1; // 0x199(0x01)
	char bComputedBoundsOnceForGame : 1; // 0x199(0x01)
	char pad_19A[0x1]; // 0x19a(0x01)
	enum class EComponentMobility Mobility; // 0x19b(0x01)
	enum class EDetailMode DetailMode; // 0x19c(0x01)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x19d(0x01)
	char pad_19E[0x112]; // 0x19e(0x112)

	void ToggleVisibility(bool bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x4b93610
	void SetWorldScale3D(struct FVector NewScale); // Function Engine.SceneComponent.SetWorldScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b93420
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x4b93350
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x4b932c0
	void SetRelativeScale3D(struct FVector NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b93230
	void SetMobility(enum class EComponentMobility NewMobility); // Function Engine.SceneComponent.SetMobility // (Native|Public|BlueprintCallable) // @ game+0x4b931b0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x4b930e0
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute // (Final|Native|Public|BlueprintCallable) // @ game+0x4b92f20
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x4b92f00
	void OnRep_Visibility(bool OldValue); // Function Engine.SceneComponent.OnRep_Visibility // (Final|Native|Private) // @ game+0x4b92bf0
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform // (Final|Native|Private) // @ game+0x4b92bd0
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName // (Final|Native|Private) // @ game+0x4b92bb0
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent // (Final|Native|Private) // @ game+0x4b92b90
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren // (Final|Native|Private) // @ game+0x4b92b70
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b92920
	void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b92730
	void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b924f0
	void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b92300
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b920b0
	void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b91ec0
	void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b91c80
	void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b91a90
	struct FTransform K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b91a00
	struct FVector K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b919c0
	struct FRotator K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b91980
	struct FVector K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b91940
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b917e0
	bool K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b91610
	bool K2_AttachTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo // (Final|Native|Public|BlueprintCallable) // @ game+0x4b914b0
	void K2_AddWorldTransformKeepScale(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransformKeepScale // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b91260
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b91010
	void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b90e20
	void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b90c30
	void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b90a40
	void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b90850
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b90600
	void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b90410
	void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b90220
	bool IsVisible(); // Function Engine.SceneComponent.IsVisible // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b901f0
	bool IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b90150
	bool IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b90120
	struct FVector GetUpVector(); // Function Engine.SceneComponent.GetUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8ff80
	struct FTransform GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace); // Function Engine.SceneComponent.GetSocketTransform // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fe50
	struct FRotator GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fda0
	struct FQuat GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fcf0
	struct FVector GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fc40
	bool GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fc10
	struct FVector GetRightVector(); // Function Engine.SceneComponent.GetRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fbd0
	struct FTransform GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fb40
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fb10
	void GetParentComponents(struct TArray<struct USceneComponent*>& Parents); // Function Engine.SceneComponent.GetParentComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fa60
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8fa30
	struct FVector GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68d30
	struct FVector GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8f9e0
	void GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent*>& Children); // Function Engine.SceneComponent.GetChildrenComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8f8e0
	struct USceneComponent* GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8f840
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8f820
	struct USceneComponent* GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8f800
	struct TArray<struct FName> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8f780
	bool DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8f6e0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Function Engine.SceneComponent.DetachFromParent // (Native|Public|BlueprintCallable) // @ game+0x4b8f610
};

// Class Engine.MovementComponent
// Size: 0x118 (Inherited: 0xb0)
struct UMovementComponent : UActorComponent {
	struct USceneComponent* UpdatedComponent; // 0xb0(0x08)
	struct UPrimitiveComponent* UpdatedPrimitive; // 0xb8(0x08)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FVector Velocity; // 0xc8(0x18)
	struct FVector PlaneConstraintNormal; // 0xe0(0x18)
	struct FVector PlaneConstraintOrigin; // 0xf8(0x18)
	char bUpdateOnlyIfRendered : 1; // 0x110(0x01)
	char bAutoUpdateTickRegistration : 1; // 0x110(0x01)
	char bTickBeforeOwner : 1; // 0x110(0x01)
	char bAutoRegisterUpdatedComponent : 1; // 0x110(0x01)
	char bConstrainToPlane : 1; // 0x110(0x01)
	char bSnapToPlaneAtStart : 1; // 0x110(0x01)
	char bAutoRegisterPhysicsVolumeUpdates : 1; // 0x110(0x01)
	char bComponentShouldUpdatePhysicsVolume : 1; // 0x110(0x01)
	char pad_111[0x2]; // 0x111(0x02)
	enum class EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0x113(0x01)
	char pad_114[0x4]; // 0x114(0x04)

	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately // (Native|Public|BlueprintCallable) // @ game+0x2252200
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane // (Native|Public|BlueprintCallable) // @ game+0x4b4e1d0
	void SetUpdatedComponent(struct USceneComponent* NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent // (Native|Public|BlueprintCallable) // @ game+0x4a2e0f0
	void SetPlaneConstraintOrigin(struct FVector PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b4e140
	void SetPlaneConstraintNormal(struct FVector PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b4e0b0
	void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b4dfb0
	void SetPlaneConstraintEnabled(bool bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled // (Native|Public|BlueprintCallable) // @ game+0x4b4df20
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting // (Native|Public|BlueprintCallable) // @ game+0x4b4dea0
	void PhysicsVolumeChanged(struct APhysicsVolume* NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged // (Native|Public) // @ game+0x4b4dd90
	bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b4d860
	bool IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d7c0
	struct FVector GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d780
	struct FVector GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d740
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d720
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d6f0
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d6b0
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d670
	struct FVector ConstrainNormalToPlane(struct FVector Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d5b0
	struct FVector ConstrainLocationToPlane(struct FVector Location); // Function Engine.MovementComponent.ConstrainLocationToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d4f0
	struct FVector ConstrainDirectionToPlane(struct FVector Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b4d430
};

// Class Engine.NavMovementComponent
// Size: 0x158 (Inherited: 0x118)
struct UNavMovementComponent : UMovementComponent {
	struct FNavAgentProperties NavAgentProps; // 0x118(0x30)
	float FixedPathBrakingDistance; // 0x148(0x04)
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x14c(0x01)
	char bUseAccelerationForPaths : 1; // 0x14c(0x01)
	char bUseFixedBrakingDistanceForPaths : 1; // 0x14c(0x01)
	char pad_14C_3 : 5; // 0x14c(0x01)
	struct FMovementProperties MovementState; // 0x14d(0x01)
	char pad_14E[0x2]; // 0x14e(0x02)
	struct UObject* PathFollowingComp; // 0x150(0x08)

	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing // (Final|Native|Public|BlueprintCallable) // @ game+0x4b512d0
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement // (Native|Public|BlueprintCallable) // @ game+0x4b512b0
	bool IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b510c0
	bool IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a75040
	bool IsFlying(); // Function Engine.NavMovementComponent.IsFlying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b51090
	bool IsFalling(); // Function Engine.NavMovementComponent.IsFalling // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b51060
	bool IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b51030
};

// Class Engine.PawnMovementComponent
// Size: 0x160 (Inherited: 0x158)
struct UPawnMovementComponent : UNavMovementComponent {
	struct APawn* PawnOwner; // 0x158(0x08)

	bool IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b622d0
	struct FVector GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62160
	struct APawn* GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62130
	struct FVector GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b61fa0
	struct FVector ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b61d50
	void AddInputVector(struct FVector WorldVector, bool bForce); // Function Engine.PawnMovementComponent.AddInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b617a0
};

// Class Engine.CharacterMovementComponent
// Size: 0xf00 (Inherited: 0x160)
struct UCharacterMovementComponent : UPawnMovementComponent {
	char pad_160[0x10]; // 0x160(0x10)
	struct ACharacter* CharacterOwner; // 0x170(0x08)
	float GravityScale; // 0x178(0x04)
	float MaxStepHeight; // 0x17c(0x04)
	float JumpZVelocity; // 0x180(0x04)
	float JumpOffJumpZFactor; // 0x184(0x04)
	char pad_188[0x1c]; // 0x188(0x1c)
	float WalkableFloorAngle; // 0x1a4(0x04)
	float WalkableFloorZ; // 0x1a8(0x04)
	enum class EMovementMode MovementMode; // 0x1ac(0x01)
	char CustomMovementMode; // 0x1ad(0x01)
	enum class ENetworkSmoothingMode NetworkSmoothingMode; // 0x1ae(0x01)
	char pad_1AF[0x1]; // 0x1af(0x01)
	float GroundFriction; // 0x1b0(0x04)
	char pad_1B4[0x44]; // 0x1b4(0x44)
	float MaxWalkSpeed; // 0x1f8(0x04)
	float MaxWalkSpeedCrouched; // 0x1fc(0x04)
	float MaxSwimSpeed; // 0x200(0x04)
	float MaxFlySpeed; // 0x204(0x04)
	float MaxCustomMovementSpeed; // 0x208(0x04)
	float MaxAcceleration; // 0x20c(0x04)
	float MinAnalogWalkSpeed; // 0x210(0x04)
	float BrakingFrictionFactor; // 0x214(0x04)
	float BrakingFriction; // 0x218(0x04)
	float BrakingSubStepTime; // 0x21c(0x04)
	float BrakingDecelerationWalking; // 0x220(0x04)
	float BrakingDecelerationFalling; // 0x224(0x04)
	float BrakingDecelerationSwimming; // 0x228(0x04)
	float BrakingDecelerationFlying; // 0x22c(0x04)
	float AirControl; // 0x230(0x04)
	float AirControlBoostMultiplier; // 0x234(0x04)
	float AirControlBoostVelocityThreshold; // 0x238(0x04)
	float FallingLateralFriction; // 0x23c(0x04)
	float CrouchedHalfHeight; // 0x240(0x04)
	float Buoyancy; // 0x244(0x04)
	float PerchRadiusThreshold; // 0x248(0x04)
	float PerchAdditionalHeight; // 0x24c(0x04)
	struct FRotator RotationRate; // 0x250(0x18)
	char bUseSeparateBrakingFriction : 1; // 0x268(0x01)
	char bApplyGravityWhileJumping : 1; // 0x268(0x01)
	char bUseControllerDesiredRotation : 1; // 0x268(0x01)
	char bOrientRotationToMovement : 1; // 0x268(0x01)
	char bSweepWhileNavWalking : 1; // 0x268(0x01)
	char pad_268_5 : 1; // 0x268(0x01)
	char bMovementInProgress : 1; // 0x268(0x01)
	char bEnableScopedMovementUpdates : 1; // 0x268(0x01)
	char bEnableServerDualMoveScopedMovementUpdates : 1; // 0x269(0x01)
	char bForceMaxAccel : 1; // 0x269(0x01)
	char bRunPhysicsWithNoController : 1; // 0x269(0x01)
	char bForceNextFloorCheck : 1; // 0x269(0x01)
	char bShrinkProxyCapsule : 1; // 0x269(0x01)
	char bCanWalkOffLedges : 1; // 0x269(0x01)
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x269(0x01)
	char pad_269_7 : 1; // 0x269(0x01)
	char pad_26A_0 : 1; // 0x26a(0x01)
	char bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x26a(0x01)
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x26a(0x01)
	char bDeferUpdateMoveComponent : 1; // 0x26a(0x01)
	char bEnablePhysicsInteraction : 1; // 0x26a(0x01)
	char bTouchForceScaledToMass : 1; // 0x26a(0x01)
	char bPushForceScaledToMass : 1; // 0x26a(0x01)
	char bPushForceUsingZOffset : 1; // 0x26a(0x01)
	char bScalePushForceToVelocity : 1; // 0x26b(0x01)
	char pad_26B_1 : 7; // 0x26b(0x01)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x270(0x08)
	float MaxOutOfWaterStepHeight; // 0x278(0x04)
	float OutofWaterZ; // 0x27c(0x04)
	float Mass; // 0x280(0x04)
	float StandingDownwardForceScale; // 0x284(0x04)
	float InitialPushForceFactor; // 0x288(0x04)
	float PushForceFactor; // 0x28c(0x04)
	float PushForcePointZOffsetFactor; // 0x290(0x04)
	float TouchForceFactor; // 0x294(0x04)
	float MinTouchForce; // 0x298(0x04)
	float MaxTouchForce; // 0x29c(0x04)
	float RepulsionForce; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct FVector Acceleration; // 0x2a8(0x18)
	struct FQuat LastUpdateRotation; // 0x2c0(0x20)
	struct FVector LastUpdateLocation; // 0x2e0(0x18)
	struct FVector LastUpdateVelocity; // 0x2f8(0x18)
	float ServerLastTransformUpdateTimeStamp; // 0x310(0x04)
	float ServerLastClientGoodMoveAckTime; // 0x314(0x04)
	float ServerLastClientAdjustmentTime; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct FVector PendingImpulseToApply; // 0x320(0x18)
	struct FVector PendingForceToApply; // 0x338(0x18)
	float AnalogInputModifier; // 0x350(0x04)
	char pad_354[0xc]; // 0x354(0x0c)
	float MaxSimulationTimeStep; // 0x360(0x04)
	int32_t MaxSimulationIterations; // 0x364(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x368(0x04)
	float MaxDepenetrationWithGeometry; // 0x36c(0x04)
	float MaxDepenetrationWithGeometryAsProxy; // 0x370(0x04)
	float MaxDepenetrationWithPawn; // 0x374(0x04)
	float MaxDepenetrationWithPawnAsProxy; // 0x378(0x04)
	float NetworkSimulatedSmoothLocationTime; // 0x37c(0x04)
	float NetworkSimulatedSmoothRotationTime; // 0x380(0x04)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x384(0x04)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x388(0x04)
	float NetProxyShrinkRadius; // 0x38c(0x04)
	float NetProxyShrinkHalfHeight; // 0x390(0x04)
	float NetworkMaxSmoothUpdateDistance; // 0x394(0x04)
	float NetworkNoSmoothUpdateDistance; // 0x398(0x04)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x39c(0x04)
	float NetworkMinTimeBetweenClientAdjustments; // 0x3a0(0x04)
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x3a4(0x04)
	float NetworkLargeClientCorrectionDistance; // 0x3a8(0x04)
	float LedgeCheckThreshold; // 0x3ac(0x04)
	float JumpOutOfWaterPitch; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct FFindFloorResult CurrentFloor; // 0x3b8(0xf8)
	enum class EMovementMode DefaultLandMovementMode; // 0x4b0(0x01)
	enum class EMovementMode DefaultWaterMovementMode; // 0x4b1(0x01)
	enum class EMovementMode GroundMovementMode; // 0x4b2(0x01)
	char pad_4B3[0x9]; // 0x4b3(0x09)
	char bMaintainHorizontalGroundVelocity : 1; // 0x4bc(0x01)
	char bImpartBaseVelocityX : 1; // 0x4bc(0x01)
	char bImpartBaseVelocityY : 1; // 0x4bc(0x01)
	char bImpartBaseVelocityZ : 1; // 0x4bc(0x01)
	char bImpartBaseAngularVelocity : 1; // 0x4bc(0x01)
	char bJustTeleported : 1; // 0x4bc(0x01)
	char bNetworkUpdateReceived : 1; // 0x4bc(0x01)
	char bNetworkMovementModeChanged : 1; // 0x4bc(0x01)
	char bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x4bd(0x01)
	char bServerAcceptClientAuthoritativePosition : 1; // 0x4bd(0x01)
	char bNotifyApex : 1; // 0x4bd(0x01)
	char bCheatFlying : 1; // 0x4bd(0x01)
	char bWantsToCrouch : 1; // 0x4bd(0x01)
	char bCrouchMaintainsBaseLocation : 1; // 0x4bd(0x01)
	char bIgnoreBaseRotation : 1; // 0x4bd(0x01)
	char bFastAttachedMove : 1; // 0x4bd(0x01)
	char bAlwaysCheckFloor : 1; // 0x4be(0x01)
	char bUseFlatBaseForFloorChecks : 1; // 0x4be(0x01)
	char bPerformingJumpOff : 1; // 0x4be(0x01)
	char bWantsToLeaveNavWalking : 1; // 0x4be(0x01)
	char bUseRVOAvoidance : 1; // 0x4be(0x01)
	char bRequestedMoveUseAcceleration : 1; // 0x4be(0x01)
	char pad_4BE_6 : 1; // 0x4be(0x01)
	char bWasSimulatingRootMotion : 1; // 0x4be(0x01)
	char bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x4bf(0x01)
	char pad_4BF_1 : 7; // 0x4bf(0x01)
	float FormerBaseVelocityDecayHalfLife; // 0x4c0(0x04)
	char bHasRequestedVelocity : 1; // 0x4c4(0x01)
	char bRequestedMoveWithMaxSpeed : 1; // 0x4c4(0x01)
	char bWasAvoidanceUpdated : 1; // 0x4c4(0x01)
	char pad_4C4_3 : 2; // 0x4c4(0x01)
	char bProjectNavMeshWalking : 1; // 0x4c4(0x01)
	char bProjectNavMeshOnBothWorldChannels : 1; // 0x4c4(0x01)
	char pad_4C4_7 : 1; // 0x4c4(0x01)
	char pad_4C5[0x1f]; // 0x4c5(0x1f)
	float AvoidanceConsiderationRadius; // 0x4e4(0x04)
	struct FVector RequestedVelocity; // 0x4e8(0x18)
	int32_t AvoidanceUID; // 0x500(0x04)
	struct FNavAvoidanceMask AvoidanceGroup; // 0x504(0x04)
	struct FNavAvoidanceMask GroupsToAvoid; // 0x508(0x04)
	struct FNavAvoidanceMask GroupsToIgnore; // 0x50c(0x04)
	float AvoidanceWeight; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
	struct FVector PendingLaunchVelocity; // 0x518(0x18)
	char pad_530[0x138]; // 0x530(0x138)
	float NavMeshProjectionInterval; // 0x668(0x04)
	float NavMeshProjectionTimer; // 0x66c(0x04)
	float NavMeshProjectionInterpSpeed; // 0x670(0x04)
	float NavMeshProjectionHeightScaleUp; // 0x674(0x04)
	float NavMeshProjectionHeightScaleDown; // 0x678(0x04)
	float NavWalkingFloorDistTolerance; // 0x67c(0x04)
	char pad_680[0x30]; // 0x680(0x30)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x6b0(0x30)
	char pad_6E0[0x18]; // 0x6e0(0x18)
	float MinTimeBetweenTimeStampResets; // 0x6f8(0x04)
	char pad_6FC[0x564]; // 0x6fc(0x564)
	struct FRootMotionSourceGroup CurrentRootMotion; // 0xc60(0x48)
	struct FRootMotionSourceGroup ServerCorrectionRootMotion; // 0xca8(0x48)
	char pad_CF0[0x160]; // 0xcf0(0x160)
	struct FRootMotionMovementParams RootMotionParams; // 0xe50(0x70)
	struct FVector AnimRootMotionVelocity; // 0xec0(0x18)
	char pad_ED8[0x28]; // 0xed8(0x28)

	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ // (Final|Native|Public|BlueprintCallable) // @ game+0x4a75950
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4a758d0
	void SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode // (Native|Public|BlueprintCallable) // @ game+0x4a75800
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a75770
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x4a756e0
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a75650
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid // (Final|Native|Public|BlueprintCallable) // @ game+0x4a755c0
	void SetCrouchedHalfHeight(float NewValue); // Function Engine.CharacterMovementComponent.SetCrouchedHalfHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x4a75540
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a754b0
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x4a75420
	void SetAvoidanceEnabled(bool bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4a75390
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a75360
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2272f80
	void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a75260
	void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a75070
	bool IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a75040
	bool IsWalkable(struct FHitResult& Hit); // Function Engine.CharacterMovementComponent.IsWalkable // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74f30
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74f00
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74ed0
	struct UPrimitiveComponent* GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74ea0
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74e60
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74e20
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74de0
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74da0
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74d60
	struct FVector GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74d30
	struct FRotator GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74ce0
	struct FVector GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74cb0
	struct FVector GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74c60
	struct FVector GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74c20
	float GetCrouchedHalfHeight(); // Function Engine.CharacterMovementComponent.GetCrouchedHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74bf0
	struct ACharacter* GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74bd0
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a74ba0
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement // (Native|Public|BlueprintCallable) // @ game+0x4a74b80
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces // (Native|Public|BlueprintCallable) // @ game+0x4a74b60
	void CapsuleTouched(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched // (Native|Protected|HasOutParms) // @ game+0x4a74900
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity // (Native|Public|BlueprintCallable) // @ game+0x4a74790
	void AddImpulse(struct FVector Impulse, bool bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a746a0
	void AddForce(struct FVector Force); // Function Engine.CharacterMovementComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a74610
};

// Class Engine.Info
// Size: 0x278 (Inherited: 0x278)
struct AInfo : AActor {
};

// Class Engine.PlayerState
// Size: 0x390 (Inherited: 0x278)
struct APlayerState : AInfo {
	float Score; // 0x278(0x04)
	int32_t PlayerID; // 0x27c(0x04)
	char CompressedPing; // 0x280(0x01)
	char pad_281[0x1]; // 0x281(0x01)
	char bShouldUpdateReplicatedPing : 1; // 0x282(0x01)
	char bIsSpectator : 1; // 0x282(0x01)
	char bOnlySpectator : 1; // 0x282(0x01)
	char bIsABot : 1; // 0x282(0x01)
	char pad_282_4 : 1; // 0x282(0x01)
	char bIsInactive : 1; // 0x282(0x01)
	char bFromPreviousLevel : 1; // 0x282(0x01)
	char pad_282_7 : 1; // 0x282(0x01)
	char pad_283[0x1]; // 0x283(0x01)
	int32_t StartTime; // 0x284(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x288(0x08)
	char pad_290[0x8]; // 0x290(0x08)
	struct FString SavedNetworkAddress; // 0x298(0x10)
	struct FUniqueNetIdRepl UniqueId; // 0x2a8(0x30)
	char pad_2D8[0x8]; // 0x2d8(0x08)
	struct FMulticastInlineDelegate OnPawnSet; // 0x2e0(0x10)
	struct APawn* PawnPrivate; // 0x2f0(0x08)
	char pad_2F8[0x78]; // 0x2f8(0x78)
	struct FString PlayerNamePrivate; // 0x370(0x10)
	char pad_380[0x10]; // 0x380(0x10)

	void ReceiveOverrideWith(struct APlayerState* OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	void ReceiveCopyProperties(struct APlayerState* NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId // (Native|Public) // @ game+0xae5270
	void OnRep_Score(); // Function Engine.PlayerState.OnRep_Score // (Native|Public) // @ game+0x2281e40
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName // (Native|Public) // @ game+0x106d600
	void OnRep_PlayerId(); // Function Engine.PlayerState.OnRep_PlayerId // (Native|Public) // @ game+0xae5290
	void OnRep_bIsInactive(); // Function Engine.PlayerState.OnRep_bIsInactive // (Native|Public) // @ game+0x4b4a250
	void OnPawnPrivateDestroyed(struct AActor* InActor); // Function Engine.PlayerState.OnPawnPrivateDestroyed // (Final|Native|Private) // @ game+0x4b79880
	bool IsOnlyASpectator(); // Function Engine.PlayerState.IsOnlyASpectator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b79850
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b79650
	struct APlayerController* GetPlayerController(); // Function Engine.PlayerState.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b79620
	float GetPingInMilliseconds(); // Function Engine.PlayerState.GetPingInMilliseconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b795f0
	struct APawn* GetPawn(); // Function Engine.PlayerState.GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b795d0
	struct FUniqueNetIdRepl BP_GetUniqueId(); // Function Engine.PlayerState.BP_GetUniqueId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b79010
};

// Class Engine.PrimitiveComponent
// Size: 0x540 (Inherited: 0x2b0)
struct UPrimitiveComponent : USceneComponent {
	char pad_2B0[0x10]; // 0x2b0(0x10)
	float MinDrawDistance; // 0x2c0(0x04)
	float LDMaxDrawDistance; // 0x2c4(0x04)
	float CachedMaxDrawDistance; // 0x2c8(0x04)
	enum class ESceneDepthPriorityGroup DepthPriorityGroup; // 0x2cc(0x01)
	enum class ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x2cd(0x01)
	enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x2ce(0x01)
	enum class ELightmapType LightmapType; // 0x2cf(0x01)
	char bIsValidTextureStreamingBuiltData : 1; // 0x2d0(0x01)
	char bNeverDistanceCull : 1; // 0x2d0(0x01)
	char pad_2D0_2 : 5; // 0x2d0(0x01)
	char bAlwaysCreatePhysicsState : 1; // 0x2d0(0x01)
	char bGenerateOverlapEvents : 1; // 0x2d1(0x01)
	char bMultiBodyOverlap : 1; // 0x2d1(0x01)
	char bTraceComplexOnMove : 1; // 0x2d1(0x01)
	char bReturnMaterialOnMove : 1; // 0x2d1(0x01)
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x2d1(0x01)
	char bAllowCullDistanceVolume : 1; // 0x2d1(0x01)
	char bHasMotionBlurVelocityMeshes : 1; // 0x2d1(0x01)
	char bVisibleInReflectionCaptures : 1; // 0x2d1(0x01)
	char bVisibleInRealTimeSkyCaptures : 1; // 0x2d2(0x01)
	char bVisibleInRayTracing : 1; // 0x2d2(0x01)
	char bRenderInMainPass : 1; // 0x2d2(0x01)
	char bRenderInDepthPass : 1; // 0x2d2(0x01)
	char bReceivesDecals : 1; // 0x2d2(0x01)
	char bOwnerNoSee : 1; // 0x2d2(0x01)
	char bOnlyOwnerSee : 1; // 0x2d2(0x01)
	char bTreatAsBackgroundForOcclusion : 1; // 0x2d2(0x01)
	char bUseAsOccluder : 1; // 0x2d3(0x01)
	char bSelectable : 1; // 0x2d3(0x01)
	char bForceMipStreaming : 1; // 0x2d3(0x01)
	char bHasPerInstanceHitProxies : 1; // 0x2d3(0x01)
	char CastShadow : 1; // 0x2d3(0x01)
	char bEmissiveLightSource : 1; // 0x2d3(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x2d3(0x01)
	char bAffectDistanceFieldLighting : 1; // 0x2d3(0x01)
	char bCastDynamicShadow : 1; // 0x2d4(0x01)
	char bCastStaticShadow : 1; // 0x2d4(0x01)
	char bCastVolumetricTranslucentShadow : 1; // 0x2d4(0x01)
	char bCastContactShadow : 1; // 0x2d4(0x01)
	char bSelfShadowOnly : 1; // 0x2d4(0x01)
	char bCastFarShadow : 1; // 0x2d4(0x01)
	char bCastInsetShadow : 1; // 0x2d4(0x01)
	char bCastCinematicShadow : 1; // 0x2d4(0x01)
	char bCastHiddenShadow : 1; // 0x2d5(0x01)
	char bCastShadowAsTwoSided : 1; // 0x2d5(0x01)
	char bLightAsIfStatic : 1; // 0x2d5(0x01)
	char bLightAttachmentsAsGroup : 1; // 0x2d5(0x01)
	char bExcludeFromLightAttachmentGroup : 1; // 0x2d5(0x01)
	char bReceiveMobileCSMShadows : 1; // 0x2d5(0x01)
	char bSingleSampleShadowFromStationaryLights : 1; // 0x2d5(0x01)
	char bIgnoreRadialImpulse : 1; // 0x2d5(0x01)
	char bIgnoreRadialForce : 1; // 0x2d6(0x01)
	char bApplyImpulseOnDamage : 1; // 0x2d6(0x01)
	char bReplicatePhysicsToAutonomousProxy : 1; // 0x2d6(0x01)
	char bFillCollisionUnderneathForNavmesh : 1; // 0x2d6(0x01)
	char AlwaysLoadOnClient : 1; // 0x2d6(0x01)
	char AlwaysLoadOnServer : 1; // 0x2d6(0x01)
	char bUseEditorCompositing : 1; // 0x2d6(0x01)
	char bIsBeingMovedByEditor : 1; // 0x2d6(0x01)
	char bRenderCustomDepth : 1; // 0x2d7(0x01)
	char bVisibleInSceneCaptureOnly : 1; // 0x2d7(0x01)
	char bHiddenInSceneCapture : 1; // 0x2d7(0x01)
	char bRayTracingFarField : 1; // 0x2d7(0x01)
	char pad_2D7_4 : 1; // 0x2d7(0x01)
	char bHasNoStreamableTextures : 1; // 0x2d7(0x01)
	char pad_2D7_6 : 2; // 0x2d7(0x01)
	enum class EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x2d8(0x01)
	char pad_2D9[0x1]; // 0x2d9(0x01)
	enum class ECanBeCharacterBase CanCharacterStepUpOn; // 0x2da(0x01)
	struct FLightingChannels LightingChannels; // 0x2db(0x01)
	int32_t RayTracingGroupId; // 0x2dc(0x04)
	int32_t VisibilityId; // 0x2e0(0x04)
	int32_t CustomDepthStencilValue; // 0x2e4(0x04)
	struct FCustomPrimitiveData CustomPrimitiveData; // 0x2e8(0x10)
	struct FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x2f8(0x10)
	char pad_308[0x8]; // 0x308(0x08)
	int32_t TranslucencySortPriority; // 0x310(0x04)
	float TranslucencySortDistanceOffset; // 0x314(0x04)
	struct TArray<struct URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x318(0x10)
	int8_t VirtualTextureLodBias; // 0x328(0x01)
	int8_t VirtualTextureCullMips; // 0x329(0x01)
	int8_t VirtualTextureMinCoverage; // 0x32a(0x01)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x32b(0x01)
	char pad_32C[0x10]; // 0x32c(0x10)
	float BoundsScale; // 0x33c(0x04)
	char pad_340[0x10]; // 0x340(0x10)
	struct TArray<struct AActor*> MoveIgnoreActors; // 0x350(0x10)
	struct TArray<struct UPrimitiveComponent*> MoveIgnoreComponents; // 0x360(0x10)
	char pad_370[0x10]; // 0x370(0x10)
	struct FBodyInstance BodyInstance; // 0x380(0x190)
	struct FMulticastSparseDelegate OnComponentHit; // 0x510(0x01)
	struct FMulticastSparseDelegate OnComponentBeginOverlap; // 0x511(0x01)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x512(0x01)
	struct FMulticastSparseDelegate OnComponentWake; // 0x513(0x01)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x514(0x01)
	char pad_515[0x1]; // 0x515(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x516(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x517(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x518(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x519(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x51a(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x51b(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x51c(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x51d(0x01)
	enum class ERayTracingGroupCullingPriority RayTracingGroupCullingPriority; // 0x51e(0x01)
	enum class ERendererStencilMask CustomDepthStencilWriteMask; // 0x51f(0x01)
	char pad_520[0x18]; // 0x520(0x18)
	struct UPrimitiveComponent* LODParentPrimitive; // 0x538(0x08)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.PrimitiveComponent.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b83970
	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody // (Native|Public|BlueprintCallable) // @ game+0x4b838e0
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies // (Native|Public|BlueprintCallable) // @ game+0x4b838c0
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b83810
	void SetVisibleInSceneCaptureOnly(bool bValue); // Function Engine.PrimitiveComponent.SetVisibleInSceneCaptureOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x4b83780
	void SetVisibleInRayTracing(bool bNewVisibleInRayTracing); // Function Engine.PrimitiveComponent.SetVisibleInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x4b836f0
	void SetVectorParameterForDefaultCustomPrimitiveData(struct FName ParameterName, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetVectorParameterForDefaultCustomPrimitiveData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b83600
	void SetVectorParameterForCustomPrimitiveData(struct FName ParameterName, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetVectorParameterForCustomPrimitiveData // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b83510
	void SetUseCCD(bool InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD // (Native|Public|BlueprintCallable) // @ game+0x4b83440
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x4b833b0
	void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset); // Function Engine.PrimitiveComponent.SetTranslucencySortDistanceOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x4b83330
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights // (Final|Native|Public|BlueprintCallable) // @ game+0x4b832a0
	void SetSimulatePhysics(bool bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics // (Native|Public|BlueprintCallable) // @ game+0x4b83210
	void SetScalarParameterForDefaultCustomPrimitiveData(struct FName ParameterName, float Value); // Function Engine.PrimitiveComponent.SetScalarParameterForDefaultCustomPrimitiveData // (Final|Native|Public|BlueprintCallable) // @ game+0x4b83140
	void SetScalarParameterForCustomPrimitiveData(struct FName ParameterName, float Value); // Function Engine.PrimitiveComponent.SetScalarParameterForCustomPrimitiveData // (Final|Native|Public|BlueprintCallable) // @ game+0x4b83070
	void SetRenderInMainPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82fe0
	void SetRenderInDepthPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInDepthPass // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82f50
	void SetRenderCustomDepth(bool bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82ec0
	void SetReceivesDecals(bool bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82e30
	void SetPhysMaterialOverride(struct UPhysicalMaterial* NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride // (Native|Public|BlueprintCallable) // @ game+0x4b82790
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82d10
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82bf0
	void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b82ab0
	void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b82970
	void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b82820
	void SetOwnerNoSee(bool bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82700
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82670
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x4b825e0
	void SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterialByName // (Native|Public|BlueprintCallable) // @ game+0x4b82510
	void SetMaterial(int32_t ElementIndex, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterial // (Native|Public|BlueprintCallable) // @ game+0x4b82440
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale // (Native|Public|BlueprintCallable) // @ game+0x4b82360
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg // (Native|Public|BlueprintCallable) // @ game+0x4b82250
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping // (Native|Public|BlueprintCallable) // @ game+0x4a8ba20
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.PrimitiveComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82120
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82090
	void SetHiddenInSceneCapture(bool bValue); // Function Engine.PrimitiveComponent.SetHiddenInSceneCapture // (Final|Native|Public|BlueprintCallable) // @ game+0x4b82000
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b81f70
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x4b81ee0
	void SetEnableGravity(bool bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity // (Native|Public|BlueprintCallable) // @ game+0x4b81e50
	void SetEmissiveLightSource(bool NewEmissiveLightSource); // Function Engine.PrimitiveComponent.SetEmissiveLightSource // (Final|Native|Public|BlueprintCallable) // @ game+0x4b81dc0
	void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b81cd0
	void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b81bf0
	void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b81b20
	void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x4b81a50
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b81960
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b81880
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b817b0
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x4b816e0
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask // (Final|Native|Public|BlueprintCallable) // @ game+0x4b81660
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b815d0
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4b81550
	void SetConstraintMode(enum class EDOFMode ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode // (Native|Public|BlueprintCallable) // @ game+0x4b814d0
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel // (Native|Public|BlueprintCallable) // @ game+0x4b81400
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels // (Native|Public|BlueprintCallable) // @ game+0x4b81380
	void SetCollisionProfileName(struct FName InCollisionProfileName, bool bUpdateOverlaps); // Function Engine.PrimitiveComponent.SetCollisionProfileName // (Native|Public|BlueprintCallable) // @ game+0x4b812b0
	void SetCollisionObjectType(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType // (Native|Public|BlueprintCallable) // @ game+0x4b81230
	void SetCollisionEnabled(enum class ECollisionEnabled NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled // (Native|Public|BlueprintCallable) // @ game+0x4b811b0
	void SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b810d0
	void SetCastShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b81040
	void SetCastInsetShadow(bool bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b80fb0
	void SetCastHiddenShadow(bool NewCastHiddenShadow); // Function Engine.PrimitiveComponent.SetCastHiddenShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b80f20
	void SetCastContactShadow(bool bInCastContactShadow); // Function Engine.PrimitiveComponent.SetCastContactShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b80e90
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b80e10
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping // (Native|Public|BlueprintCallable) // @ game+0x4a8c020
	void SetAllUseCCD(bool InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD // (Native|Public|BlueprintCallable) // @ game+0x4b80d80
	void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b80c90
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b80ba0
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b80a90
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale // (Native|Public|BlueprintCallable) // @ game+0x4b80a00
	struct FVector ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b808e0
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep // (Final|Native|Public|BlueprintCallable) // @ game+0x4b80850
	bool K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b80470
	bool K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b800e0
	bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b7fd40
	bool K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7fd00
	bool K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7fcc0
	bool K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7fc80
	bool K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b7f8e0
	bool IsOverlappingComponent(struct UPrimitiveComponent* OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f840
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.PrimitiveComponent.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f7a0
	bool IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f770
	bool IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b7f740
	void IgnoreComponentWhenMoving(struct UPrimitiveComponent* Component, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7f670
	void IgnoreActorWhenMoving(struct AActor* Actor, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7f5a0
	struct FWalkableSlopeOverride GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f570
	struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7f460
	struct FVector GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7f3b0
	struct FVector GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f300
	struct FVector GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f240
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f190
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f090
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7f060
	struct UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ef80
	struct UMaterialInterface* GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7eee0
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ee40
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ee00
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7edc0
	struct FVector GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ed10
	bool GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ece0
	int32_t GetCustomPrimitiveDataIndexForVectorParameter(struct FName ParameterName); // Function Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForVectorParameter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ec40
	int32_t GetCustomPrimitiveDataIndexForScalarParameter(struct FName ParameterName); // Function Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForScalarParameter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7eba0
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7eb10
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ead0
	enum class ECollisionChannel GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7eaa0
	enum class ECollisionEnabled GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7ea70
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7e930
	struct FVector GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7e880
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7e840
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface* SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x4b7e720
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface* Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x4b7e650
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic // (Native|Public|BlueprintCallable) // @ game+0x4b7e5b0
	struct TArray<struct UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7e530
	struct TArray<struct AActor*> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7e4b0
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7e480
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7e460
	bool CanCharacterStepUp(struct APawn* Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b7e3c0
	void AddVelocityChangeImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddVelocityChangeImpulseAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7e270
	void AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7e140
	void AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7e000
	void AddRadialImpulse(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7de20
	void AddRadialForce(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7dc40
	void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7daf0
	void AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7d9c0
	void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7d870
	void AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7d720
	void AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7d5f0
	void AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7d4c0
	void AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b7d380
};

// Class Engine.ShapeComponent
// Size: 0x560 (Inherited: 0x540)
struct UShapeComponent : UPrimitiveComponent {
	struct UBodySetup* ShapeBodySetup; // 0x540(0x08)
	struct UNavAreaBase* AreaClass; // 0x548(0x08)
	struct FColor ShapeColor; // 0x550(0x04)
	char bDrawOnlyIfSelected : 1; // 0x554(0x01)
	char bShouldCollideWhenPlacing : 1; // 0x554(0x01)
	char bDynamicObstacle : 1; // 0x554(0x01)
	char pad_554_3 : 5; // 0x554(0x01)
	char pad_555[0xb]; // 0x555(0x0b)
};

// Class Engine.CapsuleComponent
// Size: 0x560 (Inherited: 0x560)
struct UCapsuleComponent : UShapeComponent {
	float CapsuleHalfHeight; // 0x558(0x04)
	float CapsuleRadius; // 0x55c(0x04)

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize // (Final|Native|Public|BlueprintCallable) // @ game+0x4a734f0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x4a73410
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x4a73330
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71610
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71520
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71500
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a714d0
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a714b0
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71430
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a712f0
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a711e0
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71190
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71130
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a710f0
};

// Class Engine.BlueprintAsyncActionBase
// Size: 0x30 (Inherited: 0x28)
struct UBlueprintAsyncActionBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void Activate(); // Function Engine.BlueprintAsyncActionBase.Activate // (Native|Public|BlueprintCallable) // @ game+0x19fbd60
};

// Class Engine.CancellableAsyncAction
// Size: 0x30 (Inherited: 0x30)
struct UCancellableAsyncAction : UBlueprintAsyncActionBase {

	bool IsActive(); // Function Engine.CancellableAsyncAction.IsActive // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1a00860
	void Cancel(); // Function Engine.CancellableAsyncAction.Cancel // (Native|Public|BlueprintCallable) // @ game+0x19fbbc0
};

// Class Engine.HUD
// Size: 0x368 (Inherited: 0x278)
struct AHUD : AActor {
	struct APlayerController* PlayerOwner; // 0x278(0x08)
	char bLostFocusPaused : 1; // 0x280(0x01)
	char bShowHUD : 1; // 0x280(0x01)
	char bShowDebugInfo : 1; // 0x280(0x01)
	char pad_280_3 : 5; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	int32_t CurrentTargetIndex; // 0x284(0x04)
	char bShowHitBoxDebugInfo : 1; // 0x288(0x01)
	char bShowOverlays : 1; // 0x288(0x01)
	char bEnableDebugTextShadow : 1; // 0x288(0x01)
	char pad_288_3 : 5; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct TArray<struct AActor*> PostRenderedActors; // 0x290(0x10)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct TArray<struct FName> DebugDisplay; // 0x2a8(0x10)
	struct TArray<struct FName> ToggledDebugCategories; // 0x2b8(0x10)
	struct UCanvas* Canvas; // 0x2c8(0x08)
	struct UCanvas* DebugCanvas; // 0x2d0(0x08)
	struct TArray<struct FDebugTextInfo> DebugTextList; // 0x2d8(0x10)
	struct AActor* ShowDebugTargetDesiredClass; // 0x2e8(0x08)
	struct AActor* ShowDebugTargetActor; // 0x2f0(0x08)
	char pad_2F8[0x70]; // 0x2f8(0x70)

	void ShowHUD(); // Function Engine.HUD.ShowHUD // (Exec|Native|Public) // @ game+0x2281e40
	void ShowDebugToggleSubCategory(struct FName Category); // Function Engine.HUD.ShowDebugToggleSubCategory // (Final|Exec|Native|Public) // @ game+0x4ab3d90
	void ShowDebugForReticleTargetToggle(struct AActor* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle // (Final|Exec|Native|Public) // @ game+0x4ab3d00
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug // (Exec|Native|Public) // @ game+0x4ab3c70
	void RemoveDebugText(struct AActor* SrcActor, bool bLeaveDurationText); // Function Engine.HUD.RemoveDebugText // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4ab3b10
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4ab3af0
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x2552560
	struct FVector Project(struct FVector Location, bool bClampToZeroPlane); // Function Engine.HUD.Project // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ab39d0
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget // (Exec|Native|Public) // @ game+0x4ab39b0
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget // (Exec|Native|Public) // @ game+0xfd04c0
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont* Font, float Scale); // Function Engine.HUD.GetTextSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ab3690
	struct APlayerController* GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1951180
	struct APawn* GetOwningPawn(); // Function Engine.HUD.GetOwningPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ab3660
	void GetActorsInSelectionRectangle(struct AActor* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ab3440
	void DrawTextureSimple(struct UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Function Engine.HUD.DrawTextureSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x4ab3290
	void DrawTexture(struct UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ab2e20
	void DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont* Font, float Scale, bool bScalePosition); // Function Engine.HUD.DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ab2be0
	void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ab2a20
	void DrawMaterialTriangle(struct UMaterialInterface* Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color); // Function Engine.HUD.DrawMaterialTriangle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ab26e0
	void DrawMaterialSimple(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Function Engine.HUD.DrawMaterialSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x4ab24c0
	void DrawMaterial(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ab20e0
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness); // Function Engine.HUD.DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ab1ee0
	void Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.HUD.Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ab1d50
	void AddHitBox(struct FVector2D position, struct FVector2D Size, struct FName InName, bool bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ab1b80
	void AddDebugText(struct FString DebugText, struct AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont* InFont, float FontScale, bool bDrawShadow); // Function Engine.HUD.AddDebugText // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x4ab17b0
};

// Class Engine.Pawn
// Size: 0x2f8 (Inherited: 0x278)
struct APawn : AActor {
	char pad_278[0x8]; // 0x278(0x08)
	char bUseControllerRotationPitch : 1; // 0x280(0x01)
	char bUseControllerRotationYaw : 1; // 0x280(0x01)
	char bUseControllerRotationRoll : 1; // 0x280(0x01)
	char bCanAffectNavigationGeneration : 1; // 0x280(0x01)
	char pad_280_4 : 2; // 0x280(0x01)
	char bIsLocalViewTarget : 1; // 0x280(0x01)
	char pad_280_7 : 1; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float BaseEyeHeight; // 0x284(0x04)
	enum class EAutoReceiveInput AutoPossessPlayer; // 0x288(0x01)
	enum class EAutoPossessAI AutoPossessAI; // 0x289(0x01)
	char RemoteViewPitch; // 0x28a(0x01)
	char pad_28B[0x5]; // 0x28b(0x05)
	struct AController* AIControllerClass; // 0x290(0x08)
	struct APlayerState* PlayerState; // 0x298(0x08)
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct AController* LastHitBy; // 0x2a8(0x08)
	struct AController* Controller; // 0x2b0(0x08)
	struct AController* PreviousController; // 0x2b8(0x08)
	char pad_2C0[0x4]; // 0x2c0(0x04)
	struct FMulticastSparseDelegate ReceiveControllerChangedDelegate; // 0x2c4(0x01)
	struct FMulticastSparseDelegate ReceiveRestartedDelegate; // 0x2c5(0x01)
	char pad_2C6[0x2]; // 0x2c6(0x02)
	struct FVector ControlInputVector; // 0x2c8(0x18)
	struct FVector LastControlInputVector; // 0x2e0(0x18)

	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController // (Native|Public|BlueprintCallable) // @ game+0x4a830b0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration // (Final|Native|Public|BlueprintCallable) // @ game+0x4b62630
	void ReceiveUnpossessed(struct AController* OldController); // Function Engine.Pawn.ReceiveUnpossessed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveRestarted(); // Function Engine.Pawn.ReceiveRestarted // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceivePossessed(struct AController* NewController); // Function Engine.Pawn.ReceivePossessed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveControllerChanged(struct AController* OldController, struct AController* NewController); // Function Engine.Pawn.ReceiveControllerChanged // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct AActor* NoiseMaker); // Function Engine.Pawn.PawnMakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b624a0
	void OnRep_PlayerState(); // Function Engine.Pawn.OnRep_PlayerState // (Native|Public) // @ game+0x4b62480
	void OnRep_Controller(); // Function Engine.Pawn.OnRep_Controller // (Native|Public) // @ game+0xf28090
	bool IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62330
	bool IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62300
	bool IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b622a0
	bool IsLocallyViewed(); // Function Engine.Pawn.IsLocallyViewed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62270
	bool IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62240
	bool IsControlled(); // Function Engine.Pawn.IsControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62210
	bool IsBotControlled(); // Function Engine.Pawn.IsBotControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b621e0
	struct FVector GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b621a0
	struct FVector GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b620e0
	struct UPawnMovementComponent* GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a8b840
	struct AActor* GetMovementBaseActor(struct APawn* Pawn); // Function Engine.Pawn.GetMovementBaseActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b62050
	struct APlayerController* GetLocalViewingPlayerController(); // Function Engine.Pawn.GetLocalViewingPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b62020
	struct FVector GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b61fe0
	struct FRotator GetControlRotation(); // Function Engine.Pawn.GetControlRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b61f40
	struct AController* GetController(); // Function Engine.Pawn.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b61f80
	struct FRotator GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b61e10
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy // (Native|Public|BlueprintCallable) // @ game+0x4b61df0
	struct FVector ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b61da0
	void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce); // Function Engine.Pawn.AddMovementInput // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b61890
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput // (Native|Public|BlueprintCallable) // @ game+0x4b61710
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput // (Native|Public|BlueprintCallable) // @ game+0x4b61680
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput // (Native|Public|BlueprintCallable) // @ game+0x4b615f0
};

// Class Engine.DefaultPawn
// Size: 0x320 (Inherited: 0x2f8)
struct ADefaultPawn : APawn {
	float BaseTurnRate; // 0x2f8(0x04)
	float BaseLookUpRate; // 0x2fc(0x04)
	struct UPawnMovementComponent* MovementComponent; // 0x300(0x08)
	struct USphereComponent* CollisionComponent; // 0x308(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x310(0x08)
	char bAddDefaultMovementBindings : 1; // 0x318(0x01)
	char pad_318_1 : 7; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)

	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate // (Native|Public|BlueprintCallable) // @ game+0x4a8c020
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World // (Native|Public|BlueprintCallable) // @ game+0x4a8bab0
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight // (Native|Public|BlueprintCallable) // @ game+0x4a8ba20
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward // (Native|Public|BlueprintCallable) // @ game+0x4a8b990
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate // (Native|Public|BlueprintCallable) // @ game+0x4a8b900
};

// Class Engine.AnimNotify
// Size: 0x38 (Inherited: 0x28)
struct UAnimNotify : UObject {
	char pad_28[0x10]; // 0x28(0x10)

	bool Received_Notify(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotify.Received_Notify // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2552560
	struct FString GetNotifyName(); // Function Engine.AnimNotify.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x4a48b40
	float GetDefaultTriggerWeightThreshold(); // Function Engine.AnimNotify.GetDefaultTriggerWeightThreshold // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x4a48a20
};

// Class Engine.AnimNotifyState
// Size: 0x30 (Inherited: 0x28)
struct UAnimNotifyState : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	bool Received_NotifyTick(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float FrameDeltaTime, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyState.Received_NotifyTick // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2552560
	bool Received_NotifyEnd(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyState.Received_NotifyEnd // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2552560
	bool Received_NotifyBegin(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float TotalDuration, struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyState.Received_NotifyBegin // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2552560
	struct FString GetNotifyName(); // Function Engine.AnimNotifyState.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x4a48b40
	float GetDefaultTriggerWeightThreshold(); // Function Engine.AnimNotifyState.GetDefaultTriggerWeightThreshold // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x4a48a20
};

// Class Engine.BlueprintCore
// Size: 0x50 (Inherited: 0x28)
struct UBlueprintCore : UObject {
	struct UObject* SkeletonGeneratedClass; // 0x28(0x08)
	struct UObject* GeneratedClass; // 0x30(0x08)
	bool bLegacyNeedToPurgeSkelRefs; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FGuid BlueprintGuid; // 0x3c(0x10)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.Blueprint
// Size: 0xa0 (Inherited: 0x50)
struct UBlueprint : UBlueprintCore {
	struct UObject* ParentClass; // 0x50(0x08)
	enum class EBlueprintType BlueprintType; // 0x58(0x01)
	char bRecompileOnLoad : 1; // 0x59(0x01)
	char bHasBeenRegenerated : 1; // 0x59(0x01)
	char bIsRegeneratingOnLoad : 1; // 0x59(0x01)
	char pad_59_3 : 5; // 0x59(0x01)
	char pad_5A[0x2]; // 0x5a(0x02)
	int32_t BlueprintSystemVersion; // 0x5c(0x04)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x60(0x08)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x68(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x78(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x88(0x10)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0x98(0x08)
};

// Class Engine.FXSystemComponent
// Size: 0x540 (Inherited: 0x540)
struct UFXSystemComponent : UPrimitiveComponent {

	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.FXSystemComponent.SetVectorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5ed10
	void SetUseAutoManageAttachment(bool bAutoManage); // Function Engine.FXSystemComponent.SetUseAutoManageAttachment // (Native|Public|BlueprintCallable) // @ game+0x4b5ec80
	void SetIntParameter(struct FName ParameterName, int32_t Param); // Function Engine.FXSystemComponent.SetIntParameter // (Native|Public|BlueprintCallable) // @ game+0x4b5e8f0
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.FXSystemComponent.SetFloatParameter // (Native|Public|BlueprintCallable) // @ game+0x4b5e810
	void SetEmitterEnable(struct FName EmitterName, bool bNewEnableState); // Function Engine.FXSystemComponent.SetEmitterEnable // (Native|Public|BlueprintCallable) // @ game+0x4b5e740
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.FXSystemComponent.SetColorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5e660
	void SetBoolParameter(struct FName ParameterName, bool Param); // Function Engine.FXSystemComponent.SetBoolParameter // (Native|Public|BlueprintCallable) // @ game+0x4b5e590
	void SetAutoAttachmentParameters(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule); // Function Engine.FXSystemComponent.SetAutoAttachmentParameters // (Native|Public|BlueprintCallable) // @ game+0x4b5dc30
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.FXSystemComponent.SetActorParameter // (Native|Public|BlueprintCallable) // @ game+0x4b5da30
	void ReleaseToPool(); // Function Engine.FXSystemComponent.ReleaseToPool // (Native|Public|BlueprintCallable) // @ game+0x4b5da10
	struct UFXSystemAsset* GetFXSystemAsset(); // Function Engine.FXSystemComponent.GetFXSystemAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d910
};

// Class Engine.FXSystemAsset
// Size: 0x30 (Inherited: 0x28)
struct UFXSystemAsset : UObject {
	uint32_t MaxPoolSize; // 0x28(0x04)
	uint32_t PoolPrimeSize; // 0x2c(0x04)
};

// Class Engine.Subsystem
// Size: 0x30 (Inherited: 0x28)
struct USubsystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.DynamicSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UDynamicSubsystem : USubsystem {
};

// Class Engine.EngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UEngineSubsystem : UDynamicSubsystem {
};

// Class Engine.GameInstance
// Size: 0x1a8 (Inherited: 0x28)
struct UGameInstance : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct ULocalPlayer*> LocalPlayers; // 0x38(0x10)
	struct UOnlineSession* OnlineSession; // 0x48(0x08)
	struct TArray<struct UObject*> ReferencedObjects; // 0x50(0x10)
	char pad_60[0x18]; // 0x60(0x18)
	struct FMulticastInlineDelegate OnPawnControllerChangedDelegates; // 0x78(0x10)
	char pad_88[0x120]; // 0x88(0x120)

	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void HandleTravelError(enum class ETravelFailure FailureType); // Function Engine.GameInstance.HandleTravelError // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer); // Function Engine.GameInstance.HandleNetworkError // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer // (Exec|Native|Public) // @ game+0x4aa1b80
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer // (Exec|Native|Public) // @ game+0x4aa1af0
};

// Class Engine.GameInstanceSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UGameInstanceSubsystem : USubsystem {
};

// Class Engine.Engine
// Size: 0xd90 (Inherited: 0x28)
struct UEngine : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UFont* TinyFont; // 0x30(0x08)
	struct FSoftObjectPath TinyFontName; // 0x38(0x18)
	struct UFont* SmallFont; // 0x50(0x08)
	struct FSoftObjectPath SmallFontName; // 0x58(0x18)
	struct UFont* MediumFont; // 0x70(0x08)
	struct FSoftObjectPath MediumFontName; // 0x78(0x18)
	struct UFont* LargeFont; // 0x90(0x08)
	struct FSoftObjectPath LargeFontName; // 0x98(0x18)
	struct UFont* SubtitleFont; // 0xb0(0x08)
	struct FSoftObjectPath SubtitleFontName; // 0xb8(0x18)
	struct TArray<struct UFont*> AdditionalFonts; // 0xd0(0x10)
	struct TArray<struct FString> AdditionalFontNames; // 0xe0(0x10)
	struct UConsole* ConsoleClass; // 0xf0(0x08)
	struct FSoftClassPath ConsoleClassName; // 0xf8(0x18)
	struct UGameViewportClient* GameViewportClientClass; // 0x110(0x08)
	struct FSoftClassPath GameViewportClientClassName; // 0x118(0x18)
	struct ULocalPlayer* LocalPlayerClass; // 0x130(0x08)
	struct FSoftClassPath LocalPlayerClassName; // 0x138(0x18)
	struct AWorldSettings* WorldSettingsClass; // 0x150(0x08)
	struct FSoftClassPath WorldSettingsClassName; // 0x158(0x18)
	struct FSoftClassPath NavigationSystemClassName; // 0x170(0x18)
	struct UNavigationSystemBase* NavigationSystemClass; // 0x188(0x08)
	struct FSoftClassPath NavigationSystemConfigClassName; // 0x190(0x18)
	struct UNavigationSystemConfig* NavigationSystemConfigClass; // 0x1a8(0x08)
	struct FSoftClassPath AvoidanceManagerClassName; // 0x1b0(0x18)
	struct UAvoidanceManager* AvoidanceManagerClass; // 0x1c8(0x08)
	struct FSoftClassPath AIControllerClassName; // 0x1d0(0x18)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x1e8(0x08)
	struct FSoftClassPath PhysicsCollisionHandlerClassName; // 0x1f0(0x18)
	struct FSoftClassPath GameUserSettingsClassName; // 0x208(0x18)
	struct UGameUserSettings* GameUserSettingsClass; // 0x220(0x08)
	struct UGameUserSettings* GameUserSettings; // 0x228(0x08)
	struct ALevelScriptActor* LevelScriptActorClass; // 0x230(0x08)
	struct FSoftClassPath LevelScriptActorClassName; // 0x238(0x18)
	struct FSoftClassPath DefaultBlueprintBaseClassName; // 0x250(0x18)
	struct FSoftClassPath GameSingletonClassName; // 0x268(0x18)
	struct UObject* GameSingleton; // 0x280(0x08)
	struct FSoftClassPath AssetManagerClassName; // 0x288(0x18)
	struct UAssetManager* AssetManager; // 0x2a0(0x08)
	struct UTexture2D* DefaultTexture; // 0x2a8(0x08)
	struct FSoftObjectPath DefaultTextureName; // 0x2b0(0x18)
	struct UTexture* DefaultDiffuseTexture; // 0x2c8(0x08)
	struct FSoftObjectPath DefaultDiffuseTextureName; // 0x2d0(0x18)
	struct UTexture2D* DefaultBSPVertexTexture; // 0x2e8(0x08)
	struct FSoftObjectPath DefaultBSPVertexTextureName; // 0x2f0(0x18)
	struct UTexture2D* HighFrequencyNoiseTexture; // 0x308(0x08)
	struct FSoftObjectPath HighFrequencyNoiseTextureName; // 0x310(0x18)
	struct UTexture2D* DefaultBokehTexture; // 0x328(0x08)
	struct FSoftObjectPath DefaultBokehTextureName; // 0x330(0x18)
	struct UTexture2D* DefaultBloomKernelTexture; // 0x348(0x08)
	struct FSoftObjectPath DefaultBloomKernelTextureName; // 0x350(0x18)
	struct UTexture2D* DefaultFilmGrainTexture; // 0x368(0x08)
	struct FSoftObjectPath DefaultFilmGrainTextureName; // 0x370(0x18)
	struct UMaterial* WireframeMaterial; // 0x388(0x08)
	struct FString WireframeMaterialName; // 0x390(0x10)
	struct UMaterial* DebugMeshMaterial; // 0x3a0(0x08)
	struct FSoftObjectPath DebugMeshMaterialName; // 0x3a8(0x18)
	struct UMaterial* EmissiveMeshMaterial; // 0x3c0(0x08)
	struct FSoftObjectPath EmissiveMeshMaterialName; // 0x3c8(0x18)
	struct UMaterial* LevelColorationLitMaterial; // 0x3e0(0x08)
	struct FString LevelColorationLitMaterialName; // 0x3e8(0x10)
	struct UMaterial* LevelColorationUnlitMaterial; // 0x3f8(0x08)
	struct FString LevelColorationUnlitMaterialName; // 0x400(0x10)
	struct UMaterial* LightingTexelDensityMaterial; // 0x410(0x08)
	struct FString LightingTexelDensityName; // 0x418(0x10)
	struct UMaterial* ShadedLevelColorationLitMaterial; // 0x428(0x08)
	struct FString ShadedLevelColorationLitMaterialName; // 0x430(0x10)
	struct UMaterial* ShadedLevelColorationUnlitMaterial; // 0x440(0x08)
	struct FString ShadedLevelColorationUnlitMaterialName; // 0x448(0x10)
	struct UMaterial* RemoveSurfaceMaterial; // 0x458(0x08)
	struct FSoftObjectPath RemoveSurfaceMaterialName; // 0x460(0x18)
	struct UMaterial* VertexColorMaterial; // 0x478(0x08)
	struct FString VertexColorMaterialName; // 0x480(0x10)
	struct UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x490(0x08)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x498(0x10)
	struct UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x4a8(0x08)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x4b0(0x10)
	struct UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x4c0(0x08)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x4c8(0x10)
	struct UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x4d8(0x08)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x4e0(0x10)
	struct UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x4f0(0x08)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x4f8(0x10)
	struct FSoftObjectPath DebugEditorMaterialName; // 0x508(0x18)
	struct UMaterial* ConstraintLimitMaterial; // 0x520(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x528(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis; // 0x530(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x538(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis; // 0x540(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x548(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis; // 0x550(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; // 0x558(0x08)
	struct UMaterial* InvalidLightmapSettingsMaterial; // 0x560(0x08)
	struct FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x568(0x18)
	struct UMaterial* PreviewShadowsIndicatorMaterial; // 0x580(0x08)
	struct FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x588(0x18)
	struct UMaterial* ArrowMaterial; // 0x5a0(0x08)
	struct UMaterialInstanceDynamic* ArrowMaterialYellow; // 0x5a8(0x08)
	struct FSoftObjectPath ArrowMaterialName; // 0x5b0(0x18)
	struct FLinearColor LightingOnlyBrightness; // 0x5c8(0x10)
	struct TArray<struct FLinearColor> ShaderComplexityColors; // 0x5d8(0x10)
	struct TArray<struct FLinearColor> QuadComplexityColors; // 0x5e8(0x10)
	struct TArray<struct FLinearColor> LightComplexityColors; // 0x5f8(0x10)
	struct TArray<struct FLinearColor> StationaryLightOverlapColors; // 0x608(0x10)
	struct TArray<struct FLinearColor> LODColorationColors; // 0x618(0x10)
	struct TArray<struct FLinearColor> HLODColorationColors; // 0x628(0x10)
	struct TArray<struct FLinearColor> StreamingAccuracyColors; // 0x638(0x10)
	float MaxPixelShaderAdditiveComplexityCount; // 0x648(0x04)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x64c(0x04)
	float MinLightMapDensity; // 0x650(0x04)
	float IdealLightMapDensity; // 0x654(0x04)
	float MaxLightMapDensity; // 0x658(0x04)
	char bRenderLightMapDensityGrayscale : 1; // 0x65c(0x01)
	char pad_65C_1 : 7; // 0x65c(0x01)
	char pad_65D[0x3]; // 0x65d(0x03)
	float RenderLightMapDensityGrayscaleScale; // 0x660(0x04)
	float RenderLightMapDensityColorScale; // 0x664(0x04)
	struct FLinearColor LightMapDensityVertexMappedColor; // 0x668(0x10)
	struct FLinearColor LightMapDensitySelectedColor; // 0x678(0x10)
	struct TArray<struct FStatColorMapping> StatColorMappings; // 0x688(0x10)
	struct UPhysicalMaterial* DefaultPhysMaterial; // 0x698(0x08)
	struct FSoftObjectPath DefaultPhysMaterialName; // 0x6a0(0x18)
	struct UPhysicalMaterial* DefaultDestructiblePhysMaterial; // 0x6b8(0x08)
	struct FSoftObjectPath DefaultDestructiblePhysMaterialName; // 0x6c0(0x18)
	struct TArray<struct FGameNameRedirect> ActiveGameNameRedirects; // 0x6d8(0x10)
	struct TArray<struct FClassRedirect> ActiveClassRedirects; // 0x6e8(0x10)
	struct TArray<struct FPluginRedirect> ActivePluginRedirects; // 0x6f8(0x10)
	struct TArray<struct FStructRedirect> ActiveStructRedirects; // 0x708(0x10)
	struct UTexture2D* PreIntegratedSkinBRDFTexture; // 0x718(0x08)
	struct FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x720(0x18)
	struct UTexture2D* BlueNoiseTexture; // 0x738(0x08)
	struct FSoftObjectPath BlueNoiseTextureName; // 0x740(0x18)
	struct UTexture2D* MiniFontTexture; // 0x758(0x08)
	struct FSoftObjectPath MiniFontTextureName; // 0x760(0x18)
	struct UTexture* WeightMapPlaceholderTexture; // 0x778(0x08)
	struct FSoftObjectPath WeightMapPlaceholderTextureName; // 0x780(0x18)
	struct UTexture2D* LightMapDensityTexture; // 0x798(0x08)
	struct FSoftObjectPath LightMapDensityTextureName; // 0x7a0(0x18)
	char pad_7B8[0x8]; // 0x7b8(0x08)
	struct UGameViewportClient* GameViewport; // 0x7c0(0x08)
	struct TArray<struct FString> DeferredCommands; // 0x7c8(0x10)
	float NearClipPlane; // 0x7d8(0x04)
	char bSubtitlesEnabled : 1; // 0x7dc(0x01)
	char bSubtitlesForcedOff : 1; // 0x7dc(0x01)
	char pad_7DC_2 : 6; // 0x7dc(0x01)
	char pad_7DD[0x3]; // 0x7dd(0x03)
	int32_t MaximumLoopIterationCount; // 0x7e0(0x04)
	char bCanBlueprintsTickByDefault : 1; // 0x7e4(0x01)
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x7e4(0x01)
	char bAllowMultiThreadedAnimationUpdate : 1; // 0x7e4(0x01)
	char bEnableEditorPSysRealtimeLOD : 1; // 0x7e4(0x01)
	char pad_7E4_4 : 1; // 0x7e4(0x01)
	char bSmoothFrameRate : 1; // 0x7e4(0x01)
	char bUseFixedFrameRate : 1; // 0x7e4(0x01)
	char pad_7E4_7 : 1; // 0x7e4(0x01)
	char pad_7E5[0x3]; // 0x7e5(0x03)
	float FixedFrameRate; // 0x7e8(0x04)
	struct FFloatRange SmoothedFrameRateRange; // 0x7ec(0x10)
	char pad_7FC[0x4]; // 0x7fc(0x04)
	struct UEngineCustomTimeStep* CustomTimeStep; // 0x800(0x08)
	char pad_808[0x20]; // 0x808(0x20)
	struct FSoftClassPath CustomTimeStepClassName; // 0x828(0x18)
	struct UTimecodeProvider* TimecodeProvider; // 0x840(0x08)
	char pad_848[0x20]; // 0x848(0x20)
	struct FSoftClassPath TimecodeProviderClassName; // 0x868(0x18)
	bool bGenerateDefaultTimecode; // 0x880(0x01)
	char pad_881[0x3]; // 0x881(0x03)
	struct FFrameRate GenerateDefaultTimecodeFrameRate; // 0x884(0x08)
	float GenerateDefaultTimecodeFrameDelay; // 0x88c(0x04)
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x890(0x01)
	char pad_890_1 : 7; // 0x890(0x01)
	char pad_891[0x3]; // 0x891(0x03)
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x894(0x04)
	char bShouldGenerateLowQualityLightmaps : 1; // 0x898(0x01)
	char pad_898_1 : 7; // 0x898(0x01)
	char pad_899[0x3]; // 0x899(0x03)
	struct FColor C_WorldBox; // 0x89c(0x04)
	struct FColor C_BrushWire; // 0x8a0(0x04)
	struct FColor C_AddWire; // 0x8a4(0x04)
	struct FColor C_SubtractWire; // 0x8a8(0x04)
	struct FColor C_SemiSolidWire; // 0x8ac(0x04)
	struct FColor C_NonSolidWire; // 0x8b0(0x04)
	struct FColor C_WireBackground; // 0x8b4(0x04)
	struct FColor C_ScaleBoxHi; // 0x8b8(0x04)
	struct FColor C_VolumeCollision; // 0x8bc(0x04)
	struct FColor C_BSPCollision; // 0x8c0(0x04)
	struct FColor C_OrthoBackground; // 0x8c4(0x04)
	struct FColor C_Volume; // 0x8c8(0x04)
	struct FColor C_BrushShape; // 0x8cc(0x04)
	float StreamingDistanceFactor; // 0x8d0(0x04)
	char pad_8D4[0x4]; // 0x8d4(0x04)
	struct FDirectoryPath GameScreenshotSaveDirectory; // 0x8d8(0x10)
	bool UseStaticMeshMinLODPerQualityLevels; // 0x8e8(0x01)
	enum class ETransitionType TransitionType; // 0x8e9(0x01)
	char pad_8EA[0x6]; // 0x8ea(0x06)
	struct FString TransitionDescription; // 0x8f0(0x10)
	struct FString TransitionGameMode; // 0x900(0x10)
	char bAllowMatureLanguage : 1; // 0x910(0x01)
	char pad_910_1 : 7; // 0x910(0x01)
	char pad_911[0x3]; // 0x911(0x03)
	float CameraRotationThreshold; // 0x914(0x04)
	float CameraTranslationThreshold; // 0x918(0x04)
	float PrimitiveProbablyVisibleTime; // 0x91c(0x04)
	float MaxOcclusionPixelsFraction; // 0x920(0x04)
	char bPauseOnLossOfFocus : 1; // 0x924(0x01)
	char pad_924_1 : 7; // 0x924(0x01)
	char pad_925[0x3]; // 0x925(0x03)
	int32_t MaxParticleResize; // 0x928(0x04)
	int32_t MaxParticleResizeWarn; // 0x92c(0x04)
	struct TArray<struct FDropNoteInfo> PendingDroppedNotes; // 0x930(0x10)
	float NetClientTicksPerSecond; // 0x940(0x04)
	float DisplayGamma; // 0x944(0x04)
	float MinDesiredFrameRate; // 0x948(0x04)
	struct FLinearColor DefaultSelectedMaterialColor; // 0x94c(0x10)
	struct FLinearColor SelectedMaterialColor; // 0x95c(0x10)
	struct FLinearColor SelectionOutlineColor; // 0x96c(0x10)
	struct FLinearColor SubduedSelectionOutlineColor; // 0x97c(0x10)
	struct FLinearColor SelectedMaterialColorOverride; // 0x98c(0x10)
	bool bIsOverridingSelectedColor; // 0x99c(0x01)
	char pad_99D[0x3]; // 0x99d(0x03)
	char bEnableOnScreenDebugMessages : 1; // 0x9a0(0x01)
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0x9a0(0x01)
	char bSuppressMapWarnings : 1; // 0x9a0(0x01)
	char bDisableAILogging : 1; // 0x9a0(0x01)
	char pad_9A0_4 : 4; // 0x9a0(0x01)
	char pad_9A1[0x3]; // 0x9a1(0x03)
	uint32_t bEnableVisualLogRecordingOnStart; // 0x9a4(0x04)
	int32_t ScreenSaverInhibitorSemaphore; // 0x9a8(0x04)
	char bLockReadOnlyLevels : 1; // 0x9ac(0x01)
	char pad_9AC_1 : 7; // 0x9ac(0x01)
	char pad_9AD[0x3]; // 0x9ad(0x03)
	struct FString ParticleEventManagerClassPath; // 0x9b0(0x10)
	float SelectionHighlightIntensity; // 0x9c0(0x04)
	float BSPSelectionHighlightIntensity; // 0x9c4(0x04)
	float SelectionHighlightIntensityBillboards; // 0x9c8(0x04)
	char pad_9CC[0x294]; // 0x9cc(0x294)
	struct TArray<struct FNetDriverDefinition> NetDriverDefinitions; // 0xc60(0x10)
	struct TArray<struct FString> ServerActors; // 0xc70(0x10)
	struct TArray<struct FString> RuntimeServerActors; // 0xc80(0x10)
	float NetErrorLogInterval; // 0xc90(0x04)
	char bStartedLoadMapMovie : 1; // 0xc94(0x01)
	char pad_C94_1 : 7; // 0xc94(0x01)
	char pad_C95[0x1b]; // 0xc95(0x1b)
	int32_t NextWorldContextHandle; // 0xcb0(0x04)
	char pad_CB4[0xdc]; // 0xcb4(0xdc)
};

// Class Engine.ScriptViewportClient
// Size: 0x38 (Inherited: 0x28)
struct UScriptViewportClient : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.GameViewportClient
// Size: 0x3a0 (Inherited: 0x38)
struct UGameViewportClient : UScriptViewportClient {
	char pad_38[0x8]; // 0x38(0x08)
	struct UConsole* ViewportConsole; // 0x40(0x08)
	struct TArray<struct FDebugDisplayProperty> DebugProperties; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
	int32_t MaxSplitscreenPlayers; // 0x68(0x04)
	char pad_6C[0xc]; // 0x6c(0x0c)
	struct UWorld* World; // 0x78(0x08)
	struct UGameInstance* GameInstance; // 0x80(0x08)
	char pad_88[0x318]; // 0x88(0x318)

	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers // (Exec|Native|Public) // @ game+0x19fbd60
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea // (Exec|Native|Public) // @ game+0x3929e50
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget // (Exec|Native|Public) // @ game+0x4ab3be0
};

// Class Engine.DataTable
// Size: 0xb0 (Inherited: 0x28)
struct UDataTable : UObject {
	struct UScriptStruct* RowStruct; // 0x28(0x08)
	char pad_30[0x50]; // 0x30(0x50)
	char bStripFromClientBuilds : 1; // 0x80(0x01)
	char bIgnoreExtraFields : 1; // 0x80(0x01)
	char bIgnoreMissingFields : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct FString ImportKeyField; // 0x88(0x10)
	char pad_98[0x18]; // 0x98(0x18)
};

// Class Engine.Player
// Size: 0x48 (Inherited: 0x28)
struct UPlayer : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct APlayerController* PlayerController; // 0x30(0x08)
	int32_t CurrentNetSpeed; // 0x38(0x04)
	int32_t ConfiguredInternetSpeed; // 0x3c(0x04)
	int32_t ConfiguredLanSpeed; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.LocalPlayer
// Size: 0x2a0 (Inherited: 0x48)
struct ULocalPlayer : UPlayer {
	char pad_48[0x30]; // 0x48(0x30)
	struct UGameViewportClient* ViewportClient; // 0x78(0x08)
	char pad_80[0x38]; // 0x80(0x38)
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct APlayerController* PendingLevelPlayerControllerClass; // 0xc0(0x08)
	char bSentSplitJoin : 1; // 0xc8(0x01)
	char pad_C8_1 : 7; // 0xc8(0x01)
	char pad_C9[0x17]; // 0xc9(0x17)
	int32_t ControllerId; // 0xe0(0x04)
	char pad_E4[0x1bc]; // 0xe4(0x1bc)
};

// Class Engine.LocalPlayerSubsystem
// Size: 0x30 (Inherited: 0x30)
struct ULocalPlayerSubsystem : USubsystem {
};

// Class Engine.Controller
// Size: 0x310 (Inherited: 0x278)
struct AController : AActor {
	char pad_278[0x8]; // 0x278(0x08)
	struct APlayerState* PlayerState; // 0x280(0x08)
	char pad_288[0x8]; // 0x288(0x08)
	struct FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x290(0x10)
	struct FMulticastInlineDelegate OnPossessedPawnChanged; // 0x2a0(0x10)
	struct FName StateName; // 0x2b0(0x08)
	struct APawn* Pawn; // 0x2b8(0x08)
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct ACharacter* Character; // 0x2c8(0x08)
	struct USceneComponent* TransformComponent; // 0x2d0(0x08)
	char pad_2D8[0x18]; // 0x2d8(0x18)
	struct FRotator ControlRotation; // 0x2f0(0x18)
	char bAttachToPawn : 1; // 0x308(0x01)
	char pad_308_1 : 7; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)

	void UnPossess(); // Function Engine.Controller.UnPossess // (Final|Native|Public|BlueprintCallable) // @ game+0x4a830d0
	void StopMovement(); // Function Engine.Controller.StopMovement // (Native|Public|BlueprintCallable) // @ game+0x4a830b0
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a82fc0
	void SetIgnoreMoveInput(bool bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x4a82f30
	void SetIgnoreLookInput(bool bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x4a82ea0
	void SetControlRotation(struct FRotator& NewRotation); // Function Engine.Controller.SetControlRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a82e10
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x4a82df0
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x4a82dd0
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags // (Native|Public|BlueprintCallable) // @ game+0x4a82db0
	void ReceiveUnPossess(struct APawn* UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	void ReceivePossess(struct APawn* PossessedPawn); // Function Engine.Controller.ReceivePossess // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	void ReceiveInstigatedAnyDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x2552560
	void Possess(struct APawn* InPawn); // Function Engine.Controller.Possess // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x4a82d20
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState // (Native|Public) // @ game+0x4a82d00
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn // (Native|Public) // @ game+0x4a82ce0
	bool LineOfSightTo(struct AActor* Other, struct FVector ViewPoint, bool bAlternateChecks); // Function Engine.Controller.LineOfSightTo // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82b90
	struct APawn* K2_GetPawn(); // Function Engine.Controller.K2_GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82b60
	bool IsPlayerController(); // Function Engine.Controller.IsPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82a70
	bool IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82a40
	bool IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82a10
	bool IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a829c0
	bool IsLocalController(); // Function Engine.Controller.IsLocalController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82990
	struct AActor* GetViewTarget(); // Function Engine.Controller.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82960
	void GetPlayerViewPoint(struct FVector& Location, struct FRotator& Rotation); // Function Engine.Controller.GetPlayerViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82560
	struct FRotator GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82320
	struct FRotator GetControlRotation(); // Function Engine.Controller.GetControlRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a821f0
	void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera); // Function Engine.Controller.ClientSetRotation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate) // @ game+0x4a82020
	void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.Controller.ClientSetLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate) // @ game+0x4a81ee0
};

// Class Engine.PlayerController
// Size: 0x7c8 (Inherited: 0x310)
struct APlayerController : AController {
	struct UPlayer* Player; // 0x310(0x08)
	struct APawn* AcknowledgedPawn; // 0x318(0x08)
	struct UInterpTrackInstDirector* ControllingDirTrackInst; // 0x320(0x08)
	struct AHUD* MyHUD; // 0x328(0x08)
	struct APlayerCameraManager* PlayerCameraManager; // 0x330(0x08)
	struct APlayerCameraManager* PlayerCameraManagerClass; // 0x338(0x08)
	bool bAutoManageActiveCameraTarget; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	struct FRotator TargetViewRotation; // 0x348(0x18)
	char pad_360[0x18]; // 0x360(0x18)
	float SmoothTargetViewRotationSpeed; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct TArray<struct AActor*> HiddenActors; // 0x380(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenPrimitiveComponents; // 0x390(0x10)
	char pad_3A0[0x4]; // 0x3a0(0x04)
	float LastSpectatorStateSynchTime; // 0x3a4(0x04)
	struct FVector LastSpectatorSyncLocation; // 0x3a8(0x18)
	struct FRotator LastSpectatorSyncRotation; // 0x3c0(0x18)
	int32_t ClientCap; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct UCheatManager* CheatManager; // 0x3e0(0x08)
	struct UCheatManager* CheatClass; // 0x3e8(0x08)
	struct UPlayerInput* PlayerInput; // 0x3f0(0x08)
	struct TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x3f8(0x10)
	char pad_408[0x80]; // 0x408(0x80)
	char pad_488_0 : 4; // 0x488(0x01)
	char bPlayerIsWaiting : 1; // 0x488(0x01)
	char pad_488_5 : 3; // 0x488(0x01)
	char pad_489[0x3]; // 0x489(0x03)
	char NetPlayerIndex; // 0x48c(0x01)
	char pad_48D[0x5b]; // 0x48d(0x5b)
	struct UNetConnection* PendingSwapConnection; // 0x4e8(0x08)
	struct UNetConnection* NetConnection; // 0x4f0(0x08)
	char pad_4F8[0x18]; // 0x4f8(0x18)
	float InputYawScale; // 0x510(0x04)
	float InputPitchScale; // 0x514(0x04)
	float InputRollScale; // 0x518(0x04)
	char bShowMouseCursor : 1; // 0x51c(0x01)
	char bEnableClickEvents : 1; // 0x51c(0x01)
	char bEnableTouchEvents : 1; // 0x51c(0x01)
	char bEnableMouseOverEvents : 1; // 0x51c(0x01)
	char bEnableTouchOverEvents : 1; // 0x51c(0x01)
	char bForceFeedbackEnabled : 1; // 0x51c(0x01)
	char bEnableStreamingSource : 1; // 0x51c(0x01)
	char bStreamingSourceShouldActivate : 1; // 0x51c(0x01)
	char bStreamingSourceShouldBlockOnSlowStreaming : 1; // 0x51d(0x01)
	char pad_51D_1 : 7; // 0x51d(0x01)
	char pad_51E[0x2]; // 0x51e(0x02)
	float ForceFeedbackScale; // 0x520(0x04)
	char pad_524[0x4]; // 0x524(0x04)
	struct TArray<struct FKey> ClickEventKeys; // 0x528(0x10)
	enum class EMouseCursor DefaultMouseCursor; // 0x538(0x01)
	enum class EMouseCursor CurrentMouseCursor; // 0x539(0x01)
	enum class ECollisionChannel DefaultClickTraceChannel; // 0x53a(0x01)
	enum class ECollisionChannel CurrentClickTraceChannel; // 0x53b(0x01)
	float HitResultTraceDistance; // 0x53c(0x04)
	uint16_t SeamlessTravelCount; // 0x540(0x02)
	uint16_t LastCompletedSeamlessTravelCount; // 0x542(0x02)
	char pad_544[0x74]; // 0x544(0x74)
	struct UInputComponent* InactiveStateInputComponent; // 0x5b8(0x08)
	char pad_5C0_0 : 2; // 0x5c0(0x01)
	char bShouldPerformFullTickWhenPaused : 1; // 0x5c0(0x01)
	char pad_5C0_3 : 5; // 0x5c0(0x01)
	char pad_5C1[0x17]; // 0x5c1(0x17)
	struct UTouchInterface* CurrentTouchInterface; // 0x5d8(0x08)
	char pad_5E0[0x78]; // 0x5e0(0x78)
	struct ASpectatorPawn* SpectatorPawn; // 0x658(0x08)
	char pad_660[0x4]; // 0x660(0x04)
	bool bIsLocalPlayerController; // 0x664(0x01)
	char pad_665[0x3]; // 0x665(0x03)
	struct FVector SpawnLocation; // 0x668(0x18)
	char pad_680[0x148]; // 0x680(0x148)

	bool WasInputKeyJustReleased(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b75de0
	bool WasInputKeyJustPressed(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b75ce0
	void ToggleSpeaking(bool bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking // (Exec|Native|Public) // @ game+0x4b75c50
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange // (Final|Exec|Native|Private) // @ game+0x4b75b80
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel // (Exec|Native|Public) // @ game+0x4b75ae0
	bool StreamingSourceShouldBlockOnSlowStreaming(); // Function Engine.PlayerController.StreamingSourceShouldBlockOnSlowStreaming // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b75ab0
	bool StreamingSourceShouldActivate(); // Function Engine.PlayerController.StreamingSourceShouldActivate // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b75a80
	void StopHapticEffect(enum class EControllerHand Hand); // Function Engine.PlayerController.StopHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x4b75a00
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire // (Exec|Native|Public) // @ game+0x4b75980
	void SetVirtualJoystickVisibility(bool bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility // (Native|Public|BlueprintCallable) // @ game+0x4b758f0
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x4b75750
	void SetName(struct FString S); // Function Engine.PlayerController.SetName // (Exec|Native|Public) // @ game+0x4b756b0
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b755e0
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget* CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x4b75510
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand); // Function Engine.PlayerController.SetHapticsByValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b75400
	void SetDisableHaptics(bool bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics // (Native|Public|BlueprintCallable) // @ game+0x4b75370
	void SetDeprecatedInputYawScale(float NewValue); // Function Engine.PlayerController.SetDeprecatedInputYawScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b752f0
	void SetDeprecatedInputRollScale(float NewValue); // Function Engine.PlayerController.SetDeprecatedInputRollScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b75270
	void SetDeprecatedInputPitchScale(float NewValue); // Function Engine.PlayerController.SetDeprecatedInputPitchScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b751f0
	void SetControllerLightColor(struct FColor Color); // Function Engine.PlayerController.SetControllerLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b75170
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x4b74f90
	void SetAudioListenerOverride(struct USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Engine.PlayerController.SetAudioListenerOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b74e40
	void SetAudioListenerAttenuationOverride(struct USceneComponent* AttachToComponent, struct FVector AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b74d60
	void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ServerViewSelf // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4b74c70
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4b74c20
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4b74bd0
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b74b80
	void ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b74ac0
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b74a00
	void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4b748d0
	void ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ServerUnmutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b746b0
	void ServerUnblockPlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ServerUnblockPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b74490
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b74440
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b743f0
	void ServerSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b74330
	void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x4b741f0
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b741a0
	void ServerRecvClientInputFrame(int32_t RecvClientInputFrame, struct TArray<char> Data); // Function Engine.PlayerController.ServerRecvClientInputFrame // (Net|Native|Event|Public|NetServer) // @ game+0x4b740c0
	void ServerPause(); // Function Engine.PlayerController.ServerPause // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b74070
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b73fb0
	void ServerMutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ServerMutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b73d90
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b73cd0
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec // (Final|Exec|Native|Public) // @ game+0x4b73c30
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b73be0
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4b73b90
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b73ad0
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b73a10
	void ServerBlockPlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ServerBlockPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b737f0
	void ServerAcknowledgePossession(struct APawn* P); // Function Engine.PlayerController.ServerAcknowledgePossession // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4b73730
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole // (Exec|Native|Public) // @ game+0x4b73690
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel // (Exec|Native|Public) // @ game+0x4b73670
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor // (Final|Native|Public|BlueprintCallable) // @ game+0x4b73650
	bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b73500
	void PlayHapticEffect(struct UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop); // Function Engine.PlayerController.PlayHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x4b733a0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback // (Final|Native|Private|BlueprintCallable) // @ game+0x4b730f0
	void Pause(); // Function Engine.PlayerController.Pause // (Exec|Native|Public) // @ game+0x4b730d0
	void OnServerStartedVisualLogger(bool bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b73040
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel // (Exec|Native|Public) // @ game+0x4b72fa0
	void K2_ClientPlayForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback // (Final|Native|Public|BlueprintCallable) // @ game+0x4b72de0
	bool IsStreamingSourceEnabled(); // Function Engine.PlayerController.IsStreamingSourceEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72db0
	bool IsInputKeyDown(struct FKey Key); // Function Engine.PlayerController.IsInputKeyDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72cb0
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72bd0
	struct ASpectatorPawn* GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72bb0
	bool GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72ac0
	struct FVector GetInputVectorKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputVectorKeyState // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b729a0
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72810
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72730
	void GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration); // Function Engine.PlayerController.GetInputMotionState // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b725a0
	float GetInputKeyTimeDown(struct FKey Key); // Function Engine.PlayerController.GetInputKeyTimeDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b724a0
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72370
	float GetInputAnalogKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputAnalogKeyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72270
	struct AHUD* GetHUD(); // Function Engine.PlayerController.GetHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71710
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b72060
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71e80
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71ca0
	bool GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71ac0
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71900
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71740
	struct FVector GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b716c0
	float GetDeprecatedInputYawScale(); // Function Engine.PlayerController.GetDeprecatedInputYawScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71690
	float GetDeprecatedInputRollScale(); // Function Engine.PlayerController.GetDeprecatedInputRollScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71660
	float GetDeprecatedInputPitchScale(); // Function Engine.PlayerController.GetDeprecatedInputPitchScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b71630
	void FOV(float NewFOV); // Function Engine.PlayerController.FOV // (Exec|Native|Public) // @ game+0x4b715a0
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats // (Exec|Native|Public) // @ game+0x4b71580
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectScreenPositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b713e0
	bool DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectMousePositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b712e0
	void ConsoleKey(struct FKey Key); // Function Engine.PlayerController.ConsoleKey // (Exec|Native|Public) // @ game+0x4b711e0
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b71120
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b71100
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b71060
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b70ea0
	void ClientUnmutePlayers(struct TArray<struct FUniqueNetIdRepl> PlayerIds); // Function Engine.PlayerController.ClientUnmutePlayers // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b70da0
	void ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ClientUnmutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b70c00
	void ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x4b70a80
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravel // (Final|Native|Public|HasDefaults) // @ game+0x4b70900
	void ClientTeamMessage(struct APlayerState* SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b70790
	void ClientStopForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag); // Function Engine.PlayerController.ClientStopForceFeedback // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x4b706c0
	void ClientStopCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShakesFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x4b705f0
	void ClientStopCameraShake(struct UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShake // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x4b70520
	void ClientStopCameraAnim(struct UCameraAnim* AnimToStop); // Function Engine.PlayerController.ClientStopCameraAnim // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b70490
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b5da10
	void ClientStartCameraShakeFromSource(struct UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent); // Function Engine.PlayerController.ClientStartCameraShakeFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x4b703c0
	void ClientStartCameraShake(struct UCameraShakeBase* Shake, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerController.ClientStartCameraShake // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x4b70230
	void ClientSpawnGenericCameraLensEffect(struct AActor* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnGenericCameraLensEffect // (Net|Native|Event|Public|NetClient|BlueprintCallable) // @ game+0x4b701a0
	void ClientSpawnCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect // (Net|Native|Event|Public|NetClient) // @ game+0x4b70110
	void ClientSetViewTarget(struct AActor* A, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b70010
	void ClientSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6ff80
	void ClientSetHUD(struct AHUD* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x4b6fef0
	void ClientSetForceMipLevelsToBeResident(struct UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6fde0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6fc60
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6fbd0
	void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerController.ClientSetCameraFade // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x4b6f9e0
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f9c0
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f900
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f860
	void ClientRetryClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRetryClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2252d50
	void ClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f7d0
	void ClientReset(); // Function Engine.PlayerController.ClientReset // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f7b0
	void ClientRepObjRef(struct UObject* Object); // Function Engine.PlayerController.ClientRepObjRef // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f720
	void ClientRecvServerAckFrameDebug(char NumBuffered, float TargetNumBufferedCmds); // Function Engine.PlayerController.ClientRecvServerAckFrameDebug // (Net|Native|Event|Public|NetClient) // @ game+0x4b6f650
	void ClientRecvServerAckFrame(int32_t LastProcessedInputFrame, int32_t RecvServerFrameNumber, int8_t TimeDilation); // Function Engine.PlayerController.ClientRecvServerAckFrame // (Net|Native|Event|Public|NetClient) // @ game+0x4b6f550
	void ClientReceiveLocalizedMessage(struct ULocalMessage* Message, int32_t SWITCH, struct APlayerState* RelatedPlayerState_2, struct APlayerState* RelatedPlayerState_3, struct UObject* OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f3b0
	void ClientPrestreamTextures(struct AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f250
	void ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast); // Function Engine.PlayerController.ClientPrepareMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6f130
	void ClientPlaySoundAtLocation(struct USoundBase* Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x4b6efa0
	void ClientPlaySound(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound // (Net|Native|Event|Public|NetClient) // @ game+0x4b6ee90
	void ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FForceFeedbackParameters Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal // (Final|Net|Native|Event|Private|NetClient) // @ game+0x4b6eda0
	void ClientPlayCameraAnim(struct UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraShakePlaySpace Space, struct FRotator CustomPlaySpace); // Function Engine.PlayerController.ClientPlayCameraAnim // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x4b6ead0
	void ClientMutePlayer(struct FUniqueNetIdRepl PlayerID); // Function Engine.PlayerController.ClientMutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e930
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e800
	void ClientIgnoreMoveInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e770
	void ClientIgnoreLookInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e6e0
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e650
	void ClientGameEnded(struct AActor* EndGameFocus, bool bIsWinner); // Function Engine.PlayerController.ClientGameEnded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e580
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e560
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e540
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e520
	void ClientEnableNetworkVoice(bool bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e490
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e470
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x3fc8e20
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e3e0
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4b6e3c0
	void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x4b6e280
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x4b6e260
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x4b6e240
	bool CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x4b6e210
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera // (Exec|Native|Public) // @ game+0x4b6e180
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput // (Native|Public|BlueprintCallable) // @ game+0x4b6e0f0
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput // (Native|Public|BlueprintCallable) // @ game+0x4b6e060
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput // (Native|Public|BlueprintCallable) // @ game+0x4b6dfd0
	void ActivateTouchInterface(struct UTouchInterface* NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface // (Native|Public|BlueprintCallable) // @ game+0x4b6df40
};

// Class Engine.OnlineBlueprintCallProxyBase
// Size: 0x30 (Inherited: 0x30)
struct UOnlineBlueprintCallProxyBase : UBlueprintAsyncActionBase {
};

// Class Engine.NetConnection
// Size: 0x3240 (Inherited: 0x48)
struct UNetConnection : UPlayer {
	struct TArray<struct UChildConnection*> Children; // 0x48(0x10)
	struct UNetDriver* Driver; // 0x58(0x08)
	struct UPackageMap* PackageMapClass; // 0x60(0x08)
	struct UPackageMap* PackageMap; // 0x68(0x08)
	struct TArray<struct UChannel*> OpenChannels; // 0x70(0x10)
	struct TArray<struct AActor*> SentTemporaries; // 0x80(0x10)
	struct AActor* ViewTarget; // 0x90(0x08)
	struct AActor* OwningActor; // 0x98(0x08)
	int32_t MaxPacket; // 0xa0(0x04)
	char InternalAck : 1; // 0xa4(0x01)
	char pad_A4_1 : 7; // 0xa4(0x01)
	char pad_A5[0xbb]; // 0xa5(0xbb)
	struct FUniqueNetIdRepl PlayerID; // 0x160(0x30)
	char pad_190[0x48]; // 0x190(0x48)
	double LastReceiveTime; // 0x1d8(0x08)
	char pad_1E0[0x1400]; // 0x1e0(0x1400)
	struct TArray<struct UChannel*> ChannelsToTick; // 0x15e0(0x10)
	char pad_15F0[0x1c50]; // 0x15f0(0x1c50)
};

// Class Engine.NetDriver
// Size: 0x768 (Inherited: 0x28)
struct UNetDriver : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString NetConnectionClassName; // 0x30(0x10)
	struct FString ReplicationDriverClassName; // 0x40(0x10)
	int32_t MaxDownloadSize; // 0x50(0x04)
	char bClampListenServerTickRate : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t NetServerMaxTickRate; // 0x58(0x04)
	int32_t MaxNetTickRate; // 0x5c(0x04)
	int32_t MaxInternetClientRate; // 0x60(0x04)
	int32_t MaxClientRate; // 0x64(0x04)
	float ServerTravelPause; // 0x68(0x04)
	float SpawnPrioritySeconds; // 0x6c(0x04)
	float RelevantTimeout; // 0x70(0x04)
	float KeepAliveTime; // 0x74(0x04)
	float InitialConnectTimeout; // 0x78(0x04)
	float ConnectionTimeout; // 0x7c(0x04)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x80(0x04)
	bool bNoTimeouts; // 0x84(0x01)
	bool bNeverApplyNetworkEmulationSettings; // 0x85(0x01)
	char pad_86[0x2]; // 0x86(0x02)
	struct UNetConnection* ServerConnection; // 0x88(0x08)
	struct TArray<struct UNetConnection*> ClientConnections; // 0x90(0x10)
	char pad_A0[0x60]; // 0xa0(0x60)
	int32_t RecentlyDisconnectedTrackingTime; // 0x100(0x04)
	char pad_104[0x3c]; // 0x104(0x3c)
	struct UWorld* World; // 0x140(0x08)
	struct UPackage* WorldPackage; // 0x148(0x08)
	char pad_150[0x20]; // 0x150(0x20)
	ClassPtrProperty NetConnectionClass; // 0x170(0x08)
	ClassPtrProperty ReplicationDriverClass; // 0x178(0x08)
	char pad_180[0x10]; // 0x180(0x10)
	struct FName NetDriverName; // 0x190(0x08)
	struct TArray<struct FChannelDefinition> ChannelDefinitions; // 0x198(0x10)
	struct TMap<struct FName, struct FChannelDefinition> ChannelDefinitionMap; // 0x1a8(0x50)
	struct TArray<struct UChannel*> ActorChannelPool; // 0x1f8(0x10)
	char pad_208[0x4f0]; // 0x208(0x4f0)
	struct UReplicationDriver* ReplicationDriver; // 0x6f8(0x08)
	char pad_700[0x68]; // 0x700(0x68)
};

// Class Engine.OnlineEngineInterface
// Size: 0x28 (Inherited: 0x28)
struct UOnlineEngineInterface : UObject {
};

// Class Engine.OnlineSession
// Size: 0x28 (Inherited: 0x28)
struct UOnlineSession : UObject {
};

// Class Engine.Character
// Size: 0x600 (Inherited: 0x2f8)
struct ACharacter : APawn {
	struct USkeletalMeshComponent* Mesh; // 0x2f8(0x08)
	struct UCharacterMovementComponent* CharacterMovement; // 0x300(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x308(0x08)
	struct FBasedMovementInfo BasedMovement; // 0x310(0x48)
	struct FBasedMovementInfo ReplicatedBasedMovement; // 0x358(0x48)
	float AnimRootMotionTranslationScale; // 0x3a0(0x04)
	char pad_3A4[0x4]; // 0x3a4(0x04)
	struct FVector BaseTranslationOffset; // 0x3a8(0x18)
	struct FQuat BaseRotationOffset; // 0x3c0(0x20)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x3e0(0x04)
	float ReplayLastTransformUpdateTimeStamp; // 0x3e4(0x04)
	char ReplicatedMovementMode; // 0x3e8(0x01)
	bool bInBaseReplication; // 0x3e9(0x01)
	char pad_3EA[0x2]; // 0x3ea(0x02)
	float CrouchedEyeHeight; // 0x3ec(0x04)
	char bIsCrouched : 1; // 0x3f0(0x01)
	char bProxyIsJumpForceApplied : 1; // 0x3f0(0x01)
	char bPressedJump : 1; // 0x3f0(0x01)
	char bClientUpdating : 1; // 0x3f0(0x01)
	char bClientWasFalling : 1; // 0x3f0(0x01)
	char bClientResimulateRootMotion : 1; // 0x3f0(0x01)
	char bClientResimulateRootMotionSources : 1; // 0x3f0(0x01)
	char bSimGravityDisabled : 1; // 0x3f0(0x01)
	char bClientCheckEncroachmentOnNetUpdate : 1; // 0x3f1(0x01)
	char bServerMoveIgnoreRootMotion : 1; // 0x3f1(0x01)
	char bWasJumping : 1; // 0x3f1(0x01)
	char pad_3F1_3 : 5; // 0x3f1(0x01)
	char pad_3F2[0x2]; // 0x3f2(0x02)
	float JumpKeyHoldTime; // 0x3f4(0x04)
	float JumpForceTimeRemaining; // 0x3f8(0x04)
	float ProxyJumpForceStartedTime; // 0x3fc(0x04)
	float JumpMaxHoldTime; // 0x400(0x04)
	int32_t JumpMaxCount; // 0x404(0x04)
	int32_t JumpCurrentCount; // 0x408(0x04)
	int32_t JumpCurrentCountPreJump; // 0x40c(0x04)
	char pad_410[0x8]; // 0x410(0x08)
	struct FMulticastInlineDelegate OnReachedJumpApex; // 0x418(0x10)
	char pad_428[0x10]; // 0x428(0x10)
	struct FMulticastInlineDelegate MovementModeChangedDelegate; // 0x438(0x10)
	struct FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x448(0x10)
	struct FRootMotionSourceGroup SavedRootMotion; // 0x458(0x48)
	struct FRootMotionMovementParams ClientRootMotionParams; // 0x4a0(0x70)
	struct TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x510(0x10)
	struct FRepRootMotionMontage RepRootMotion; // 0x520(0xd8)
	char pad_5F8[0x8]; // 0x5f8(0x08)

	void UnCrouch(bool bClientSimulation); // Function Engine.Character.UnCrouch // (Native|Public|BlueprintCallable) // @ game+0x4a736c0
	void StopJumping(); // Function Engine.Character.StopJumping // (Native|Public|BlueprintCallable) // @ game+0x4a736a0
	void StopAnimMontage(struct UAnimMontage* AnimMontage); // Function Engine.Character.StopAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x4a73610
	void ServerMovePacked(struct FCharacterServerMovePackedBits PackedBits); // Function Engine.Character.ServerMovePacked // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4a73240
	void ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, char OldMoveFlags); // Function Engine.Character.ServerMoveOld // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4a730c0
	void ServerMoveNoBase(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4a72e10
	void ServerMoveDualNoBase(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveDualNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4a729e0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDualHybridRootMotion // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4a72520
	void ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDual // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4a72060
	void ServerMove(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMove // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x4a71d10
	void RootMotionDebugClientPrintOnScreen(struct FString InString); // Function Engine.Character.RootMotionDebugClientPrintOnScreen // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4a71c70
	float PlayAnimMontage(struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Engine.Character.PlayAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x4a71b50
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta); // Function Engine.Character.OnWalkingOffLedge // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x4a719b0
	void OnRep_RootMotion(); // Function Engine.Character.OnRep_RootMotion // (Final|Native|Public) // @ game+0x4a71990
	void OnRep_ReplicatedBasedMovement(); // Function Engine.Character.OnRep_ReplicatedBasedMovement // (Native|Public) // @ game+0x4a71970
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp // (Final|Native|Public) // @ game+0x4a71950
	void OnRep_IsCrouched(); // Function Engine.Character.OnRep_IsCrouched // (Native|Public) // @ game+0x4a71930
	void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.OnLaunched // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x2552560
	void OnLanded(struct FHitResult& Hit); // Function Engine.Character.OnLanded // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2552560
	void OnJumped(); // Function Engine.Character.OnJumped // (Native|Event|Public|BlueprintEvent) // @ game+0xac63d0
	void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.LaunchCharacter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a717e0
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.Character.K2_UpdateCustomMovement // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnStartCrouch // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.Character.K2_OnMovementModeChanged // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnEndCrouch // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void Jump(); // Function Engine.Character.Jump // (Native|Public|BlueprintCallable) // @ game+0x4a717c0
	bool IsPlayingRootMotion(); // Function Engine.Character.IsPlayingRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71790
	bool IsPlayingNetworkedRootMotionMontage(); // Function Engine.Character.IsPlayingNetworkedRootMotionMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71760
	bool IsJumpProvidingForce(); // Function Engine.Character.IsJumpProvidingForce // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71730
	bool HasAnyRootMotion(); // Function Engine.Character.HasAnyRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71700
	struct UAnimMontage* GetCurrentMontage(); // Function Engine.Character.GetCurrentMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a710c0
	struct FVector GetBaseTranslationOffset(); // Function Engine.Character.GetBaseTranslationOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71090
	struct FRotator GetBaseRotationOffsetRotator(); // Function Engine.Character.GetBaseRotationOffsetRotator // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71030
	float GetAnimRootMotionTranslationScale(); // Function Engine.Character.GetAnimRootMotionTranslationScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71000
	void Crouch(bool bClientSimulation); // Function Engine.Character.Crouch // (Native|Public|BlueprintCallable) // @ game+0x4a70f70
	void ClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientVeryShortAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x4a70d30
	void ClientMoveResponsePacked(struct FCharacterMoveResponsePackedBits PackedBits); // Function Engine.Character.ClientMoveResponsePacked // (Net|Native|Event|Public|NetClient|NetValidate) // @ game+0x4a70c40
	void ClientCheatWalk(); // Function Engine.Character.ClientCheatWalk // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4a70c20
	void ClientCheatGhost(); // Function Engine.Character.ClientCheatGhost // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4a70c00
	void ClientCheatFly(); // Function Engine.Character.ClientCheatFly // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x4a70be0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionSourcePosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x4a706a0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x4a70370
	void ClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x4a700d0
	void ClientAckGoodMove(float Timestamp); // Function Engine.Character.ClientAckGoodMove // (Net|Native|Event|Public|NetClient) // @ game+0x4a70050
	bool CanJumpInternal(); // Function Engine.Character.CanJumpInternal // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x4a70020
	bool CanJump(); // Function Engine.Character.CanJump // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a6fff0
	bool CanCrouch(); // Function Engine.Character.CanCrouch // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a6ffc0
	void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation); // Function Engine.Character.CacheInitialMeshOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6fec0
};

// Class Engine.GameModeBase
// Size: 0x318 (Inherited: 0x278)
struct AGameModeBase : AInfo {
	struct FString OptionsString; // 0x278(0x10)
	struct AGameSession* GameSessionClass; // 0x288(0x08)
	struct AGameStateBase* GameStateClass; // 0x290(0x08)
	struct APlayerController* PlayerControllerClass; // 0x298(0x08)
	struct APlayerState* PlayerStateClass; // 0x2a0(0x08)
	struct AHUD* HUDClass; // 0x2a8(0x08)
	struct APawn* DefaultPawnClass; // 0x2b0(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x2b8(0x08)
	struct APlayerController* ReplaySpectatorPlayerControllerClass; // 0x2c0(0x08)
	struct AServerStatReplicator* ServerStatReplicatorClass; // 0x2c8(0x08)
	struct AGameSession* GameSession; // 0x2d0(0x08)
	struct AGameStateBase* GameState; // 0x2d8(0x08)
	struct AServerStatReplicator* ServerStatReplicator; // 0x2e0(0x08)
	struct FText DefaultPlayerName; // 0x2e8(0x18)
	char bUseSeamlessTravel : 1; // 0x300(0x01)
	char bStartPlayersAsSpectators : 1; // 0x300(0x01)
	char bPauseable : 1; // 0x300(0x01)
	char pad_300_3 : 5; // 0x300(0x01)
	char pad_301[0x17]; // 0x301(0x17)

	void StartPlay(); // Function Engine.GameModeBase.StartPlay // (Native|Public|BlueprintCallable) // @ game+0xf258f0
	struct APawn* SpawnDefaultPawnFor(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor // (Native|Event|Public|BlueprintEvent) // @ game+0x4aa9310
	struct APawn* SpawnDefaultPawnAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x4aa91c0
	bool ShouldReset(struct AActor* ActorToReset); // Function Engine.GameModeBase.ShouldReset // (Native|Event|Public|BlueprintEvent) // @ game+0x4aa8c80
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost // (Native|Public|BlueprintCallable) // @ game+0xfd04e0
	void RestartPlayerAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa7b00
	void RestartPlayerAtPlayerStart(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart // (Native|Public|BlueprintCallable) // @ game+0x4aa7a30
	void RestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.RestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x4aa79a0
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel // (Native|Public|BlueprintCallable) // @ game+0x4aa7960
	bool PlayerCanRestart(struct APlayerController* Player); // Function Engine.GameModeBase.PlayerCanRestart // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x4aa71d0
	bool MustSpectate(struct APlayerController* NewPlayerController); // Function Engine.GameModeBase.MustSpectate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x4aa5ef0
	void K2_PostLogin(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.K2_PostLogin // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnSwapPlayerControllers(struct APlayerController* OldPC, struct APlayerController* NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	void K2_OnRestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnLogout(struct AController* ExitingController); // Function Engine.GameModeBase.K2_OnLogout // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void K2_OnChangeName(struct AController* Other, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.K2_OnChangeName // (Event|Public|BlueprintEvent) // @ game+0x2552560
	struct AActor* K2_FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa5280
	void InitStartSpot(struct AActor* StartSpot, struct AController* NewPlayer); // Function Engine.GameModeBase.InitStartSpot // (Native|Event|Public|BlueprintEvent) // @ game+0x4aa5060
	void InitializeHUDForPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer // (Native|Event|Protected|BlueprintEvent) // @ game+0x4a921b0
	bool HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82990
	bool HasMatchEnded(); // Function Engine.GameModeBase.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aa4ef0
	void HandleStartingNewPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer // (Native|Event|Public|BlueprintEvent) // @ game+0x4aa4dc0
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators // (Native|Public|BlueprintCallable) // @ game+0x4aa3b40
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers // (Native|Public|BlueprintCallable) // @ game+0x4aa3b10
	struct UObject* GetDefaultPawnClassForController(struct AController* InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x4aa32a0
	struct AActor* FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x4aa2300
	struct AActor* ChoosePlayerStart(struct AController* Player); // Function Engine.GameModeBase.ChoosePlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x4aa13d0
	void ChangeName(struct AController* Controller, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.ChangeName // (Native|Public|BlueprintCallable) // @ game+0x4aa12a0
	bool CanSpectate(struct APlayerController* Viewer, struct APlayerState* ViewTarget); // Function Engine.GameModeBase.CanSpectate // (Native|Event|Public|BlueprintEvent) // @ game+0x4aa11b0
};

// Class Engine.GameMode
// Size: 0x360 (Inherited: 0x318)
struct AGameMode : AGameModeBase {
	struct FName MatchState; // 0x318(0x08)
	char bDelayedStart : 1; // 0x320(0x01)
	char pad_320_1 : 7; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	int32_t NumSpectators; // 0x324(0x04)
	int32_t NumPlayers; // 0x328(0x04)
	int32_t NumBots; // 0x32c(0x04)
	float MinRespawnDelay; // 0x330(0x04)
	int32_t NumTravellingPlayers; // 0x334(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x338(0x08)
	struct TArray<struct APlayerState*> InactivePlayerArray; // 0x340(0x10)
	float InactivePlayerStateLifeSpan; // 0x350(0x04)
	int32_t MaxInactivePlayers; // 0x354(0x04)
	bool bHandleDedicatedServerReplays; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)

	void StartMatch(); // Function Engine.GameMode.StartMatch // (Native|Public|BlueprintCallable) // @ game+0x4aab370
	void Say(struct FString Msg); // Function Engine.GameMode.Say // (Exec|Native|Public|BlueprintCallable) // @ game+0x4aa7d70
	void RestartGame(); // Function Engine.GameMode.RestartGame // (Native|Public|BlueprintCallable) // @ game+0x4aa7980
	bool ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x4aa7670
	bool ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x4a6ffc0
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState // (Event|Protected|BlueprintEvent) // @ game+0x2552560
	bool IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aa51c0
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aa38b0
	void EndMatch(); // Function Engine.GameMode.EndMatch // (Native|Public|BlueprintCallable) // @ game+0x4aa1fd0
	void AbortMatch(); // Function Engine.GameMode.AbortMatch // (Native|Public|BlueprintCallable) // @ game+0x4a9e740
};

// Class Engine.GameStateBase
// Size: 0x2c8 (Inherited: 0x278)
struct AGameStateBase : AInfo {
	struct AGameModeBase* GameModeClass; // 0x278(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x280(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x288(0x08)
	struct TArray<struct APlayerState*> PlayerArray; // 0x290(0x10)
	bool bReplicatedHasBegunPlay; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	float ReplicatedWorldTimeSeconds; // 0x2a4(0x04)
	float ServerWorldTimeSecondsDelta; // 0x2a8(0x04)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x2ac(0x04)
	char pad_2B0[0x18]; // 0x2b0(0x18)

	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass // (Native|Protected) // @ game+0x4a82d00
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds // (Native|Protected) // @ game+0xf258f0
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay // (Native|Protected) // @ game+0xfd04c0
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass // (Native|Protected) // @ game+0x4a82ce0
	bool HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd8d60
	bool HasMatchEnded(); // Function Engine.GameStateBase.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae450
	bool HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae420
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae2f0
	float GetPlayerStartTime(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerStartTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aade40
	float GetPlayerRespawnDelay(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadda0
};

// Class Engine.GameState
// Size: 0x2e8 (Inherited: 0x2c8)
struct AGameState : AGameStateBase {
	struct FName MatchState; // 0x2c8(0x08)
	struct FName PreviousMatchState; // 0x2d0(0x08)
	int32_t ElapsedTime; // 0x2d8(0x04)
	char pad_2DC[0xc]; // 0x2dc(0x0c)

	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState // (Native|Public) // @ game+0x4aae5d0
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime // (Native|Public) // @ game+0x4aa7960
};

// Class Engine.DynamicBlueprintBinding
// Size: 0x28 (Inherited: 0x28)
struct UDynamicBlueprintBinding : UObject {
};

// Class Engine.InputDelegateBinding
// Size: 0x28 (Inherited: 0x28)
struct UInputDelegateBinding : UDynamicBlueprintBinding {
};

// Class Engine.InputComponent
// Size: 0x138 (Inherited: 0xb0)
struct UInputComponent : UActorComponent {
	char pad_B0[0x70]; // 0xb0(0x70)
	struct TArray<struct FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x120(0x10)
	char pad_130[0x8]; // 0x130(0x08)

	bool WasControllerKeyJustReleased(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustReleased // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd8f0
	bool WasControllerKeyJustPressed(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustPressed // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd8f0
	void OnInputOwnerEndPlayed(struct AActor* InOwner, enum class EEndPlayReason EndPlayReason); // Function Engine.InputComponent.OnInputOwnerEndPlayed // (Final|Native|Private) // @ game+0x4abda90
	bool IsControllerKeyDown(struct FKey Key); // Function Engine.InputComponent.IsControllerKeyDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd8f0
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd770
	struct FVector GetControllerVectorKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerVectorKeyState // (Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd190
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd0b0
	float GetControllerKeyTimeDown(struct FKey Key); // Function Engine.InputComponent.GetControllerKeyTimeDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abce80
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abcf80
	float GetControllerAnalogKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerAnalogKeyState // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abce80
};

// Class Engine.PlayerInput
// Size: 0x498 (Inherited: 0x28)
struct UPlayerInput : UObject {
	char pad_28[0x178]; // 0x28(0x178)
	struct TArray<struct FKeyBind> DebugExecBindings; // 0x1a0(0x10)
	char pad_1B0[0x30]; // 0x1b0(0x30)
	struct TArray<struct FName> InvertedAxis; // 0x1e0(0x10)
	char pad_1F0[0x2a8]; // 0x1f0(0x2a8)

	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity // (Final|Exec|Native|Public) // @ game+0x4b7a0a0
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind // (Final|Exec|Native|Public) // @ game+0x4b799a0
	void InvertAxisKey(struct FKey AxisKey); // Function Engine.PlayerInput.InvertAxisKey // (Final|Exec|Native|Public) // @ game+0x4b79760
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis // (Final|Exec|Native|Public) // @ game+0x4b796d0
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing // (Final|Exec|Native|Public) // @ game+0x4b79150
};

// Class Engine.WorldSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UWorldSubsystem : USubsystem {
};

// Class Engine.ReplicationDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationDriver : UObject {
};

// Class Engine.ReplicationConnectionDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationConnectionDriver : UObject {
};

// Class Engine.BoxComponent
// Size: 0x580 (Inherited: 0x560)
struct UBoxComponent : UShapeComponent {
	struct FVector BoxExtent; // 0x558(0x18)
	float LineThickness; // 0x570(0x04)
	char pad_57C[0x4]; // 0x57c(0x04)

	void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a68730
	struct FVector GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a68420
	struct FVector GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a683c0
};

// Class Engine.Brush
// Size: 0x2b0 (Inherited: 0x278)
struct ABrush : AActor {
	enum class EBrushType BrushType; // 0x278(0x01)
	char pad_279[0x3]; // 0x279(0x03)
	struct FColor BrushColor; // 0x27c(0x04)
	int32_t PolyFlags; // 0x280(0x04)
	char bColored : 1; // 0x284(0x01)
	char bSolidWhenSelected : 1; // 0x284(0x01)
	char bPlaceableFromClassBrowser : 1; // 0x284(0x01)
	char bNotForClientOrServer : 1; // 0x284(0x01)
	char pad_284_4 : 4; // 0x284(0x01)
	char pad_285[0x3]; // 0x285(0x03)
	struct UModel* Brush; // 0x288(0x08)
	struct UBrushComponent* BrushComponent; // 0x290(0x08)
	char bInManipulation : 1; // 0x298(0x01)
	char pad_298_1 : 7; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct TArray<struct FGeomSelection> SavedSelections; // 0x2a0(0x10)
};

// Class Engine.Volume
// Size: 0x2b0 (Inherited: 0x2b0)
struct AVolume : ABrush {
};

// Class Engine.PhysicsVolume
// Size: 0x2c0 (Inherited: 0x2b0)
struct APhysicsVolume : AVolume {
	float TerminalVelocity; // 0x2b0(0x04)
	int32_t Priority; // 0x2b4(0x04)
	float FluidFriction; // 0x2b8(0x04)
	char bWaterVolume : 1; // 0x2bc(0x01)
	char bPhysicsOnContact : 1; // 0x2bc(0x01)
	char pad_2BC_2 : 6; // 0x2bc(0x01)
	char pad_2BD[0x3]; // 0x2bd(0x03)
};

// Class Engine.MeshComponent
// Size: 0x570 (Inherited: 0x540)
struct UMeshComponent : UPrimitiveComponent {
	struct TArray<struct UMaterialInterface*> OverrideMaterials; // 0x540(0x10)
	char pad_550[0x10]; // 0x550(0x10)
	char bEnableMaterialParameterCaching : 1; // 0x560(0x01)
	char pad_560_1 : 7; // 0x560(0x01)
	char pad_561[0xf]; // 0x561(0x0f)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b4a170
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x4b4a0a0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x4b49ea0
	bool IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b49e00
	struct TArray<struct FName> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b49a40
	struct TArray<struct UMaterialInterface*> GetMaterials(); // Function Engine.MeshComponent.GetMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b49ac0
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b499a0
};

// Class Engine.SplineComponent
// Size: 0x640 (Inherited: 0x540)
struct USplineComponent : UPrimitiveComponent {
	struct FSplineCurves SplineCurves; // 0x540(0x70)
	struct FInterpCurveVector SplineInfo; // 0x5b0(0x18)
	struct FInterpCurveQuat SplineRotInfo; // 0x5c8(0x18)
	struct FInterpCurveVector SplineScaleInfo; // 0x5e0(0x18)
	struct FInterpCurveFloat SplineReparamTable; // 0x5f8(0x18)
	bool bAllowSplineEditingPerInstance; // 0x610(0x01)
	char pad_611[0x3]; // 0x611(0x03)
	int32_t ReparamStepsPerSegment; // 0x614(0x04)
	float Duration; // 0x618(0x04)
	bool bStationaryEndpoints; // 0x61c(0x01)
	bool bSplineHasBeenEdited; // 0x61d(0x01)
	bool bModifiedByConstructionScript; // 0x61e(0x01)
	bool bInputSplinePointsToConstructionScript; // 0x61f(0x01)
	bool bDrawDebug; // 0x620(0x01)
	bool bClosedLoop; // 0x621(0x01)
	bool bLoopPositionOverride; // 0x622(0x01)
	char pad_623[0x1]; // 0x623(0x01)
	float LoopPosition; // 0x624(0x04)
	struct FVector DefaultUpVector; // 0x628(0x18)

	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline // (Native|Public|BlueprintCallable) // @ game+0x4bb7490
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb73b0
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb7240
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb6970
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb7070
	void SetTangentColor(struct FLinearColor& TangentColor); // Function Engine.SplineComponent.SetTangentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb6970
	void SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb6f00
	void SetSplineWorldPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bb6e50
	void SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb6c10
	void SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bb6d20
	void SetSplineLocalPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bb6b60
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb6970
	void SetScaleAtSplinePoint(int32_t PointIndex, struct FVector& InScaleVector, bool bUpdateSpline); // Function Engine.SplineComponent.SetScaleAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb6860
	void SetRotationAtSplinePoint(int32_t PointIndex, struct FRotator& InRotation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetRotationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb66f0
	void SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb6580
	void SetDrawDebug(bool bShow); // Function Engine.SplineComponent.SetDrawDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb64f0
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb6410
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb62f0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb6220
	void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb6150
	bool IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb6120
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb6070
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5f70
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5ec0
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5dc0
	struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5d10
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5c60
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5b60
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5ab0
	struct FVector GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb59d0
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb58e0
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5790
	struct FVector GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb56b0
	struct FVector GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb55c0
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb54d0
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5310
	struct FTransform GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb51a0
	struct FTransform GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb5020
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4ea0
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4d50
	struct FVector GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3310
	struct FVector GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4c60
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4b70
	enum class ESplinePointType GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4ad0
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4aa0
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4900
	struct FVector GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4850
	struct FVector GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb47a0
	struct FVector GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb46f0
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb45a0
	struct FRotator GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb44c0
	struct FRotator GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb43d0
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb42e0
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb41c0
	float GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb40f0
	float GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4010
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3f30
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3de0
	struct FVector GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3d00
	struct FVector GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3c10
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3b20
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3af0
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3ac0
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3970
	struct FVector GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3890
	struct FVector GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb37a0
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb36b0
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3520
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb33f0
	struct FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3310
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3270
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb31a0
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb30d0
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb3030
	float GetDistanceAlongSplineAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2f90
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2e40
	struct FVector GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2d60
	struct FVector GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2c70
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2b80
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2ae0
	struct FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2a00
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2900
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2780
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2680
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb25d0
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb24d0
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb23f0
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb22f0
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb21f0
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2150
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb2050
	bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, struct TArray<struct FVector>& OutPoints); // Function Engine.SplineComponent.DivideSplineIntoPolylineRecursive // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb1e60
	bool ConvertSplineToPolyLine(enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, struct TArray<struct FVector>& OutPoints); // Function Engine.SplineComponent.ConvertSplineToPolyLine // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb1d20
	bool ConvertSplineSegmentToPolyLine(int32_t SplinePointStartIndex, enum class ESplineCoordinateSpace CoordinateSpace, float MaxSquareDistanceFromSpline, struct TArray<struct FVector>& OutPoints); // Function Engine.SplineComponent.ConvertSplineSegmentToPolyLine // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb1ba0
	void ClearSplinePoints(bool bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb1b10
	void AddSplineWorldPoint(struct FVector& position); // Function Engine.SplineComponent.AddSplineWorldPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb1a70
	void AddSplinePointAtIndex(struct FVector& position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb1900
	void AddSplinePoint(struct FVector& position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb17e0
	void AddSplineLocalPoint(struct FVector& position); // Function Engine.SplineComponent.AddSplineLocalPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bb1750
	void AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bb1650
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bb1510
};

// Class Engine.SplineMetadata
// Size: 0x28 (Inherited: 0x28)
struct USplineMetadata : UObject {
};

// Class Engine.TickableWorldSubsystem
// Size: 0x40 (Inherited: 0x30)
struct UTickableWorldSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.EdGraph
// Size: 0x60 (Inherited: 0x28)
struct UEdGraph : UObject {
	struct UEdGraphSchema* Schema; // 0x28(0x08)
	struct TArray<struct UEdGraphNode*> Nodes; // 0x30(0x10)
	char bEditable : 1; // 0x40(0x01)
	char bAllowDeletion : 1; // 0x40(0x01)
	char bAllowRenaming : 1; // 0x40(0x01)
	char pad_40_3 : 5; // 0x40(0x01)
	char pad_41[0x1f]; // 0x41(0x1f)
};

// Class Engine.SoundBase
// Size: 0x170 (Inherited: 0x28)
struct USoundBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USoundClass* SoundClassObject; // 0x30(0x08)
	char bDebug : 1; // 0x38(0x01)
	char bOverrideConcurrency : 1; // 0x38(0x01)
	char bEnableBusSends : 1; // 0x38(0x01)
	char bEnableBaseSubmix : 1; // 0x38(0x01)
	char bEnableSubmixSends : 1; // 0x38(0x01)
	char bHasDelayNode : 1; // 0x38(0x01)
	char bHasConcatenatorNode : 1; // 0x38(0x01)
	char bBypassVolumeScaleForPriority : 1; // 0x38(0x01)
	enum class EVirtualizationMode VirtualizationMode; // 0x39(0x01)
	char pad_3A[0x56]; // 0x3a(0x56)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x90(0x50)
	struct FSoundConcurrencySettings ConcurrencyOverrides; // 0xe0(0x28)
	float Duration; // 0x108(0x04)
	float MaxDistance; // 0x10c(0x04)
	float TotalSamples; // 0x110(0x04)
	float Priority; // 0x114(0x04)
	struct USoundAttenuation* AttenuationSettings; // 0x118(0x08)
	struct USoundSubmixBase* SoundSubmixObject; // 0x120(0x08)
	struct TArray<struct FSoundSubmixSendInfo> SoundSubmixSends; // 0x128(0x10)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x138(0x08)
	struct TArray<struct FSoundSourceBusSendInfo> BusSends; // 0x140(0x10)
	struct TArray<struct FSoundSourceBusSendInfo> PreEffectBusSends; // 0x150(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x160(0x10)
};

// Class Engine.SoundWave
// Size: 0x338 (Inherited: 0x170)
struct USoundWave : USoundBase {
	char pad_170[0x8]; // 0x170(0x08)
	int32_t CompressionQuality; // 0x178(0x04)
	int32_t StreamingPriority; // 0x17c(0x04)
	enum class ESoundwaveSampleRateSettings SampleRateQuality; // 0x180(0x01)
	char pad_181[0x1]; // 0x181(0x01)
	enum class ESoundGroup SoundGroup; // 0x182(0x01)
	char bLooping : 1; // 0x183(0x01)
	char bStreaming : 1; // 0x183(0x01)
	char pad_183_2 : 6; // 0x183(0x01)
	enum class ESoundAssetCompressionType SoundAssetCompressionType; // 0x184(0x01)
	char bSeekableStreaming : 1; // 0x185(0x01)
	char bUseBinkAudio : 1; // 0x185(0x01)
	char pad_185_2 : 6; // 0x185(0x01)
	char pad_186[0x1a]; // 0x186(0x1a)
	struct FSoundModulationDefaultRoutingSettings ModulationSettings; // 0x1a0(0x48)
	struct TArray<float> FrequenciesToAnalyze; // 0x1e8(0x10)
	struct TArray<struct FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x1f8(0x10)
	struct TArray<struct FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x208(0x10)
	int32_t InitialChunkSize; // 0x218(0x04)
	char pad_21C[0x40]; // 0x21c(0x40)
	char pad_25C_0 : 5; // 0x25c(0x01)
	char bMature : 1; // 0x25c(0x01)
	char bManualWordWrap : 1; // 0x25c(0x01)
	char bSingleLine : 1; // 0x25c(0x01)
	char bIsAmbisonics : 1; // 0x25d(0x01)
	char pad_25D_1 : 7; // 0x25d(0x01)
	enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x25e(0x01)
	char pad_25F[0x1]; // 0x25f(0x01)
	struct FString SpokenText; // 0x260(0x10)
	float SubtitlePriority; // 0x270(0x04)
	float Volume; // 0x274(0x04)
	float Pitch; // 0x278(0x04)
	int32_t NumChannels; // 0x27c(0x04)
	struct TArray<struct FSoundWaveCuePoint> CuePoints; // 0x280(0x10)
	int32_t SampleRate; // 0x290(0x04)
	char pad_294[0xc]; // 0x294(0x0c)
	struct TArray<struct FSubtitleCue> Subtitles; // 0x2a0(0x10)
	struct UCurveTable* Curves; // 0x2b0(0x08)
	struct UCurveTable* InternalCurves; // 0x2b8(0x08)
	char pad_2C0[0x78]; // 0x2c0(0x78)

	void SetSoundAssetCompressionType(enum class ESoundAssetCompressionType InSoundAssetCompressionType); // Function Engine.SoundWave.SetSoundAssetCompressionType // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb6a00
	enum class ESoundAssetCompressionType GetSoundAssetCompressionType(); // Function Engine.SoundWave.GetSoundAssetCompressionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb4a70
};

// Class Engine.SoundWaveProcedural
// Size: 0x390 (Inherited: 0x338)
struct USoundWaveProcedural : USoundWave {
	char pad_338[0x58]; // 0x338(0x58)
};

// Class Engine.RuntimeOptionsBase
// Size: 0x38 (Inherited: 0x28)
struct URuntimeOptionsBase : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.AssetImportData
// Size: 0x28 (Inherited: 0x28)
struct UAssetImportData : UObject {
};

// Class Engine.AudioEngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UAudioEngineSubsystem : UDynamicSubsystem {
};

// Class Engine.EngineCustomTimeStep
// Size: 0x28 (Inherited: 0x28)
struct UEngineCustomTimeStep : UObject {
};

// Class Engine.AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UAssetUserData : UObject {
};

// Class Engine.SkinnedMeshComponent
// Size: 0x820 (Inherited: 0x570)
struct USkinnedMeshComponent : UMeshComponent {
	struct USkeletalMesh* SkeletalMesh; // 0x570(0x08)
	struct TWeakObjectPtr<struct USkinnedMeshComponent> MasterPoseComponent; // 0x578(0x08)
	struct TArray<enum class ESkinCacheUsage> SkinCacheUsage; // 0x580(0x10)
	struct UMeshDeformer* MeshDeformer; // 0x590(0x08)
	struct UMeshDeformerInstance* MeshDeformerInstance; // 0x598(0x08)
	char pad_5A0[0x100]; // 0x5a0(0x100)
	struct UPhysicsAsset* PhysicsAssetOverride; // 0x6a0(0x08)
	int32_t ForcedLodModel; // 0x6a8(0x04)
	int32_t MinLodModel; // 0x6ac(0x04)
	char pad_6B0[0x8]; // 0x6b0(0x08)
	float StreamingDistanceMultiplier; // 0x6b8(0x04)
	char pad_6BC[0xc]; // 0x6bc(0x0c)
	struct TArray<struct FSkelMeshComponentLODInfo> LODInfo; // 0x6c8(0x10)
	char pad_6D8[0x24]; // 0x6d8(0x24)
	enum class EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x6fc(0x01)
	char pad_6FD[0x1]; // 0x6fd(0x01)
	char pad_6FE_0 : 3; // 0x6fe(0x01)
	char bOverrideMinLOD : 1; // 0x6fe(0x01)
	char bUseBoundsFromMasterPoseComponent : 1; // 0x6fe(0x01)
	char bForceWireframe : 1; // 0x6fe(0x01)
	char bDisplayBones : 1; // 0x6fe(0x01)
	char bDisableMorphTarget : 1; // 0x6fe(0x01)
	char bHideSkin : 1; // 0x6ff(0x01)
	char bPerBoneMotionBlur : 1; // 0x6ff(0x01)
	char bComponentUseFixedSkelBounds : 1; // 0x6ff(0x01)
	char bConsiderAllBodiesForBounds : 1; // 0x6ff(0x01)
	char bSyncAttachParentLOD : 1; // 0x6ff(0x01)
	char bCanHighlightSelectedSections : 1; // 0x6ff(0x01)
	char bRecentlyRendered : 1; // 0x6ff(0x01)
	char bCastCapsuleDirectShadow : 1; // 0x6ff(0x01)
	char bCastCapsuleIndirectShadow : 1; // 0x700(0x01)
	char bCPUSkinning : 1; // 0x700(0x01)
	char bEnableUpdateRateOptimizations : 1; // 0x700(0x01)
	char bDisplayDebugUpdateRateOptimizations : 1; // 0x700(0x01)
	char bRenderStatic : 1; // 0x700(0x01)
	char bIgnoreMasterPoseComponentLOD : 1; // 0x700(0x01)
	char pad_700_6 : 2; // 0x700(0x01)
	char bCachedLocalBoundsUpToDate : 1; // 0x701(0x01)
	char bCachedWorldSpaceBoundsUpToDate : 1; // 0x701(0x01)
	char pad_701_2 : 2; // 0x701(0x01)
	char bForceMeshObjectUpdate : 1; // 0x701(0x01)
	char pad_701_5 : 3; // 0x701(0x01)
	char pad_702[0x2]; // 0x702(0x02)
	float CapsuleIndirectShadowMinVisibility; // 0x704(0x04)
	char pad_708[0x38]; // 0x708(0x38)
	struct FBoxSphereBounds CachedWorldOrLocalSpaceBounds; // 0x740(0x38)
	char pad_778[0x8]; // 0x778(0x08)
	struct FMatrix CachedWorldToLocalTransform; // 0x780(0x80)
	char pad_800[0x20]; // 0x800(0x20)

	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba3990
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba3900
	void TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba3730
	void TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ba3560
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba3410
	void ShowAllMaterialSections(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba3380
	void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage); // Function Engine.SkinnedMeshComponent.SetVertexOffsetUsage // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba32d0
	void SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<struct FLinearColor>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ba31e0
	bool SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba3140
	void SetSkinWeightOverride(int32_t LODIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ba3050
	void SetSkeletalMesh(struct USkeletalMesh* NewMesh, bool bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh // (Native|Public|BlueprintCallable) // @ game+0x4ba2f80
	void SetRenderStatic(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2ef0
	void SetPreSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPreSkinningOffsets // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2dc0
	void SetPostSkinningOffsets(int32_t LODIndex, struct TArray<struct FVector> Offsets); // Function Engine.SkinnedMeshComponent.SetPostSkinningOffsets // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2dc0
	void SetPhysicsAsset(struct UPhysicsAsset* NewPhysicsAsset, bool bForceReInit); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset // (Native|Public|BlueprintCallable) // @ game+0x4ba2cf0
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2c60
	void SetMeshDeformer(struct UMeshDeformer* InMeshDeformer); // Function Engine.SkinnedMeshComponent.SetMeshDeformer // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2bd0
	void SetMasterPoseComponent(struct USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2b00
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2a70
	void SetCastCapsuleIndirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba29e0
	void SetCastCapsuleDirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2950
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba28d0
	bool IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba28a0
	bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba27d0
	bool IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2730
	void HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba2510
	int32_t GetVertexOffsetUsage(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.GetVertexOffsetUsage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba2490
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba2370
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba2230
	struct FTransform GetRefPoseTransform(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPoseTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba2150
	struct FVector GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba20a0
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba2010
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1fe0
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1fb0
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1f80
	struct FTransform GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1e50
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1e30
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1da0
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1d00
	struct FName FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba1ab0
	void ClearVertexColorOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba1a20
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba1a00
	void ClearSkinWeightOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba1970
	bool BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba18a0
};

// Class Engine.SkeletalMeshComponent
// Size: 0xf00 (Inherited: 0x820)
struct USkeletalMeshComponent : USkinnedMeshComponent {
	ClassPtrProperty AnimBlueprintGeneratedClass; // 0x820(0x08)
	struct UAnimInstance* AnimClass; // 0x828(0x08)
	struct UAnimInstance* AnimScriptInstance; // 0x830(0x08)
	struct UAnimInstance* PostProcessAnimInstance; // 0x838(0x08)
	struct FSingleAnimationPlayData AnimationData; // 0x840(0x18)
	char pad_858[0x10]; // 0x858(0x10)
	struct FVector RootBoneTranslation; // 0x868(0x18)
	struct FVector LineCheckBoundsScale; // 0x880(0x18)
	char pad_898[0x30]; // 0x898(0x30)
	struct TArray<struct UAnimInstance*> LinkedInstances; // 0x8c8(0x10)
	struct TArray<struct FTransform> CachedBoneSpaceTransforms; // 0x8d8(0x10)
	struct TArray<struct FTransform> CachedComponentSpaceTransforms; // 0x8e8(0x10)
	char pad_8F8[0xb0]; // 0x8f8(0xb0)
	float GlobalAnimRateScale; // 0x9a8(0x04)
	enum class EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x9ac(0x01)
	enum class EPhysicsTransformUpdateMode PhysicsTransformUpdateMode; // 0x9ad(0x01)
	char pad_9AE[0x1]; // 0x9ae(0x01)
	enum class EAnimationMode AnimationMode; // 0x9af(0x01)
	char pad_9B0[0x1]; // 0x9b0(0x01)
	char bDisablePostProcessBlueprint : 1; // 0x9b1(0x01)
	char pad_9B1_1 : 1; // 0x9b1(0x01)
	char bUpdateOverlapsOnAnimationFinalize : 1; // 0x9b1(0x01)
	char pad_9B1_3 : 1; // 0x9b1(0x01)
	char bHasValidBodies : 1; // 0x9b1(0x01)
	char bBlendPhysics : 1; // 0x9b1(0x01)
	char bEnablePhysicsOnDedicatedServer : 1; // 0x9b1(0x01)
	char bUpdateJointsFromAnimation : 1; // 0x9b1(0x01)
	char bAllowClothActors : 1; // 0x9b2(0x01)
	char bDisableClothSimulation : 1; // 0x9b2(0x01)
	char pad_9B2_2 : 6; // 0x9b2(0x01)
	char pad_9B3[0x5]; // 0x9b3(0x05)
	char bDisableRigidBodyAnimNode : 1; // 0x9b8(0x01)
	char bAllowAnimCurveEvaluation : 1; // 0x9b8(0x01)
	char bDisableAnimCurves : 1; // 0x9b8(0x01)
	char pad_9B8_3 : 3; // 0x9b8(0x01)
	char bCollideWithEnvironment : 1; // 0x9b8(0x01)
	char bCollideWithAttachedChildren : 1; // 0x9b8(0x01)
	char bForceCollisionUpdate : 1; // 0x9b9(0x01)
	char bLocalSpaceSimulation : 1; // 0x9b9(0x01)
	char bResetAfterTeleport : 1; // 0x9b9(0x01)
	char pad_9B9_3 : 1; // 0x9b9(0x01)
	char bDeferKinematicBoneUpdate : 1; // 0x9b9(0x01)
	char bNoSkeletonUpdate : 1; // 0x9b9(0x01)
	char bPauseAnims : 1; // 0x9b9(0x01)
	char bUseRefPoseOnInitAnim : 1; // 0x9b9(0x01)
	char bEnablePerPolyCollision : 1; // 0x9ba(0x01)
	char bForceRefpose : 1; // 0x9ba(0x01)
	char bOnlyAllowAutonomousTickPose : 1; // 0x9ba(0x01)
	char bIsAutonomousTickPose : 1; // 0x9ba(0x01)
	char bOldForceRefPose : 1; // 0x9ba(0x01)
	char bShowPrePhysBones : 1; // 0x9ba(0x01)
	char bRequiredBonesUpToDate : 1; // 0x9ba(0x01)
	char bAnimTreeInitialised : 1; // 0x9ba(0x01)
	char bIncludeComponentLocationIntoBounds : 1; // 0x9bb(0x01)
	char bEnableLineCheckWithBounds : 1; // 0x9bb(0x01)
	char bPropagateCurvesToSlaves : 1; // 0x9bb(0x01)
	char bSkipKinematicUpdateWhenInterpolating : 1; // 0x9bb(0x01)
	char bSkipBoundsUpdateWhenInterpolating : 1; // 0x9bb(0x01)
	char pad_9BB_5 : 2; // 0x9bb(0x01)
	char bNeedsQueuedAnimEventsDispatched : 1; // 0x9bb(0x01)
	char pad_9BC[0x2]; // 0x9bc(0x02)
	uint16_t CachedAnimCurveUidVersion; // 0x9be(0x02)
	float ClothBlendWeight; // 0x9c0(0x04)
	bool bWaitForParallelClothTask; // 0x9c4(0x01)
	char pad_9C5[0x3]; // 0x9c5(0x03)
	struct TArray<struct FName> DisallowedAnimCurves; // 0x9c8(0x10)
	struct UBodySetup* BodySetup; // 0x9d8(0x08)
	char pad_9E0[0x4]; // 0x9e0(0x04)
	float ClothMaxDistanceScale; // 0x9e4(0x04)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x9e8(0x10)
	struct FMulticastInlineDelegate OnPlasticDeformation; // 0x9f8(0x10)
	struct UClothingSimulationFactory* ClothingSimulationFactory; // 0xa08(0x08)
	char pad_A10[0xf8]; // 0xa10(0xf8)
	float TeleportDistanceThreshold; // 0xb08(0x04)
	float TeleportRotationThreshold; // 0xb0c(0x04)
	char pad_B10[0x8]; // 0xb10(0x08)
	uint32_t LastPoseTickFrame; // 0xb18(0x04)
	char pad_B1C[0x94]; // 0xb1c(0x94)
	struct UClothingSimulationInteractor* ClothingInteractor; // 0xbb0(0x08)
	char pad_BB8[0xc8]; // 0xbb8(0xc8)
	struct FMulticastInlineDelegate OnAnimInitialized; // 0xc80(0x10)
	char pad_C90[0x270]; // 0xc90(0x270)

	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9e060
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dfd0
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dfb0
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9df20
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9df00
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dee0
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9de10
	void SetUpdateClothInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateClothInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dd80
	void SetUpdateAnimationInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dd80
	void SetTeleportRotationThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dd00
	void SetTeleportDistanceThreshold(float Threshold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dc80
	void SetPosition(float InPos, bool bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9dba0
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9db20
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9daa0
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow // (Native|Public|BlueprintCallable) // @ game+0x4b9d980
	void SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d860
	void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d7d0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d6c0
	void SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d5f0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d560
	void SetDisableAnimCurves(bool bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d4d0
	void SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d400
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d2f0
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d270
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x4b9d1a0
	void SetAnimClass(struct UObject* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass // (Native|Public|BlueprintCallable) // @ game+0x4b9d000
	void SetAnimationMode(enum class EAnimationMode InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d120
	void SetAnimation(struct UAnimationAsset* NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9d090
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9cea0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9ccd0
	void SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& List, bool bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9cda0
	void SetAllowClothActors(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowClothActors // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9cc40
	void SetAllowAnimCurveEvaluation(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9cbb0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9ca80
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c950
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c7e0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c750
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c670
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9c540
	void SetAllBodiesBelowPhysicsDisabled(struct FName& InBoneName, bool bDisabled, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsDisabled // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9c410
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9c290
	void SetAllBodiesBelowLinearVelocity(struct FName& InBoneName, struct FVector& LinearVelocity, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowLinearVelocity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b9c160
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c140
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c120
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c0a0
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c080
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9c060
	void PlayAnimation(struct UAnimationAsset* NewAnimToPlay, bool bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9bf90
	void Play(bool bLooping); // Function Engine.SkeletalMeshComponent.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9bf00
	void OverrideAnimationData(struct UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9bd40
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9bc70
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9bbe0
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9b9d0
	bool IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9b9a0
	bool IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9b970
	bool IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4b9b8d0
	bool HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9b8a0
	bool GetTransformAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, struct FTransform& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetTransformAttribute_Ref // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b9b6a0
	bool GetTransformAttribute(struct FName& BoneName, struct FName& AttributeName, struct FTransform DefaultValue, struct FTransform& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetTransformAttribute // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b9b3f0
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9b3c0
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9b3c0
	bool GetStringAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9b200
	bool GetStringAttribute(struct FName& BoneName, struct FName& AttributeName, struct FString DefaultValue, struct FString& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetStringAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9afe0
	struct FVector GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9afa0
	struct UAnimInstance* GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9af70
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9af40
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9af10
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9ae70
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9add0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9ad30
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9ac40
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9aba0
	bool GetIntegerAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9aa00
	bool GetIntegerAttribute(struct FName& BoneName, struct FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetIntegerAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9a810
	bool GetFloatAttribute_Ref(struct FName& BoneName, struct FName& AttributeName, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute_Ref // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9a660
	bool GetFloatAttribute(struct FName& BoneName, struct FName& AttributeName, float DefaultValue, float& OutValue, enum class ECustomBoneAttributeLookup LookupType); // Function Engine.SkeletalMeshComponent.GetFloatAttribute // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9a470
	bool GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9a440
	bool GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b9a410
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9a290
	void GetConstraintsFromBody(struct FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, struct TArray<struct FConstraintInstanceAccessor>& OutConstraints); // Function Engine.SkeletalMeshComponent.GetConstraintsFromBody // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b9a0c0
	void GetConstraints(bool bIncludesTerminated, struct TArray<struct FConstraintInstanceAccessor>& OutConstraints); // Function Engine.SkeletalMeshComponent.GetConstraints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b99fc0
	struct FConstraintInstanceAccessor GetConstraintByName(struct FName ConstraintName, bool bIncludesTerminated); // Function Engine.SkeletalMeshComponent.GetConstraintByName // (Final|Native|Public|BlueprintCallable) // @ game+0x4b99ee0
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99e80
	struct UClothingSimulationInteractor* GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99eb0
	float GetBoneMass(struct FName BoneName, bool bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99db0
	struct FVector GetBoneLinearVelocity(struct FName& InBoneName); // Function Engine.SkeletalMeshComponent.GetBoneLinearVelocity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b99cf0
	struct UAnimInstance* GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99c90
	struct UObject* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass // (Final|Native|Public) // @ game+0x4b99c60
	enum class EAnimationMode GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99cc0
	bool GetAllowRigidBodyAnimNode(); // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99c00
	bool GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99c30
	bool GetAllowClothActors(); // Function Engine.SkeletalMeshComponent.GetAllowClothActors // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b99bd0
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset // (Final|Native|Public|BlueprintCallable) // @ game+0x4b99bb0
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport // (Final|Native|Public|BlueprintCallable) // @ game+0x4b99b90
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName // (Final|Native|Public|BlueprintCallable) // @ game+0x4b99b00
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x4b99ae0
	void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b99990
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b99970
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x4b998a0
	void AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b99700
	void AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b99560
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b99440
};

// Class Engine.AnimInstance
// Size: 0x350 (Inherited: 0x28)
struct UAnimInstance : UObject {
	struct USkeleton* CurrentSkeleton; // 0x28(0x08)
	enum class ERootMotionMode RootMotionMode; // 0x30(0x01)
	char bUseMultiThreadedAnimationUpdate : 1; // 0x31(0x01)
	char bUsingCopyPoseFromMesh : 1; // 0x31(0x01)
	char pad_31_2 : 2; // 0x31(0x01)
	char bReceiveNotifiesFromLinkedInstances : 1; // 0x31(0x01)
	char bPropagateNotifiesToLinkedInstances : 1; // 0x31(0x01)
	char bUseMainInstanceMontageEvaluationData : 1; // 0x31(0x01)
	char bQueueMontageEvents : 1; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
	struct FMulticastInlineDelegate OnMontageBlendingOut; // 0x38(0x10)
	struct FMulticastInlineDelegate OnMontageStarted; // 0x48(0x10)
	struct FMulticastInlineDelegate OnMontageEnded; // 0x58(0x10)
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x68(0x10)
	char pad_78[0xd8]; // 0x78(0xd8)
	struct FAnimNotifyQueue NotifyQueue; // 0x150(0x70)
	struct TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState; // 0x1c0(0x10)
	struct TArray<struct FAnimNotifyEventReference> ActiveAnimNotifyEventReference; // 0x1d0(0x10)
	char pad_1E0[0x170]; // 0x1e0(0x170)

	bool WasAnimNotifyTriggeredInStateMachine(int32_t MachineIndex, struct UAnimNotify* AnimNotifyType); // Function Engine.AnimInstance.WasAnimNotifyTriggeredInStateMachine // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a40250
	bool WasAnimNotifyTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, struct UAnimNotify* AnimNotifyType); // Function Engine.AnimInstance.WasAnimNotifyTriggeredInSourceState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a40140
	bool WasAnimNotifyTriggeredInAnyState(struct UAnimNotify* AnimNotifyType); // Function Engine.AnimInstance.WasAnimNotifyTriggeredInAnyState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a400a0
	bool WasAnimNotifyStateActiveInStateMachine(int32_t MachineIndex, struct UAnimNotifyState* AnimNotifyStateType); // Function Engine.AnimInstance.WasAnimNotifyStateActiveInStateMachine // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3ffd0
	bool WasAnimNotifyStateActiveInSourceState(int32_t MachineIndex, int32_t StateIndex, struct UAnimNotifyState* AnimNotifyStateType); // Function Engine.AnimInstance.WasAnimNotifyStateActiveInSourceState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3fec0
	bool WasAnimNotifyStateActiveInAnyState(struct UAnimNotifyState* AnimNotifyStateType); // Function Engine.AnimInstance.WasAnimNotifyStateActiveInAnyState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3fe20
	bool WasAnimNotifyNameTriggeredInStateMachine(int32_t MachineIndex, struct FName NotifyName); // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInStateMachine // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3fd50
	bool WasAnimNotifyNameTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, struct FName NotifyName); // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInSourceState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3fc40
	bool WasAnimNotifyNameTriggeredInAnyState(struct FName NotifyName); // Function Engine.AnimInstance.WasAnimNotifyNameTriggeredInAnyState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3fba0
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x4a3fad0
	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3fa40
	struct APawn* TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3fa10
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f940
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.AnimInstance.SnapshotPose // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a3f870
	void SetUseMainInstanceMontageEvaluationData(bool bSet); // Function Engine.AnimInstance.SetUseMainInstanceMontageEvaluationData // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f7e0
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function Engine.AnimInstance.SetRootMotionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4a2e330
	void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f750
	void SetPropagateNotifiesToLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f6c0
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f5f0
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot // (Native|Public|BlueprintCallable) // @ game+0x4a3f560
	void ResetDynamics(enum class ETeleportType InTeleportType); // Function Engine.AnimInstance.ResetDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f4e0
	void RequestSlotGroupInertialization(struct FName InSlotGroupName, float Duration); // Function Engine.AnimInstance.RequestSlotGroupInertialization // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f410
	void RemovePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.RemovePoseSnapshot // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3f380
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, struct FMontageBlendSettings& BlendInSettings, struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a3f0f0
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, struct FAlphaBlendArgs& BlendIn, struct FAlphaBlendArgs& BlendOut, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendArgs // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a3ee60
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3ec00
	void MontageSync_StopFollowing(struct UAnimMontage* MontageFollower); // Function Engine.AnimInstance.MontageSync_StopFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3d880
	void MontageSync_Follow(struct UAnimMontage* MontageFollower, struct UAnimInstance* OtherAnimInstance, struct UAnimMontage* MontageLeader); // Function Engine.AnimInstance.MontageSync_Follow // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3d770
	void Montage_StopWithBlendSettings(struct FMontageBlendSettings& BlendOutSettings, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_StopWithBlendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a3eb10
	void Montage_StopWithBlendOut(struct FAlphaBlendArgs& BlendOut, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_StopWithBlendOut // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a3ea20
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_StopGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3e950
	void Montage_Stop(float InBlendOutTime, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3e880
	void Montage_SetPosition(struct UAnimMontage* Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3e7b0
	void Montage_SetPlayRate(struct UAnimMontage* Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3e6e0
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_SetNextSection // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3e5d0
	void Montage_Resume(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3e540
	float Montage_PlayWithBlendSettings(struct UAnimMontage* MontageToPlay, struct FMontageBlendSettings& BlendInSettings, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_PlayWithBlendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a3e340
	float Montage_PlayWithBlendIn(struct UAnimMontage* MontageToPlay, struct FAlphaBlendArgs& BlendIn, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_PlayWithBlendIn // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a3e140
	float Montage_Play(struct UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_Play // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3df90
	void Montage_Pause(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3df00
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3de30
	void Montage_JumpToSection(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSection // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3dd60
	bool Montage_IsPlaying(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3dcc0
	bool Montage_IsActive(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3dc20
	float Montage_GetPosition(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3db80
	float Montage_GetPlayRate(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3dae0
	bool Montage_GetIsStopped(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetIsStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3da40
	struct FName Montage_GetCurrentSection(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d9b0
	float Montage_GetBlendTime(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetBlendTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d910
	void LockAIResources(bool bLockMovement, bool LockAILogic); // Function Engine.AnimInstance.LockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x4a3d6a0
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3d5d0
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3d540
	bool IsUsingMainInstanceMontageEvaluationData(); // Function Engine.AnimInstance.IsUsingMainInstanceMontageEvaluationData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d470
	bool IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d310
	bool IsPlayingSlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d240
	bool IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d210
	bool HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d140
	bool GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d020
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3cf70
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3cea0
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3cdd0
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3cd00
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3cc30
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3cb60
	bool GetReceiveNotifiesFromLinkedInstances(); // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3cb30
	bool GetPropagateNotifiesToLinkedInstances(); // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3cb00
	struct USkeletalMeshComponent* GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3caa0
	struct AActor* GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3ca70
	void GetLinkedAnimLayerInstancesByGroup(struct FName InGroup, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c890
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(struct FName InGroup, struct UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c7c0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c720
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c680
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c590
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c4f0
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3c420
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3c350
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3c280
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3c1b0
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3c110
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3c070
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3bfd0
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3bf30
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3be90
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3bdf0
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3bd50
	float GetDeltaSeconds(); // Function Engine.AnimInstance.GetDeltaSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3bcf0
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3bc50
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a3bbc0
	struct UAnimMontage* GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3bb90
	void GetAllCurveNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b680
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b590
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x4a3b570
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation); // Function Engine.AnimInstance.CalculateDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b470
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime); // Function Engine.AnimInstance.BlueprintThreadSafeUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void BlueprintLinkedAnimationLayersInitialized(); // Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x2552560
};

// Class Engine.BlueprintGeneratedClass
// Size: 0x328 (Inherited: 0x230)
struct UBlueprintGeneratedClass : UClass {
	int32_t NumReplicatedProperties; // 0x230(0x04)
	char bHasNativizedParent : 1; // 0x234(0x01)
	char bHasCookedComponentInstancingData : 1; // 0x234(0x01)
	char pad_234_2 : 6; // 0x234(0x01)
	char pad_235[0x3]; // 0x235(0x03)
	struct TArray<struct UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x238(0x10)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x248(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x258(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x268(0x10)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x278(0x08)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0x280(0x08)
	struct UStructProperty* UberGraphFramePointerProperty; // 0x288(0x08)
	char pad_290[0x8]; // 0x290(0x08)
	struct UFunction* UberGraphFunction; // 0x298(0x08)
	struct TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x2a0(0x50)
	char pad_2F0[0x38]; // 0x2f0(0x38)
};

// Class Engine.TimecodeProvider
// Size: 0x30 (Inherited: 0x28)
struct UTimecodeProvider : UObject {
	float FrameDelay; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)

	struct FTimecode GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4bb0
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4b80
	struct FQualifiedFrameTime GetQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetQualifiedFrameTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4b10
	struct FFrameRate GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4a70
	struct FTimecode GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4a30
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc49f0
	bool FetchTimecode(struct FQualifiedFrameTime& OutFrameTime); // Function Engine.TimecodeProvider.FetchTimecode // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc4930
	void FetchAndUpdate(); // Function Engine.TimecodeProvider.FetchAndUpdate // (Native|Public|BlueprintCallable) // @ game+0x3929e50
};

// Class Engine.StreamableRenderAsset
// Size: 0xd0 (Inherited: 0x28)
struct UStreamableRenderAsset : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	double ForceMipLevelsToBeResidentTimestamp; // 0x40(0x08)
	int32_t NumCinematicMipLevels; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct FPerQualityLevelInt NoRefStreamingLODBias; // 0x50(0x68)
	int32_t StreamingIndex; // 0xb8(0x04)
	int32_t CachedCombinedLODBias; // 0xbc(0x04)
	char NeverStream : 1; // 0xc0(0x01)
	char bGlobalForceMipLevelsToBeResident : 1; // 0xc0(0x01)
	char bHasStreamingUpdatePending : 1; // 0xc0(0x01)
	char bForceMiplevelsToBeResident : 1; // 0xc0(0x01)
	char bIgnoreStreamingMipBias : 1; // 0xc0(0x01)
	char bUseCinematicMipLevels : 1; // 0xc0(0x01)
	char pad_C0_6 : 2; // 0xc0(0x01)
	char pad_C1[0xf]; // 0xc1(0x0f)

	void SetForceMipLevelsToBeResident(float Seconds, int32_t CinematicLODGroupMask); // Function Engine.StreamableRenderAsset.SetForceMipLevelsToBeResident // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bbe2f0
};

// Class Engine.Texture
// Size: 0x1f0 (Inherited: 0xd0)
struct UTexture : UStreamableRenderAsset {
	char pad_D0[0x10]; // 0xd0(0x10)
	struct FGuid LightingGuid; // 0xe0(0x10)
	int32_t LevelIndex; // 0xf0(0x04)
	int32_t LODBias; // 0xf4(0x04)
	enum class TextureCompressionSettings CompressionSettings; // 0xf8(0x01)
	enum class TextureFilter Filter; // 0xf9(0x01)
	enum class ETextureMipLoadOptions MipLoadOptions; // 0xfa(0x01)
	enum class TextureGroup LODGroup; // 0xfb(0x01)
	struct FPerPlatformFloat Downscale; // 0xfc(0x04)
	enum class ETextureDownscaleOptions DownscaleOptions; // 0x100(0x01)
	char SRGB : 1; // 0x101(0x01)
	char bNoTiling : 1; // 0x101(0x01)
	char VirtualTextureStreaming : 1; // 0x101(0x01)
	char CompressionYCoCg : 1; // 0x101(0x01)
	char bNotOfflineProcessed : 1; // 0x101(0x01)
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x101(0x01)
	char pad_101_6 : 2; // 0x101(0x01)
	char pad_102[0x6]; // 0x102(0x06)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x108(0x10)
	char pad_118[0xd8]; // 0x118(0xd8)
};

// Class Engine.TextureCube
// Size: 0x290 (Inherited: 0x1f0)
struct UTextureCube : UTexture {
	char pad_1F0[0xa0]; // 0x1f0(0xa0)
};

// Class Engine.MaterialExpression
// Size: 0x40 (Inherited: 0x28)
struct UMaterialExpression : UObject {
	struct UMaterial* Material; // 0x28(0x08)
	struct UMaterialFunction* Function; // 0x30(0x08)
	char bIsParameterExpression : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.StaticMeshComponent
// Size: 0x5d0 (Inherited: 0x570)
struct UStaticMeshComponent : UMeshComponent {
	int32_t ForcedLodModel; // 0x568(0x04)
	int32_t PreviousLODLevel; // 0x56c(0x04)
	int32_t MinLOD; // 0x570(0x04)
	int32_t SubDivisionStepSize; // 0x574(0x04)
	struct UStaticMesh* StaticMesh; // 0x578(0x08)
	struct FColor WireframeColorOverride; // 0x580(0x04)
	char bEvaluateWorldPositionOffset : 1; // 0x584(0x01)
	char bOverrideWireframeColor : 1; // 0x584(0x01)
	char bOverrideMinLOD : 1; // 0x584(0x01)
	char bOverrideNavigationExport : 1; // 0x584(0x01)
	char bForceNavigationObstacle : 1; // 0x584(0x01)
	char bDisallowMeshPaintPerInstance : 1; // 0x584(0x01)
	char bIgnoreInstanceForTextureStreaming : 1; // 0x584(0x01)
	char bOverrideLightMapRes : 1; // 0x584(0x01)
	char bCastDistanceFieldIndirectShadow : 1; // 0x585(0x01)
	char bOverrideDistanceFieldSelfShadowBias : 1; // 0x585(0x01)
	char bUseSubDivisions : 1; // 0x585(0x01)
	char bUseDefaultCollision : 1; // 0x585(0x01)
	char bSortTriangles : 1; // 0x585(0x01)
	char bReverseCulling : 1; // 0x585(0x01)
	int32_t OverriddenLightMapRes; // 0x588(0x04)
	float DistanceFieldIndirectShadowMinVisibility; // 0x58c(0x04)
	float DistanceFieldSelfShadowBias; // 0x590(0x04)
	float StreamingDistanceMultiplier; // 0x594(0x04)
	struct TArray<struct FStaticMeshComponentLODInfo> LODData; // 0x598(0x10)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x5a8(0x10)
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x5b8(0x18)

	bool SetStaticMesh(struct UStaticMesh* NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh // (Native|Public|BlueprintCallable) // @ game+0x1fd8b50
	void SetReverseCulling(bool ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe810
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe3c0
	void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue); // Function Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe260
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbdfa0
	void OnRep_StaticMesh(struct UStaticMesh* OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh // (Final|Native|Public) // @ game+0x4bbdf10
	void GetLocalBounds(struct FVector& Min, struct FVector& Max); // Function Engine.StaticMeshComponent.GetLocalBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bbdd60
};

// Class Engine.SoundEffectPreset
// Size: 0x68 (Inherited: 0x28)
struct USoundEffectPreset : UObject {
	char pad_28[0x40]; // 0x28(0x40)
};

// Class Engine.SoundEffectSubmixPreset
// Size: 0x68 (Inherited: 0x68)
struct USoundEffectSubmixPreset : USoundEffectPreset {
};

// Class Engine.MaterialExpressionTextureBase
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionTextureBase : UMaterialExpression {
	struct UTexture* Texture; // 0x40(0x08)
};

// Class Engine.MaterialExpressionTextureSample
// Size: 0x60 (Inherited: 0x48)
struct UMaterialExpressionTextureSample : UMaterialExpressionTextureBase {
	struct FExpressionInput Coordinates; // 0x48(0x14)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.MaterialExpressionTextureSampleParameter
// Size: 0x80 (Inherited: 0x60)
struct UMaterialExpressionTextureSampleParameter : UMaterialExpressionTextureSample {
	struct FName ParameterName; // 0x60(0x08)
	struct FGuid ExpressionGuid; // 0x68(0x10)
	struct FName Group; // 0x78(0x08)
};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// Size: 0x80 (Inherited: 0x80)
struct UMaterialExpressionTextureSampleParameter2D : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.CameraModifier
// Size: 0x48 (Inherited: 0x28)
struct UCameraModifier : UObject {
	char bDebug : 1; // 0x28(0x01)
	char bExclusive : 1; // 0x28(0x01)
	char pad_28_2 : 6; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	char Priority; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	struct APlayerCameraManager* CameraOwner; // 0x30(0x08)
	float AlphaInTime; // 0x38(0x04)
	float AlphaOutTime; // 0x3c(0x04)
	float Alpha; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	void OnCameraOwnerDestroyed(struct AActor* InOwner); // Function Engine.CameraModifier.OnCameraOwnerDestroyed // (Final|Native|Protected) // @ game+0x4a6cf00
	bool IsDisabled(); // Function Engine.CameraModifier.IsDisabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1a00860
	struct AActor* GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3fc1c70
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier // (Native|Public|BlueprintCallable) // @ game+0xacd650
	void DisableModifier(bool bImmediate); // Function Engine.CameraModifier.DisableModifier // (Native|Public|BlueprintCallable) // @ game+0x4a6b340
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess // (BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2552560
	void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFOV); // Function Engine.CameraModifier.BlueprintModifyCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2552560
};

// Class Engine.CameraShakeBase
// Size: 0xf0 (Inherited: 0x28)
struct UCameraShakeBase : UObject {
	bool bSingleInstance; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float ShakeScale; // 0x2c(0x04)
	struct UCameraShakePattern* RootShakePattern; // 0x30(0x08)
	struct APlayerCameraManager* CameraManager; // 0x38(0x08)
	char pad_40[0xb0]; // 0x40(0xb0)

	void SetRootShakePattern(struct UCameraShakePattern* InPattern); // Function Engine.CameraShakeBase.SetRootShakePattern // (Final|Native|Public|BlueprintCallable) // @ game+0x4a6cf90
	struct UCameraShakePattern* GetRootShakePattern(); // Function Engine.CameraShakeBase.GetRootShakePattern // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10123d0
};

// Class Engine.CameraShakePattern
// Size: 0x28 (Inherited: 0x28)
struct UCameraShakePattern : UObject {
};

// Class Engine.Commandlet
// Size: 0x80 (Inherited: 0x28)
struct UCommandlet : UObject {
	struct FString HelpDescription; // 0x28(0x10)
	struct FString HelpUsage; // 0x38(0x10)
	struct FString HelpWebLink; // 0x48(0x10)
	struct TArray<struct FString> HelpParamNames; // 0x58(0x10)
	struct TArray<struct FString> HelpParamDescriptions; // 0x68(0x10)
	char IsServer : 1; // 0x78(0x01)
	char IsClient : 1; // 0x78(0x01)
	char IsEditor : 1; // 0x78(0x01)
	char LogToConsole : 1; // 0x78(0x01)
	char ShowErrorCount : 1; // 0x78(0x01)
	char ShowProgress : 1; // 0x78(0x01)
	char pad_78_6 : 2; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.AudioComponent
// Size: 0xb20 (Inherited: 0x2b0)
struct UAudioComponent : USceneComponent {
	char pad_2B0[0x188]; // 0x2b0(0x188)
	struct USoundBase* Sound; // 0x438(0x08)
	struct TArray<struct FAudioParameter> DefaultParameters; // 0x440(0x10)
	struct TArray<struct FAudioParameter> InstanceParameters; // 0x450(0x10)
	struct USoundClass* SoundClassOverride; // 0x460(0x08)
	char bAutoDestroy : 1; // 0x468(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x468(0x01)
	char bShouldRemainActiveIfDropped : 1; // 0x468(0x01)
	char bAllowSpatialization : 1; // 0x468(0x01)
	char bOverrideAttenuation : 1; // 0x468(0x01)
	char bOverrideSubtitlePriority : 1; // 0x468(0x01)
	char bIsUISound : 1; // 0x468(0x01)
	char bEnableLowPassFilter : 1; // 0x468(0x01)
	char bOverridePriority : 1; // 0x469(0x01)
	char bSuppressSubtitles : 1; // 0x469(0x01)
	char bCanPlayMultipleInstances : 1; // 0x469(0x01)
	char bDisableParameterUpdatesWhilePlaying : 1; // 0x469(0x01)
	char pad_469_4 : 4; // 0x469(0x01)
	char pad_46A_0 : 6; // 0x46a(0x01)
	char bAutoManageAttachment : 1; // 0x46a(0x01)
	char pad_46A_7 : 1; // 0x46a(0x01)
	char pad_46B[0x5]; // 0x46b(0x05)
	struct FName AudioComponentUserID; // 0x470(0x08)
	float PitchModulationMin; // 0x478(0x04)
	float PitchModulationMax; // 0x47c(0x04)
	float VolumeModulationMin; // 0x480(0x04)
	float VolumeModulationMax; // 0x484(0x04)
	float VolumeMultiplier; // 0x488(0x04)
	int32_t EnvelopeFollowerAttackTime; // 0x48c(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x490(0x04)
	float Priority; // 0x494(0x04)
	float SubtitlePriority; // 0x498(0x04)
	char pad_49C[0x4]; // 0x49c(0x04)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x4a0(0x08)
	float PitchMultiplier; // 0x4a8(0x04)
	float LowPassFilterFrequency; // 0x4ac(0x04)
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct USoundAttenuation* AttenuationSettings; // 0x4b8(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x4c0(0x3c8)
	struct USoundConcurrency* ConcurrencySettings; // 0x888(0x08)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x890(0x50)
	char pad_8E0[0xc]; // 0x8e0(0x0c)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x8ec(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x8ed(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x8ee(0x01)
	char pad_8EF[0x1]; // 0x8ef(0x01)
	struct FSoundModulationDefaultRoutingSettings ModulationRouting; // 0x8f0(0x48)
	struct FMulticastInlineDelegate OnAudioPlayStateChanged; // 0x938(0x10)
	char pad_948[0x18]; // 0x948(0x18)
	struct FMulticastInlineDelegate OnAudioVirtualizationChanged; // 0x960(0x10)
	char pad_970[0x18]; // 0x970(0x18)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x988(0x10)
	char pad_998[0x18]; // 0x998(0x18)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x9b0(0x10)
	char pad_9C0[0x18]; // 0x9c0(0x18)
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x9d8(0x10)
	char pad_9E8[0x18]; // 0x9e8(0x18)
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0xa00(0x10)
	char pad_A10[0x18]; // 0xa10(0x18)
	struct FDelegate OnQueueSubtitles; // 0xa28(0x10)
	char pad_A38[0x10]; // 0xa38(0x10)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0xa48(0x08)
	struct FName AutoAttachSocketName; // 0xa50(0x08)
	char pad_A58[0xc8]; // 0xa58(0xc8)

	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed // (Final|Native|Public|BlueprintCallable) // @ game+0x4a55150
	void Stop(); // Function Engine.AudioComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x4a55130
	void SetWaveParameter(struct FName InName, struct USoundWave* InWave); // Function Engine.AudioComponent.SetWaveParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x4a55060
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54fe0
	void SetUISound(bool bInUISound); // Function Engine.AudioComponent.SetUISound // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54f50
	void SetSubmixSend(struct USoundSubmixBase* Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54e80
	void SetSourceBusSendPreEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54db0
	void SetSourceBusSendPostEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54ce0
	void SetSound(struct USoundBase* NewSound); // Function Engine.AudioComponent.SetSound // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54c50
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54ae0
	void SetPaused(bool bPause); // Function Engine.AudioComponent.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54a50
	void SetOutputToBusOnly(bool bInOutputToBusOnly); // Function Engine.AudioComponent.SetOutputToBusOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x4a549c0
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54940
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4a548b0
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter // (Native|Public|BlueprintCallable) // @ game+0x4a547e0
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter // (Native|Public|BlueprintCallable) // @ game+0x4a54700
	void SetBoolParameter(struct FName InName, bool InBool); // Function Engine.AudioComponent.SetBoolParameter // (Native|Public|BlueprintCallable) // @ game+0x4a545c0
	void SetAudioBusSendPreEffect(struct UAudioBus* AudioBus, float AudioBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x4a544f0
	void SetAudioBusSendPostEffect(struct UAudioBus* AudioBus, float AudioBusSendLevel); // Function Engine.AudioComponent.SetAudioBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x4a54420
	void PlayQuantized(struct UObject* WorldContextObject, struct UQuartzClockHandle*& InClockHandle, struct FQuartzQuantizationBoundary& InQuantizationBoundary, struct FDelegate& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, enum class EAudioFaderCurve InFadeCurve); // Function Engine.AudioComponent.PlayQuantized // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a54080
	void Play(float StartTime); // Function Engine.AudioComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x4a53ff0
	bool IsVirtualized(); // Function Engine.AudioComponent.IsVirtualized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a53fc0
	bool IsPlaying(); // Function Engine.AudioComponent.IsPlaying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a53e70
	bool HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a53e40
	bool HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a53e10
	enum class EAudioComponentPlayState GetPlayState(); // Function Engine.AudioComponent.GetPlayState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a53de0
	bool GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a53d00
	bool GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a53be0
	bool GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a53b20
	bool GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a53a70
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeOut // (Native|Public|BlueprintCallable) // @ game+0x4a53950
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeIn // (Native|Public|BlueprintCallable) // @ game+0x4a537f0
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a53720
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x4a53610
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a53540
};

// Class Engine.SoundEffectSourcePreset
// Size: 0x68 (Inherited: 0x68)
struct USoundEffectSourcePreset : USoundEffectPreset {
};

// Class Engine.AssetManager
// Size: 0x4e8 (Inherited: 0x28)
struct UAssetManager : UObject {
	char pad_28[0x308]; // 0x28(0x308)
	struct TArray<struct UObject*> ObjectReferenceList; // 0x330(0x10)
	bool bIsGlobalAsyncScanEnvironment; // 0x340(0x01)
	bool bShouldGuessTypeAndName; // 0x341(0x01)
	bool bShouldUseSynchronousLoad; // 0x342(0x01)
	bool bIsLoadingFromPakFiles; // 0x343(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x344(0x01)
	bool bOnlyCookProductionAssets; // 0x345(0x01)
	char pad_346[0x2]; // 0x346(0x02)
	int32_t NumBulkScanRequests; // 0x348(0x04)
	bool bIsPrimaryAssetDirectoryCurrent; // 0x34c(0x01)
	bool bIsManagementDatabaseCurrent; // 0x34d(0x01)
	bool bUpdateManagementDatabaseAfterScan; // 0x34e(0x01)
	bool bIncludeOnlyOnDiskAssets; // 0x34f(0x01)
	bool bHasCompletedInitialScan; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	int32_t NumberOfSpawnedNotifications; // 0x354(0x04)
	char pad_358[0x190]; // 0x358(0x190)
};

// Class Engine.CheatManager
// Size: 0x88 (Inherited: 0x28)
struct UCheatManager : UObject {
	struct ADebugCameraController* DebugCameraControllerRef; // 0x28(0x08)
	struct ADebugCameraController* DebugCameraControllerClass; // 0x30(0x08)
	char pad_38[0x40]; // 0x38(0x40)
	struct TArray<struct UCheatManagerExtension*> CheatManagerExtensions; // 0x78(0x10)

	void Walk(); // Function Engine.CheatManager.Walk // (Exec|Native|Public|BlueprintCallable) // @ game+0x1a008d0
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf // (Exec|Native|Public) // @ game+0x4a79930
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer // (Exec|Native|Public) // @ game+0x4a79890
	void ViewClass(struct AActor* DesiredClass); // Function Engine.CheatManager.ViewClass // (Exec|Native|Public) // @ game+0x4a79800
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor // (Exec|Native|Public) // @ game+0x4a79770
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea // (Final|Exec|Native|Public) // @ game+0x4a79750
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet // (Final|Exec|Native|Public) // @ game+0x4a79730
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite // (Final|Exec|Native|Public) // @ game+0x4a79710
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera // (Exec|Native|Public) // @ game+0x4a796f0
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging // (Exec|Native|Public) // @ game+0x4a796d0
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance // (Exec|Native|Public) // @ game+0x4a796b0
	void Teleport(); // Function Engine.CheatManager.Teleport // (Exec|Native|Public|BlueprintCallable) // @ game+0xda83d0
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon // (Exec|Native|Public) // @ game+0x4a79610
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut // (Exec|Native|Public) // @ game+0x4a79580
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn // (Exec|Native|Public) // @ game+0x4a794f0
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x4a794d0
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo // (Exec|Native|Public|BlueprintCallable) // @ game+0x1a30ef0
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin // (Final|Exec|Native|Public) // @ game+0x4a794b0
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault // (Exec|Native|Public) // @ game+0x4a79490
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x4a793b0
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly // (Exec|Native|Public|BlueprintCallable) // @ game+0x4a79390
	void OnPlayerEndPlayed(struct AActor* Player, enum class EEndPlayReason EndPlayReason); // Function Engine.CheatManager.OnPlayerEndPlayed // (Final|Native|Public) // @ game+0x4a79230
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel // (Exec|Native|Public) // @ game+0x4a79300
	void LogLoc(); // Function Engine.CheatManager.LogLoc // (Exec|Native|Public) // @ game+0x4a79210
	void InvertMouse(); // Function Engine.CheatManager.InvertMouse // (Exec|Native|Public) // @ game+0xae0840
	void God(); // Function Engine.CheatManager.God // (Exec|Native|Public|BlueprintCallable) // @ game+0xacd650
	void Ghost(); // Function Engine.CheatManager.Ghost // (Exec|Native|Public|BlueprintCallable) // @ game+0xab84d0
	struct APlayerController* GetPlayerController(); // Function Engine.CheatManager.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a791b0
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame // (Exec|Native|Public|BlueprintCallable) // @ game+0x4a79120
	void Fly(); // Function Engine.CheatManager.Fly // (Exec|Native|Public|BlueprintCallable) // @ game+0x4a79100
	void FlushLog(); // Function Engine.CheatManager.FlushLog // (Exec|Native|Public) // @ game+0x4a790e0
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0xadff20
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState // (Exec|Native|Public) // @ game+0x4a790c0
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState // (Exec|Native|Public) // @ game+0x4a790a0
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState // (Exec|Native|Public) // @ game+0x4a79080
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState // (Exec|Native|Public) // @ game+0x4a79060
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x4a79040
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x4a79020
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x4a79000
	void DestroyPawns(struct APawn* aClass); // Function Engine.CheatManager.DestroyPawns // (Exec|Native|Public) // @ game+0x4a78f70
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget // (Exec|Native|Public) // @ game+0x4a78f50
	void DestroyAll(struct AActor* aClass); // Function Engine.CheatManager.DestroyAll // (Exec|Native|Public) // @ game+0x1a008f0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Function Engine.CheatManager.DebugCapsuleSweepSize // (Exec|Native|Public) // @ game+0x4a78e80
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn // (Exec|Native|Public) // @ game+0x4a78e60
	void DebugCapsuleSweepComplex(bool bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex // (Exec|Native|Public) // @ game+0x4a326b0
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear // (Exec|Native|Public) // @ game+0xfe3220
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel // (Exec|Native|Public) // @ game+0x4a78de0
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture // (Exec|Native|Public) // @ game+0x4a78dc0
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep // (Exec|Native|Public) // @ game+0x4a78da0
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x4a78d10
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript // (Final|Exec|Native|Public) // @ game+0x4a78c20
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize // (Exec|Native|Public|BlueprintCallable) // @ game+0x4122050
	void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator // (Exec|Native|Public|HasOutParms|HasDefaults) // @ game+0x4a78a50
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo // (Exec|Native|Public) // @ game+0x4a78860
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt // (Exec|Native|Public) // @ game+0x4a787c0
};

// Class Engine.CheatManagerExtension
// Size: 0x28 (Inherited: 0x28)
struct UCheatManagerExtension : UObject {

	struct APlayerController* GetPlayerController(); // Function Engine.CheatManagerExtension.GetPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a791e0
};

// Class Engine.CameraComponent
// Size: 0xa20 (Inherited: 0x2b0)
struct UCameraComponent : USceneComponent {
	float FieldOfView; // 0x2b0(0x04)
	float OrthoWidth; // 0x2b4(0x04)
	float OrthoNearClipPlane; // 0x2b8(0x04)
	float OrthoFarClipPlane; // 0x2bc(0x04)
	float AspectRatio; // 0x2c0(0x04)
	char bConstrainAspectRatio : 1; // 0x2c4(0x01)
	char bUseFieldOfViewForLOD : 1; // 0x2c4(0x01)
	char bLockToHmd : 1; // 0x2c4(0x01)
	char bUsePawnControlRotation : 1; // 0x2c4(0x01)
	char pad_2C4_4 : 4; // 0x2c4(0x01)
	enum class ECameraProjectionMode ProjectionMode; // 0x2c5(0x01)
	char pad_2C6[0x6a]; // 0x2c6(0x6a)
	float PostProcessBlendWeight; // 0x330(0x04)
	char pad_334[0x2c]; // 0x334(0x2c)
	struct FPostProcessSettings PostProcessSettings; // 0x360(0x6c0)

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68d50
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68c50
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68bd0
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68b50
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68ad0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68a50
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView // (Native|Public|BlueprintCallable) // @ game+0x402d0c0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Function Engine.CameraComponent.SetConstraintAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68820
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0xe91f30
	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.CameraComponent.RemoveBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68610
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0xacd350
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView); // Function Engine.CameraComponent.GetCameraView // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a680d0
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.CameraComponent.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x4a67f40
};

// Class Engine.DebugCameraController
// Size: 0x948 (Inherited: 0x7c8)
struct ADebugCameraController : APlayerController {
	char bShowSelectedInfo : 1; // 0x7c8(0x01)
	char bIsFrozenRendering : 1; // 0x7c8(0x01)
	char bIsOrbitingSelectedActor : 1; // 0x7c8(0x01)
	char bOrbitPivotUseCenter : 1; // 0x7c8(0x01)
	char bEnableBufferVisualization : 1; // 0x7c8(0x01)
	char bEnableBufferVisualizationFullMode : 1; // 0x7c8(0x01)
	char bIsBufferVisualizationInputSetup : 1; // 0x7c8(0x01)
	char bLastDisplayEnabled : 1; // 0x7c8(0x01)
	char pad_7C9[0x7]; // 0x7c9(0x07)
	struct UDrawFrustumComponent* DrawFrustum; // 0x7d0(0x08)
	struct AActor* SelectedActor; // 0x7d8(0x08)
	struct UPrimitiveComponent* SelectedComponent; // 0x7e0(0x08)
	struct FHitResult SelectedHitPoint; // 0x7e8(0xe8)
	struct APlayerController* OriginalControllerRef; // 0x8d0(0x08)
	struct UPlayer* OriginalPlayer; // 0x8d8(0x08)
	float SpeedScale; // 0x8e0(0x04)
	float InitialMaxSpeed; // 0x8e4(0x04)
	float InitialAccel; // 0x8e8(0x04)
	float InitialDecel; // 0x8ec(0x04)
	char pad_8F0[0x58]; // 0x8f0(0x58)

	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8c000
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo // (Exec|Native|Public) // @ game+0x4a8bfe0
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8bed0
	void ReceiveOnDeactivate(struct APlayerController* RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void ReceiveOnActorSelected(struct AActor* NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2552560
	void ReceiveOnActivate(struct APlayerController* OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate // (Event|Public|BlueprintEvent) // @ game+0x2552560
	struct AActor* GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a8b8d0
};

// Class Engine.GameEngine
// Size: 0xde0 (Inherited: 0xd90)
struct UGameEngine : UEngine {
	float MaxDeltaTime; // 0xd90(0x04)
	float ServerFlushLogInterval; // 0xd94(0x04)
	struct UGameInstance* GameInstance; // 0xd98(0x08)
	char pad_DA0[0x40]; // 0xda0(0x40)
};

// Class Engine.GameSession
// Size: 0x290 (Inherited: 0x278)
struct AGameSession : AInfo {
	int32_t MaxSpectators; // 0x278(0x04)
	int32_t MaxPlayers; // 0x27c(0x04)
	int32_t MaxPartySize; // 0x280(0x04)
	char MaxSplitscreensPerConnection; // 0x284(0x01)
	bool bRequiresPushToTalk; // 0x285(0x01)
	char pad_286[0x2]; // 0x286(0x02)
	struct FName SessionName; // 0x288(0x08)
};

// Class Engine.PlayerCameraManager
// Size: 0x32d0 (Inherited: 0x278)
struct APlayerCameraManager : AActor {
	struct APlayerController* PCOwner; // 0x278(0x08)
	struct USceneComponent* TransformComponent; // 0x280(0x08)
	char pad_288[0x8]; // 0x288(0x08)
	float DefaultFOV; // 0x290(0x04)
	char pad_294[0x4]; // 0x294(0x04)
	float DefaultOrthoWidth; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	float DefaultAspectRatio; // 0x2a0(0x04)
	char pad_2A4[0x6c]; // 0x2a4(0x6c)
	struct FCameraCacheEntry CameraCache; // 0x310(0x7b0)
	struct FCameraCacheEntry LastFrameCameraCache; // 0xac0(0x7b0)
	struct FTViewTarget ViewTarget; // 0x1270(0x7c0)
	struct FTViewTarget PendingViewTarget; // 0x1a30(0x7c0)
	char pad_21F0[0x30]; // 0x21f0(0x30)
	struct FCameraCacheEntry CameraCachePrivate; // 0x2220(0x7b0)
	struct FCameraCacheEntry LastFrameCameraCachePrivate; // 0x29d0(0x7b0)
	struct TArray<struct UCameraModifier*> ModifierList; // 0x3180(0x10)
	struct TArray<struct UCameraModifier*> DefaultModifiers; // 0x3190(0x10)
	float FreeCamDistance; // 0x31a0(0x04)
	char pad_31A4[0x4]; // 0x31a4(0x04)
	struct FVector FreeCamOffset; // 0x31a8(0x18)
	struct FVector ViewTargetOffset; // 0x31c0(0x18)
	struct FMulticastInlineDelegate OnAudioFadeChangeEvent; // 0x31d8(0x10)
	char pad_31E8[0x18]; // 0x31e8(0x18)
	struct TArray<struct TScriptInterface<ICameraLensEffectInterface>> CameraLensEffects; // 0x3200(0x10)
	struct UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x3210(0x08)
	struct UCameraAnimInst* AnimInstPool[0x8]; // 0x3218(0x40)
	struct TArray<struct FPostProcessSettings> PostProcessBlendCache; // 0x3258(0x10)
	char pad_3268[0x10]; // 0x3268(0x10)
	struct TArray<struct UCameraAnimInst*> ActiveAnims; // 0x3278(0x10)
	struct TArray<struct UCameraAnimInst*> FreeAnims; // 0x3288(0x10)
	struct ACameraActor* AnimCameraActor; // 0x3298(0x08)
	char bIsOrthographic : 1; // 0x32a0(0x01)
	char bDefaultConstrainAspectRatio : 1; // 0x32a0(0x01)
	char pad_32A0_2 : 4; // 0x32a0(0x01)
	char bClientSimulatingViewTarget : 1; // 0x32a0(0x01)
	char bUseClientSideCameraUpdates : 1; // 0x32a0(0x01)
	char pad_32A1_0 : 2; // 0x32a1(0x01)
	char bGameCameraCutThisFrame : 1; // 0x32a1(0x01)
	char pad_32A1_3 : 5; // 0x32a1(0x01)
	char pad_32A2[0x2]; // 0x32a2(0x02)
	float ViewPitchMin; // 0x32a4(0x04)
	float ViewPitchMax; // 0x32a8(0x04)
	float ViewYawMin; // 0x32ac(0x04)
	float ViewYawMax; // 0x32b0(0x04)
	float ViewRollMin; // 0x32b4(0x04)
	float ViewRollMax; // 0x32b8(0x04)
	char pad_32BC[0x4]; // 0x32bc(0x04)
	float ServerUpdateCameraTimeout; // 0x32c0(0x04)
	char pad_32C4[0xc]; // 0x32c4(0x0c)

	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates(); // Function Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates // (Final|Native|Protected) // @ game+0x4b6a280
	void StopCameraShake(struct UCameraShakeBase* ShakeInstance, bool bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake // (Native|Public|BlueprintCallable) // @ game+0x4b6a180
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade // (Native|Public|BlueprintCallable) // @ game+0x4b6a160
	void StopCameraAnimInst(struct UCameraAnimInst* AnimInst, bool bImmediate); // Function Engine.PlayerCameraManager.StopCameraAnimInst // (Native|Public|BlueprintCallable) // @ game+0x4b6a090
	void StopAllInstancesOfCameraShakeFromSource(struct UCameraShakeBase* Shake, struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource // (Native|Public|BlueprintCallable) // @ game+0x4b69f80
	void StopAllInstancesOfCameraShake(struct UCameraShakeBase* Shake, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake // (Native|Public|BlueprintCallable) // @ game+0x4b69eb0
	void StopAllInstancesOfCameraAnim(struct UCameraAnim* Anim, bool bImmediate); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim // (Native|Public|BlueprintCallable) // @ game+0x4b69de0
	void StopAllCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakesFromSource // (Native|Public|BlueprintCallable) // @ game+0x4b69d10
	void StopAllCameraShakes(bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes // (Native|Public|BlueprintCallable) // @ game+0x4b69c80
	void StopAllCameraAnims(bool bImmediate); // Function Engine.PlayerCameraManager.StopAllCameraAnims // (Native|Public|BlueprintCallable) // @ game+0x4b69bf0
	struct UCameraShakeBase* StartCameraShakeFromSource(struct UCameraShakeBase* ShakeClass, struct UCameraShakeSourceComponent* SourceComponent, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShakeFromSource // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b69a00
	struct UCameraShakeBase* StartCameraShake(struct UCameraShakeBase* ShakeClass, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.StartCameraShake // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b69860
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b69670
	void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b69540
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame // (Native|Public|BlueprintCallable) // @ game+0x4b69520
	void RemoveGenericCameraLensEffect(struct TScriptInterface<ICameraLensEffectInterface> Emitter); // Function Engine.PlayerCameraManager.RemoveGenericCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x4b69490
	bool RemoveCameraModifier(struct UCameraModifier* ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x4b693f0
	void RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase* Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect // (Native|Public) // @ game+0x4b69360
	struct UCameraAnimInst* PlayCameraAnim(struct UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraAnim // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b69040
	void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify // (BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x4b68ea0
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0xae5290
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x4b4a250
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x106d600
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x2281e40
	struct APlayerController* GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68cc0
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68a00
	struct FRotator GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b689b0
	struct FVector GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68960
	struct UCameraModifier* FindCameraModifierByClass(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass // (Native|Public|BlueprintCallable) // @ game+0x4b688c0
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects // (Native|Public|BlueprintCallable) // @ game+0x4a71970
	bool BlueprintUpdateCamera(struct AActor* CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2552560
	struct UCameraModifier* AddNewCameraModifier(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x4b68820
	struct TScriptInterface<ICameraLensEffectInterface> AddGenericCameraLensEffect(struct AActor* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddGenericCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x4b68770
	struct AEmitterCameraLensEffectBase* AddCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect // (Native|Public) // @ game+0x4b686d0
};

// Class Engine.NavigationObjectBase
// Size: 0x2a0 (Inherited: 0x278)
struct ANavigationObjectBase : AActor {
	char pad_278[0x8]; // 0x278(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x280(0x08)
	struct UBillboardComponent* GoodSprite; // 0x288(0x08)
	struct UBillboardComponent* BadSprite; // 0x290(0x08)
	char bIsPIEPlayerStart : 1; // 0x298(0x01)
	char pad_298_1 : 7; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
};

// Class Engine.PlayerStart
// Size: 0x2a8 (Inherited: 0x2a0)
struct APlayerStart : ANavigationObjectBase {
	struct FName PlayerStartTag; // 0x2a0(0x08)
};

// Class Engine.GameUserSettings
// Size: 0x128 (Inherited: 0x28)
struct UGameUserSettings : UObject {
	bool bUseVSync; // 0x28(0x01)
	bool bUseDynamicResolution; // 0x29(0x01)
	char pad_2A[0x5e]; // 0x2a(0x5e)
	uint32_t ResolutionSizeX; // 0x88(0x04)
	uint32_t ResolutionSizeY; // 0x8c(0x04)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x90(0x04)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x94(0x04)
	int32_t WindowPosX; // 0x98(0x04)
	int32_t WindowPosY; // 0x9c(0x04)
	int32_t FullscreenMode; // 0xa0(0x04)
	int32_t LastConfirmedFullscreenMode; // 0xa4(0x04)
	int32_t PreferredFullscreenMode; // 0xa8(0x04)
	uint32_t Version; // 0xac(0x04)
	int32_t AudioQualityLevel; // 0xb0(0x04)
	int32_t LastConfirmedAudioQualityLevel; // 0xb4(0x04)
	float FrameRateLimit; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	int32_t DesiredScreenWidth; // 0xc0(0x04)
	bool bUseDesiredScreenHeight; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	int32_t DesiredScreenHeight; // 0xc8(0x04)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xcc(0x04)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xd0(0x04)
	float LastRecommendedScreenWidth; // 0xd4(0x04)
	float LastRecommendedScreenHeight; // 0xd8(0x04)
	float LastCPUBenchmarkResult; // 0xdc(0x04)
	float LastGPUBenchmarkResult; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TArray<float> LastCPUBenchmarkSteps; // 0xe8(0x10)
	struct TArray<float> LastGPUBenchmarkSteps; // 0xf8(0x10)
	float LastGPUBenchmarkMultiplier; // 0x108(0x04)
	bool bUseHDRDisplayOutput; // 0x10c(0x01)
	char pad_10D[0x3]; // 0x10d(0x03)
	int32_t HDRDisplayOutputNits; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x118(0x10)

	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings // (Native|Public|BlueprintCallable) // @ game+0x1a008d0
	bool SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aaf220
	void SetVSyncEnabled(bool bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaf070
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaf190
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaf100
	void SetToDefaults(); // Function Engine.GameUserSettings.SetToDefaults // (Native|Public|BlueprintCallable) // @ game+0x3fad8e0
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaefe0
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaef50
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaeec0
	void SetScreenResolution(struct FIntPoint Resolution); // Function Engine.GameUserSettings.SetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4aaee40
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaedc0
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaed30
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaecb0
	void SetReflectionQuality(int32_t Value); // Function Engine.GameUserSettings.SetReflectionQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaec20
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaeb90
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel // (Native|Public|BlueprintCallable) // @ game+0x4aaeb00
	void SetGlobalIlluminationQuality(int32_t Value); // Function Engine.GameUserSettings.SetGlobalIlluminationQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aaea70
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae9f0
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae970
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae8e0
	void SetDynamicResolutionEnabled(bool bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae850
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae830
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae7a0
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae710
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings // (Native|Public|BlueprintCallable) // @ game+0xacd650
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark // (Native|Public|BlueprintCallable) // @ game+0x4aae610
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4aae5f0
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings // (Native|Public|BlueprintCallable) // @ game+0xacd670
	void LoadSettings(bool bForceReload); // Function Engine.GameUserSettings.LoadSettings // (Native|Public|BlueprintCallable) // @ game+0x4a6b340
	bool IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae5a0
	bool IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae570
	bool IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae540
	bool IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae510
	bool IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae4e0
	bool IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae4b0
	bool IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae480
	bool IsDirty(); // Function Engine.GameUserSettings.IsDirty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1a00860
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae3f0
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae3c0
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae390
	int32_t GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aae360
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae330
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0xea7520
	struct FIntPoint GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae2b0
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae280
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aae0e0
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadf40
	int32_t GetReflectionQuality(); // Function Engine.GameUserSettings.GetReflectionQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2277630
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x1a30130
	enum class EWindowMode GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadf10
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadee0
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadd70
	struct FIntPoint GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadd30
	enum class EWindowMode GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadd00
	int32_t GetGlobalIlluminationQuality(); // Function Engine.GameUserSettings.GetGlobalIlluminationQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x122eba0
	struct UGameUserSettings* GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aadcd0
	enum class EWindowMode GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadca0
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadc70
	int32_t GetFramePace(); // Function Engine.GameUserSettings.GetFramePace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aadc40
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadc10
	struct FIntPoint GetDesktopResolution(); // Function Engine.GameUserSettings.GetDesktopResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadbd0
	struct FIntPoint GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aadb90
	enum class EWindowMode GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aadb60
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x4aadb20
	struct FIntPoint GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aadae0
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadab0
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aada90
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20725c0
	void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x4aad9c0
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode // (Native|Public|BlueprintCallable) // @ game+0x122ec10
	void ApplySettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings // (Native|Public|BlueprintCallable) // @ game+0x4aad930
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x4aad8a0
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings // (Native|Public|BlueprintCallable) // @ game+0x3929e50
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults // (Native|Public|BlueprintCallable) // @ game+0x4a79390
};

// Class Engine.SaveGame
// Size: 0x28 (Inherited: 0x28)
struct USaveGame : UObject {
};

// Class Engine.WorldSettings
// Size: 0x488 (Inherited: 0x278)
struct AWorldSettings : AInfo {
	char pad_278[0x8]; // 0x278(0x08)
	int32_t VisibilityCellSize; // 0x280(0x04)
	enum class EVisibilityAggressiveness VisibilityAggressiveness; // 0x284(0x01)
	char bPrecomputeVisibility : 1; // 0x285(0x01)
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x285(0x01)
	char bEnableLargeWorlds : 1; // 0x285(0x01)
	char bEnableWorldBoundsChecks : 1; // 0x285(0x01)
	char bEnableNavigationSystem : 1; // 0x285(0x01)
	char bEnableAISystem : 1; // 0x285(0x01)
	char bEnableWorldComposition : 1; // 0x285(0x01)
	char bUseClientSideLevelStreamingVolumes : 1; // 0x285(0x01)
	char bEnableWorldOriginRebasing : 1; // 0x286(0x01)
	char bWorldGravitySet : 1; // 0x286(0x01)
	char bGlobalGravitySet : 1; // 0x286(0x01)
	char bMinimizeBSPSections : 1; // 0x286(0x01)
	char bForceNoPrecomputedLighting : 1; // 0x286(0x01)
	char bHighPriorityLoading : 1; // 0x286(0x01)
	char bHighPriorityLoadingLocal : 1; // 0x286(0x01)
	char bOverrideDefaultBroadphaseSettings : 1; // 0x286(0x01)
	char bGenerateSingleClusterForLevel : 1; // 0x287(0x01)
	char pad_287_1 : 7; // 0x287(0x01)
	struct TSoftClassPtr<UObject> AISystemClass; // 0x288(0x28)
	struct FVector LevelInstancePivotOffset; // 0x2b0(0x18)
	struct UNavigationSystemConfig* NavigationSystemConfig; // 0x2c8(0x08)
	struct UNavigationSystemConfig* NavigationSystemConfigOverride; // 0x2d0(0x08)
	struct UWorldPartition* WorldPartition; // 0x2d8(0x08)
	float WorldToMeters; // 0x2e0(0x04)
	float KillZ; // 0x2e4(0x04)
	struct UDamageType* KillZDamageType; // 0x2e8(0x08)
	float WorldGravityZ; // 0x2f0(0x04)
	float GlobalGravityZ; // 0x2f4(0x04)
	struct ADefaultPhysicsVolume* DefaultPhysicsVolumeClass; // 0x2f8(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x300(0x08)
	struct AGameModeBase* DefaultGameMode; // 0x308(0x08)
	struct AGameNetworkManager* GameNetworkManagerClass; // 0x310(0x08)
	int32_t PackedLightAndShadowMapTextureSize; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)
	struct FVector DefaultColorScale; // 0x320(0x18)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x338(0x04)
	float GlobalDistanceFieldViewDistance; // 0x33c(0x04)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct FReverbSettings DefaultReverbSettings; // 0x348(0x20)
	struct FInteriorSettings DefaultAmbientZoneSettings; // 0x368(0x24)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct USoundMix* DefaultBaseSoundMix; // 0x390(0x08)
	float TimeDilation; // 0x398(0x04)
	float MatineeTimeDilation; // 0x39c(0x04)
	float DemoPlayTimeDilation; // 0x3a0(0x04)
	float MinGlobalTimeDilation; // 0x3a4(0x04)
	float MaxGlobalTimeDilation; // 0x3a8(0x04)
	float MinUndilatedFrameTime; // 0x3ac(0x04)
	float MaxUndilatedFrameTime; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
	struct FBroadphaseSettings BroadphaseSettings; // 0x3b8(0x80)
	struct TArray<struct FNetViewer> ReplicationViewers; // 0x438(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x448(0x10)
	struct APlayerState* PauserPlayerState; // 0x458(0x08)
	int32_t MaxNumberOfBookmarks; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct UBookmarkBase* DefaultBookmarkClass; // 0x468(0x08)
	struct TArray<struct UBookmarkBase*> BookmarkArray; // 0x470(0x10)
	struct UBookmarkBase* LastBookmarkClass; // 0x480(0x08)

	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ // (Native|Public) // @ game+0x2281e40
};

// Class Engine.SkyLight
// Size: 0x288 (Inherited: 0x278)
struct ASkyLight : AInfo {
	struct USkyLightComponent* LightComponent; // 0x278(0x08)
	char bEnabled : 1; // 0x280(0x01)
	char pad_280_1 : 7; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)

	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled // (Native|Public) // @ game+0x2281e40
};

// Class Engine.InstancedStaticMeshComponent
// Size: 0x710 (Inherited: 0x5d0)
struct UInstancedStaticMeshComponent : UStaticMeshComponent {
	char pad_5D0[0x8]; // 0x5d0(0x08)
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x5d8(0x10)
	struct TArray<struct FMatrix> PerInstancePrevTransform; // 0x5e8(0x10)
	int32_t NumCustomDataFloats; // 0x5f8(0x04)
	char pad_5FC[0x4]; // 0x5fc(0x04)
	struct TArray<float> PerInstanceSMCustomData; // 0x600(0x10)
	int32_t InstancingRandomSeed; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct TArray<struct FInstancedStaticMeshRandomSeed> AdditionalRandomSeeds; // 0x618(0x10)
	int32_t InstanceStartCullDistance; // 0x628(0x04)
	int32_t InstanceEndCullDistance; // 0x62c(0x04)
	struct TArray<int32_t> InstanceReorderTable; // 0x630(0x10)
	char pad_640[0xb8]; // 0x640(0xb8)
	int32_t NumPendingLightmaps; // 0x6f8(0x04)
	char pad_6FC[0x4]; // 0x6fc(0x04)
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings; // 0x700(0x10)

	bool UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4abe260
	bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue // (Native|Public|BlueprintCallable) // @ game+0x4abe100
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances // (Final|Native|Public|BlueprintCallable) // @ game+0x4abe030
	bool RemoveInstances(struct TArray<int32_t>& InstancesToRemove); // Function Engine.InstancedStaticMeshComponent.RemoveInstances // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4abdf50
	bool RemoveInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.RemoveInstance // (Native|Public|BlueprintCallable) // @ game+0x4abdeb0
	bool IsValidInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.IsValidInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd9f0
	bool GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd310
	struct TArray<int32_t> GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd5e0
	struct TArray<int32_t> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd4a0
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abd2e0
	void ClearInstances(); // Function Engine.InstancedStaticMeshComponent.ClearInstances // (Native|Public|BlueprintCallable) // @ game+0x4abca40
	bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4abc840
	bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4abc5e0
	int32_t AddInstanceWorldSpace(struct FTransform& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4abc320
	struct TArray<int32_t> AddInstances(struct TArray<struct FTransform>& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.AddInstances // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4abc430
	int32_t AddInstance(struct FTransform& InstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.AddInstance // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4abc1d0
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// Size: 0x8a0 (Inherited: 0x710)
struct UHierarchicalInstancedStaticMeshComponent : UInstancedStaticMeshComponent {
	char pad_710[0x10]; // 0x710(0x10)
	char bUseTranslatedInstanceSpace : 1; // 0x720(0x01)
	char pad_720_1 : 7; // 0x720(0x01)
	char pad_721[0x7]; // 0x721(0x07)
	struct FVector TranslatedInstanceSpaceOrigin; // 0x728(0x18)
	struct TArray<int32_t> SortedInstances; // 0x740(0x10)
	int32_t NumBuiltInstances; // 0x750(0x04)
	char pad_754[0x4]; // 0x754(0x04)
	struct FBox BuiltInstanceBounds; // 0x758(0x38)
	struct FBox UnbuiltInstanceBounds; // 0x790(0x38)
	struct TArray<struct FBox> UnbuiltInstanceBoundsList; // 0x7c8(0x10)
	char bEnableDensityScaling : 1; // 0x7d8(0x01)
	char pad_7D8_1 : 7; // 0x7d8(0x01)
	char pad_7D9[0x7]; // 0x7d9(0x07)
	int32_t OcclusionLayerNumNodes; // 0x7e0(0x04)
	char pad_7E4[0x4]; // 0x7e4(0x04)
	struct FBoxSphereBounds CacheMeshExtendedBounds; // 0x7e8(0x38)
	bool bDisableCollision; // 0x820(0x01)
	char pad_821[0x3]; // 0x821(0x03)
	int32_t InstanceCountToRender; // 0x824(0x04)
	char pad_828[0x78]; // 0x828(0x78)
};

// Class Engine.PartitionActor
// Size: 0x278 (Inherited: 0x278)
struct APartitionActor : AActor {
};

// Class Engine.ISMPartitionActor
// Size: 0x288 (Inherited: 0x278)
struct AISMPartitionActor : APartitionActor {
	char pad_278[0x10]; // 0x278(0x10)
};

// Class Engine.StaticMeshActor
// Size: 0x288 (Inherited: 0x278)
struct AStaticMeshActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x278(0x08)
	bool bStaticMeshReplicateMovement; // 0x280(0x01)
	enum class ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x281(0x01)
	char pad_282[0x6]; // 0x282(0x06)

	void SetMobility(enum class EComponentMobility InMobility); // Function Engine.StaticMeshActor.SetMobility // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe570
};

// Class Engine.HLODBuilder
// Size: 0x28 (Inherited: 0x28)
struct UHLODBuilder : UObject {
};

// Class Engine.MaterialInterface
// Size: 0x98 (Inherited: 0x28)
struct UMaterialInterface : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)
	struct FLightmassMaterialInterfaceSettings LightmassSettings; // 0x50(0x10)
	struct TArray<struct FMaterialTextureInfo> TextureStreamingData; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)
	char pad_80[0x18]; // 0x80(0x18)

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident // (RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4b459c0
	struct UPhysicalMaterialMask* GetPhysicalMaterialMask(); // Function Engine.MaterialInterface.GetPhysicalMaterialMask // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b452d0
	struct UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index); // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b45230
	struct UPhysicalMaterial* GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b45200
	struct FMaterialParameterInfo GetParameterInfo(enum class EMaterialParameterAssociation Association, struct FName ParameterName, struct UMaterialFunctionInterface* LayerFunction); // Function Engine.MaterialInterface.GetParameterInfo // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b450e0
	struct UMaterial* GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4b450b0
};

// Class Engine.MaterialInstance
// Size: 0x1f8 (Inherited: 0x98)
struct UMaterialInstance : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0x98(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0xa0(0x40)
	struct UMaterialInterface* Parent; // 0xe0(0x08)
	char bHasStaticPermutationResource : 1; // 0xe8(0x01)
	char bOverrideSubsurfaceProfile : 1; // 0xe8(0x01)
	char pad_E8_2 : 6; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0xf0(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x100(0x10)
	struct TArray<struct FDoubleVectorParameterValue> DoubleVectorParameterValues; // 0x110(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x120(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x130(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x140(0x10)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x150(0x08)
	char pad_158[0x10]; // 0x158(0x10)
	struct FStaticParameterSet StaticParameters; // 0x168(0x58)
	char pad_1C0[0x38]; // 0x1c0(0x38)
};

// Class Engine.MaterialInstanceConstant
// Size: 0x200 (Inherited: 0x1f8)
struct UMaterialInstanceConstant : UMaterialInstance {
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0x1f8(0x08)

	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b45670
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b45520
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b453d0
};

// Class Engine.MaterialExpressionCustomOutput
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCustomOutput : UMaterialExpression {
};

// Class Engine.CameraActor
// Size: 0x970 (Inherited: 0x278)
struct ACameraActor : AActor {
	enum class EAutoReceiveInput AutoActivateForPlayer; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct UCameraComponent* CameraComponent; // 0x280(0x08)
	struct USceneComponent* SceneComponent; // 0x288(0x08)
	char pad_290[0x8]; // 0x290(0x08)
	char bConstrainAspectRatio : 1; // 0x298(0x01)
	char pad_298_1 : 7; // 0x298(0x01)
	char pad_299[0x3]; // 0x299(0x03)
	float AspectRatio; // 0x29c(0x04)
	float FOVAngle; // 0x2a0(0x04)
	float PostProcessBlendWeight; // 0x2a4(0x04)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct FPostProcessSettings PostProcessSettings; // 0x2b0(0x6c0)

	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a680a0
};

// Class Engine.Model
// Size: 0x270 (Inherited: 0x28)
struct UModel : UObject {
	char pad_28[0x248]; // 0x28(0x248)
};

// Class Engine.ActiveSoundUpdateInterface
// Size: 0x28 (Inherited: 0x28)
struct UActiveSoundUpdateInterface : UInterface {
};

// Class Engine.Channel
// Size: 0x68 (Inherited: 0x28)
struct UChannel : UObject {
	struct UNetConnection* Connection; // 0x28(0x08)
	char pad_30[0x38]; // 0x30(0x38)
};

// Class Engine.ActorChannel
// Size: 0x290 (Inherited: 0x68)
struct UActorChannel : UChannel {
	struct AActor* Actor; // 0x68(0x08)
	char pad_70[0xe8]; // 0x70(0xe8)
	struct TArray<struct UObject*> CreateSubObjects; // 0x158(0x10)
	char pad_168[0x128]; // 0x168(0x128)
};

// Class Engine.ActorDescContainer
// Size: 0x30 (Inherited: 0x28)
struct UActorDescContainer : UObject {
	struct UWorld* World; // 0x28(0x08)
};

// Class Engine.ActorElementAssetDataInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementAssetDataInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementCounterInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementCounterInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementHierarchyInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementHierarchyInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementObjectInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementObjectInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorElementWorldInterface
// Size: 0x30 (Inherited: 0x28)
struct UActorElementWorldInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.Level
// Size: 0x2f0 (Inherited: 0x28)
struct ULevel : UObject {
	char pad_28[0x90]; // 0x28(0x90)
	struct UWorld* OwningWorld; // 0xb8(0x08)
	struct UModel* Model; // 0xc0(0x08)
	struct TArray<struct UModelComponent*> ModelComponents; // 0xc8(0x10)
	struct ULevelActorContainer* ActorCluster; // 0xd8(0x08)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xe0(0x04)
	int32_t NumTextureStreamingDirtyResources; // 0xe4(0x04)
	struct ALevelScriptActor* LevelScriptActor; // 0xe8(0x08)
	struct ANavigationObjectBase* NavListStart; // 0xf0(0x08)
	struct ANavigationObjectBase* NavListEnd; // 0xf8(0x08)
	struct TArray<struct UNavigationDataChunk*> NavDataChunks; // 0x100(0x10)
	float LightmapTotalSize; // 0x110(0x04)
	float ShadowmapTotalSize; // 0x114(0x04)
	struct TArray<struct FVector> StaticNavigableGeometry; // 0x118(0x10)
	struct TArray<struct FGuid> StreamingTextureGuids; // 0x128(0x10)
	struct TArray<struct FName> StreamingTextures; // 0x138(0x10)
	uint32_t PackedTextureStreamingQualityLevelFeatureLevel; // 0x148(0x04)
	char pad_14C[0xc4]; // 0x14c(0xc4)
	struct FGuid LevelBuildDataId; // 0x210(0x10)
	struct UMapBuildDataRegistry* MapBuildData; // 0x220(0x08)
	struct FIntVector LightBuildLevelOffset; // 0x228(0x0c)
	char bIsLightingScenario : 1; // 0x234(0x01)
	char pad_234_1 : 2; // 0x234(0x01)
	char bTextureStreamingRotationChanged : 1; // 0x234(0x01)
	char bStaticComponentsRegisteredInStreamingManager : 1; // 0x234(0x01)
	char bIsVisible : 1; // 0x234(0x01)
	char pad_234_6 : 2; // 0x234(0x01)
	char pad_235[0x1]; // 0x235(0x01)
	char pad_236_0 : 6; // 0x236(0x01)
	char bIsPartitioned : 1; // 0x236(0x01)
	char bIsWorldPartitionRuntimeCell : 1; // 0x236(0x01)
	char pad_237[0x69]; // 0x237(0x69)
	struct AWorldSettings* WorldSettings; // 0x2a0(0x08)
	struct AWorldDataLayers* WorldDataLayers; // 0x2a8(0x08)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x2b8(0x10)
	char pad_2C8[0x10]; // 0x2c8(0x10)
	struct TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors; // 0x2d8(0x10)
	char pad_2E8[0x8]; // 0x2e8(0x08)
};

// Class Engine.ActorFolder
// Size: 0x28 (Inherited: 0x28)
struct UActorFolder : UObject {
};

// Class Engine.ActorPartitionSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UActorPartitionSubsystem : UWorldSubsystem {
};

// Class Engine.ActorSoundParameterInterface
// Size: 0x28 (Inherited: 0x28)
struct UActorSoundParameterInterface : UInterface {

	void GetActorSoundParams(struct TArray<struct FAudioParameter>& Params); // Function Engine.ActorSoundParameterInterface.GetActorSoundParams // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2552560
};

// Class Engine.ActorTextureStreamingBuildDataComponent
// Size: 0xb0 (Inherited: 0xb0)
struct UActorTextureStreamingBuildDataComponent : UActorComponent {
};

// Class Engine.AnimationAsset
// Size: 0x80 (Inherited: 0x28)
struct UAnimationAsset : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct USkeleton* Skeleton; // 0x38(0x08)
	char pad_40[0x20]; // 0x40(0x20)
	struct TArray<struct UAnimMetaData*> MetaData; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)

	float GetPlayLength(); // Function Engine.AnimationAsset.GetPlayLength // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1a309b0
};

// Class Engine.BlendSpace
// Size: 0x1a0 (Inherited: 0x80)
struct UBlendSpace : UAnimationAsset {
	char pad_80[0x8]; // 0x80(0x08)
	bool bRotationBlendInMeshSpace; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	struct FInterpolationParameter InterpolationParam[0x3]; // 0x8c(0x30)
	float TargetWeightInterpolationSpeedPerSec; // 0xbc(0x04)
	bool bTargetWeightInterpolationEaseInOut; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	float AnimLength; // 0xc4(0x04)
	enum class ENotifyTriggerMode NotifyTriggerMode; // 0xc8(0x01)
	bool bInterpolateUsingGrid; // 0xc9(0x01)
	enum class EPreferredTriangulationDirection PreferredTriangulationDirection; // 0xca(0x01)
	char pad_CB[0x5]; // 0xcb(0x05)
	struct TArray<struct FPerBoneInterpolation> PerBoneBlend; // 0xd0(0x10)
	int32_t SampleIndexWithMarkers; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TArray<struct FBlendSample> SampleData; // 0xe8(0x10)
	struct TArray<struct FEditorElement> GridSamples; // 0xf8(0x10)
	struct FBlendSpaceData BlendSpaceData; // 0x108(0x20)
	struct FBlendParameter BlendParameters[0x3]; // 0x128(0x60)
	enum class EBlendSpaceAxis AxisToScaleAnimation; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
	struct TArray<int32_t> DimensionIndices; // 0x190(0x10)
};

// Class Engine.AimOffsetBlendSpace
// Size: 0x1a0 (Inherited: 0x1a0)
struct UAimOffsetBlendSpace : UBlendSpace {
};

// Class Engine.BlendSpace1D
// Size: 0x1a8 (Inherited: 0x1a0)
struct UBlendSpace1D : UBlendSpace {
	bool bScaleAnimation; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)
};

// Class Engine.AimOffsetBlendSpace1D
// Size: 0x1a8 (Inherited: 0x1a8)
struct UAimOffsetBlendSpace1D : UBlendSpace1D {
};

// Class Engine.AISystemBase
// Size: 0x58 (Inherited: 0x28)
struct UAISystemBase : UObject {
	struct FSoftClassPath AISystemClassName; // 0x28(0x18)
	struct FName AISystemModuleName; // 0x40(0x08)
	char pad_48[0x8]; // 0x48(0x08)
	bool bInstantiateAISystemOnClient; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.AmbientSound
// Size: 0x280 (Inherited: 0x278)
struct AAmbientSound : AActor {
	struct UAudioComponent* AudioComponent; // 0x278(0x08)

	void Stop(); // Function Engine.AmbientSound.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x4a329e0
	void Play(float StartTime); // Function Engine.AmbientSound.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x4a32440
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x4a32200
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x4a32130
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x4a31fc0
};

// Class Engine.AnimationAssetExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationAssetExtensions : UBlueprintFunctionLibrary {
};

// Class Engine.AnimationSettings
// Size: 0x128 (Inherited: 0x38)
struct UAnimationSettings : UDeveloperSettings {
	int32_t CompressCommandletVersion; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FString> KeyEndEffectorsMatchNameArray; // 0x40(0x10)
	bool ForceRecompression; // 0x50(0x01)
	bool bForceBelowThreshold; // 0x51(0x01)
	bool bFirstRecompressUsingCurrentOrDefault; // 0x52(0x01)
	bool bRaiseMaxErrorToExisting; // 0x53(0x01)
	bool bEnablePerformanceLog; // 0x54(0x01)
	bool bStripAnimationDataOnDedicatedServer; // 0x55(0x01)
	bool bTickAnimationOnSkeletalMeshInit; // 0x56(0x01)
	char pad_57[0x1]; // 0x57(0x01)
	struct FTimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings; // 0x58(0x38)
	struct TArray<struct FCustomAttributeSetting> BoneCustomAttributesNames; // 0x90(0x10)
	struct TArray<struct FString> BoneNamesWithCustomAttributes; // 0xa0(0x10)
	struct TMap<struct FName, enum class ECustomAttributeBlendType> AttributeBlendModes; // 0xb0(0x50)
	enum class ECustomAttributeBlendType DefaultAttributeBlendMode; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct TArray<struct FString> TransformAttributeNames; // 0x108(0x10)
	struct TArray<struct FMirrorFindReplaceExpression> MirrorFindReplaceExpressions; // 0x118(0x10)

	struct TArray<struct FString> GetBoneCustomAttributeNamesToImport(); // Function Engine.AnimationSettings.GetBoneCustomAttributeNamesToImport // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a35c30
};

// Class Engine.AnimBlueprint
// Size: 0xc8 (Inherited: 0xa0)
struct UAnimBlueprint : UBlueprint {
	char pad_A0[0x8]; // 0xa0(0x08)
	struct USkeleton* TargetSkeleton; // 0xa8(0x08)
	struct TArray<struct FAnimGroupInfo> Groups; // 0xb0(0x10)
	bool bIsTemplate; // 0xc0(0x01)
	bool bUseMultiThreadedAnimationUpdate; // 0xc1(0x01)
	bool bWarnAboutBlueprintUsage; // 0xc2(0x01)
	char pad_C3[0x5]; // 0xc3(0x05)
};

// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
// Size: 0x28 (Inherited: 0x28)
struct UAnimBlueprintClassSubsystem_PropertyAccess : UObject {
};

// Class Engine.AnimBlueprintGeneratedStruct
// Size: 0xc0 (Inherited: 0xc0)
struct UAnimBlueprintGeneratedStruct : UScriptStruct {
};

// Class Engine.AnimBlueprintGeneratedClass
// Size: 0x590 (Inherited: 0x328)
struct UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass {
	char pad_328[0x8]; // 0x328(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x330(0x10)
	struct USkeleton* TargetSkeleton; // 0x340(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x348(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x358(0x50)
	char pad_3A8[0x80]; // 0x3a8(0x80)
	struct TArray<struct FName> SyncGroupNames; // 0x428(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x438(0x50)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x488(0x50)
	struct TArray<struct FAnimNodeData> AnimNodeData; // 0x4d8(0x10)
	struct TMap<struct UScriptStruct*, struct FAnimNodeStructData> NodeTypeMap; // 0x4e8(0x50)
	char pad_538[0x58]; // 0x538(0x58)
};

// Class Engine.AnimBoneCompressionCodec
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionCodec : UObject {
	struct FString Description; // 0x28(0x10)
};

// Class Engine.AnimBoneCompressionSettings
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionSettings : UObject {
	struct TArray<struct UAnimBoneCompressionCodec*> Codecs; // 0x28(0x10)
};

// Class Engine.AnimClassData
// Size: 0x258 (Inherited: 0x28)
struct UAnimClassData : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x30(0x10)
	struct USkeleton* TargetSkeleton; // 0x40(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x48(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x58(0x50)
	struct TArray<struct FAnimBlueprintFunction> AnimBlueprintFunctions; // 0xa8(0x10)
	struct TArray<struct FAnimBlueprintFunctionData> AnimBlueprintFunctionData; // 0xb8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> AnimNodeProperties; // 0xc8(0x10)
	char pad_D8[0x10]; // 0xd8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimGraphNodeProperties; // 0xe8(0x10)
	char pad_F8[0x10]; // 0xf8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimLayerNodeProperties; // 0x108(0x10)
	char pad_118[0x10]; // 0x118(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> PreUpdateNodeProperties; // 0x128(0x10)
	char pad_138[0x10]; // 0x138(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> DynamicResetNodeProperties; // 0x148(0x10)
	char pad_158[0x10]; // 0x158(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> StateMachineNodeProperties; // 0x168(0x10)
	char pad_178[0x10]; // 0x178(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> InitializationNodeProperties; // 0x188(0x10)
	char pad_198[0x10]; // 0x198(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers; // 0x1a8(0x50)
	struct TArray<struct FName> SyncGroupNames; // 0x1f8(0x10)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x208(0x50)
};

// Class Engine.AnimClassInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimClassInterface : UInterface {
};

// Class Engine.AnimSequenceBase
// Size: 0xa8 (Inherited: 0x80)
struct UAnimSequenceBase : UAnimationAsset {
	struct TArray<struct FAnimNotifyEvent> Notifies; // 0x80(0x10)
	float SequenceLength; // 0x90(0x04)
	float RateScale; // 0x94(0x04)
	struct FRawCurveTracks RawCurveData; // 0x98(0x10)
};

// Class Engine.AnimCompositeBase
// Size: 0xa8 (Inherited: 0xa8)
struct UAnimCompositeBase : UAnimSequenceBase {
};

// Class Engine.AnimComposite
// Size: 0xb8 (Inherited: 0xa8)
struct UAnimComposite : UAnimCompositeBase {
	struct FAnimTrack AnimationTrack; // 0xa8(0x10)
};

// Class Engine.AnimCompress
// Size: 0x40 (Inherited: 0x38)
struct UAnimCompress : UAnimBoneCompressionCodec {
	char bNeedsSkeleton : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	enum class AnimationCompressionFormat TranslationCompressionFormat; // 0x3c(0x01)
	enum class AnimationCompressionFormat RotationCompressionFormat; // 0x3d(0x01)
	enum class AnimationCompressionFormat ScaleCompressionFormat; // 0x3e(0x01)
	char pad_3F[0x1]; // 0x3f(0x01)
};

// Class Engine.AnimCompress_BitwiseCompressOnly
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_BitwiseCompressOnly : UAnimCompress {
};

// Class Engine.AnimCompress_LeastDestructive
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_LeastDestructive : UAnimCompress_BitwiseCompressOnly {
};

// Class Engine.AnimCompress_RemoveLinearKeys
// Size: 0x60 (Inherited: 0x40)
struct UAnimCompress_RemoveLinearKeys : UAnimCompress {
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	float MaxEffectorDiff; // 0x4c(0x04)
	float MinEffectorDiff; // 0x50(0x04)
	float EffectorDiffSocket; // 0x54(0x04)
	float ParentKeyScale; // 0x58(0x04)
	char bRetarget : 1; // 0x5c(0x01)
	char bActuallyFilterLinearKeys : 1; // 0x5c(0x01)
	char pad_5C_2 : 6; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
};

// Class Engine.AnimCompress_PerTrackCompression
// Size: 0xd8 (Inherited: 0x60)
struct UAnimCompress_PerTrackCompression : UAnimCompress_RemoveLinearKeys {
	float MaxZeroingThreshold; // 0x60(0x04)
	float MaxPosDiffBitwise; // 0x64(0x04)
	float MaxAngleDiffBitwise; // 0x68(0x04)
	float MaxScaleDiffBitwise; // 0x6c(0x04)
	struct TArray<enum class AnimationCompressionFormat> AllowedRotationFormats; // 0x70(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedTranslationFormats; // 0x80(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedScaleFormats; // 0x90(0x10)
	char bResampleAnimation : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	float ResampledFramerate; // 0xa4(0x04)
	int32_t MinKeysForResampling; // 0xa8(0x04)
	char bUseAdaptiveError : 1; // 0xac(0x01)
	char bUseOverrideForEndEffectors : 1; // 0xac(0x01)
	char pad_AC_2 : 6; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	int32_t TrackHeightBias; // 0xb0(0x04)
	float ParentingDivisor; // 0xb4(0x04)
	float ParentingDivisorExponent; // 0xb8(0x04)
	char bUseAdaptiveError2 : 1; // 0xbc(0x01)
	char pad_BC_1 : 7; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	float RotationErrorSourceRatio; // 0xc0(0x04)
	float TranslationErrorSourceRatio; // 0xc4(0x04)
	float ScaleErrorSourceRatio; // 0xc8(0x04)
	float MaxErrorPerTrackRatio; // 0xcc(0x04)
	float PerturbationProbeSize; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
};

// Class Engine.AnimCompress_RemoveEverySecondKey
// Size: 0x48 (Inherited: 0x40)
struct UAnimCompress_RemoveEverySecondKey : UAnimCompress {
	int32_t MinKeys; // 0x40(0x04)
	char bStartAtSecondKey : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class Engine.AnimCompress_RemoveTrivialKeys
// Size: 0x50 (Inherited: 0x40)
struct UAnimCompress_RemoveTrivialKeys : UAnimCompress {
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.AnimCurveCompressionCodec
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec : UObject {
};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_CompressedRichCurve : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformIndexable : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformlySampled : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionSettings
// Size: 0x30 (Inherited: 0x28)
struct UAnimCurveCompressionSettings : UObject {
	struct UAnimCurveCompressionCodec* Codec; // 0x28(0x08)
};

// Class Engine.AnimDataModel
// Size: 0xf8 (Inherited: 0x28)
struct UAnimDataModel : UObject {
	int32_t BracketCounter; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct FMulticastInlineDelegate ModifiedEventDynamic; // 0x30(0x10)
	char pad_40[0x18]; // 0x40(0x18)
	struct TArray<struct FBoneAnimationTrack> BoneAnimationTracks; // 0x58(0x10)
	float PlayLength; // 0x68(0x04)
	struct FFrameRate FrameRate; // 0x6c(0x08)
	int32_t NumberOfFrames; // 0x74(0x04)
	int32_t NumberOfKeys; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FAnimationCurveData CurveData; // 0x80(0x20)
	struct TArray<struct FAnimatedBoneAttribute> AnimatedBoneAttributes; // 0xa0(0x10)
	struct TArray<struct FRawAnimSequenceTrack> RawAnimationTracks; // 0xb0(0x10)
	struct TArray<struct FName> RawAnimationTrackNames; // 0xc0(0x10)
	struct TArray<struct FTrackToSkeletonMap> RawAnimationTrackSkeletonMappings; // 0xd0(0x10)
	char pad_E0[0x8]; // 0xe0(0x08)
	struct FRawCurveTracks RawCurveTracks; // 0xe8(0x10)

	bool IsValidBoneTrackIndex(int32_t TrackIndex); // Function Engine.AnimDataModel.IsValidBoneTrackIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3d4a0
	float GetPlayLength(); // Function Engine.AnimDataModel.GetPlayLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3cad0
	int32_t GetNumBoneTracks(); // Function Engine.AnimDataModel.GetNumBoneTracks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c980
	int32_t GetNumberOfTransformCurves(); // Function Engine.AnimDataModel.GetNumberOfTransformCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3ca40
	int32_t GetNumberOfKeys(); // Function Engine.AnimDataModel.GetNumberOfKeys // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3ca10
	int32_t GetNumberOfFrames(); // Function Engine.AnimDataModel.GetNumberOfFrames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c9e0
	int32_t GetNumberOfFloatCurves(); // Function Engine.AnimDataModel.GetNumberOfFloatCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3c9b0
	struct FFrameRate GetFrameRate(); // Function Engine.AnimDataModel.GetFrameRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3bd20
	void GetBoneTrackNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimDataModel.GetBoneTrackNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3bae0
	int32_t GetBoneTrackIndexByName(struct FName TrackName); // Function Engine.AnimDataModel.GetBoneTrackIndexByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3ba40
	int32_t GetBoneTrackIndex(struct FBoneAnimationTrack& Track); // Function Engine.AnimDataModel.GetBoneTrackIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b950
	struct FBoneAnimationTrack GetBoneTrackByName(struct FName TrackName); // Function Engine.AnimDataModel.GetBoneTrackByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b8b0
	struct FBoneAnimationTrack GetBoneTrackByIndex(int32_t TrackIndex); // Function Engine.AnimDataModel.GetBoneTrackByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b810
	struct TArray<struct FBoneAnimationTrack> GetBoneAnimationTracks(); // Function Engine.AnimDataModel.GetBoneAnimationTracks // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b760
	struct UAnimSequence* GetAnimationSequence(); // Function Engine.AnimDataModel.GetAnimationSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a3b730
};

// Class Engine.AnimationDataModelNotifiesExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationDataModelNotifiesExtensions : UBlueprintFunctionLibrary {
};

// Class Engine.AnimLayerInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimLayerInterface : UInterface {
};

// Class Engine.AnimMetaData
// Size: 0x28 (Inherited: 0x28)
struct UAnimMetaData : UObject {
};

// Class Engine.AnimMontage
// Size: 0x1f0 (Inherited: 0xa8)
struct UAnimMontage : UAnimCompositeBase {
	enum class EMontageBlendMode BlendModeIn; // 0xa8(0x01)
	enum class EMontageBlendMode BlendModeOut; // 0xa9(0x01)
	char pad_AA[0x6]; // 0xaa(0x06)
	struct FAlphaBlend BlendIn; // 0xb0(0x30)
	float BlendInTime; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct FAlphaBlend BlendOut; // 0xe8(0x30)
	float BlendOutTime; // 0x118(0x04)
	float BlendOutTriggerTime; // 0x11c(0x04)
	struct FName SyncGroup; // 0x120(0x08)
	int32_t SyncSlotIndex; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FMarkerSyncData MarkerData; // 0x130(0x20)
	struct TArray<struct FCompositeSection> CompositeSections; // 0x150(0x10)
	struct TArray<struct FSlotAnimationTrack> SlotAnimTracks; // 0x160(0x10)
	struct TArray<struct FBranchingPoint> BranchingPoints; // 0x170(0x10)
	bool bEnableRootMotionTranslation; // 0x180(0x01)
	bool bEnableRootMotionRotation; // 0x181(0x01)
	bool bEnableAutoBlendOut; // 0x182(0x01)
	char pad_183[0x5]; // 0x183(0x05)
	struct UBlendProfile* BlendProfileIn; // 0x188(0x08)
	struct UBlendProfile* BlendProfileOut; // 0x190(0x08)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x198(0x01)
	char pad_199[0x7]; // 0x199(0x07)
	struct TArray<struct FBranchingPointMarker> BranchingPointMarkers; // 0x1a0(0x10)
	struct TArray<int32_t> BranchingPointStateNotifyIndices; // 0x1b0(0x10)
	struct FTimeStretchCurve TimeStretchCurve; // 0x1c0(0x28)
	struct FName TimeStretchCurveName; // 0x1e8(0x08)

	bool IsValidSectionName(struct FName InSectionName); // Function Engine.AnimMontage.IsValidSectionName // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a44710
	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ec0900
	float GetDefaultBlendInTime(); // Function Engine.AnimMontage.GetDefaultBlendInTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a446f0
	struct FAlphaBlendArgs GetBlendOutArgs(); // Function Engine.AnimMontage.GetBlendOutArgs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a446b0
	struct FAlphaBlendArgs GetBlendInArgs(); // Function Engine.AnimMontage.GetBlendInArgs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a44670
	struct UAnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, struct FMontageBlendSettings& BlendInSettings, struct FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float InBlendOutTriggerTime); // Function Engine.AnimMontage.CreateSlotAnimationAsDynamicMontage_WithBlendSettings // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a44420
};

// Class Engine.AnimNotifyMirrorInspectionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAnimNotifyMirrorInspectionLibrary : UBlueprintFunctionLibrary {

	bool IsTriggeredByMirroredAnimation(struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyMirrorInspectionLibrary.IsTriggeredByMirroredAnimation // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a48bc0
	struct UMirrorDataTable* GetMirrorDataTable(struct FAnimNotifyEventReference& EventReference); // Function Engine.AnimNotifyMirrorInspectionLibrary.GetMirrorDataTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a48a60
};

// Class Engine.AnimNotifyStateMachineInspectionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UAnimNotifyStateMachineInspectionLibrary : UBlueprintFunctionLibrary {

	bool IsTriggeredByStateMachine(struct FAnimNotifyEventReference& EventReference, struct UAnimInstance* AnimInstance, struct FName StateMachineName); // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateMachine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a48fd0
	bool IsTriggeredByStateInStateMachine(struct FAnimNotifyEventReference& EventReference, struct UAnimInstance* AnimInstance, struct FName StateMachineName, struct FName StateName); // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateInStateMachine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a48e10
	bool IsTriggeredByState(struct FAnimNotifyEventReference& EventReference, struct UAnimInstance* AnimInstance, struct FName StateName); // Function Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a48ca0
};

// Class Engine.AnimNotifyState_DisableRootMotion
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_DisableRootMotion : UAnimNotifyState {
};

// Class Engine.AnimNotifyState_TimedParticleEffect
// Size: 0x78 (Inherited: 0x30)
struct UAnimNotifyState_TimedParticleEffect : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x18)
	struct FRotator RotationOffset; // 0x58(0x18)
	bool bDestroyAtEnd; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.AnimNotifyState_Trail
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_Trail : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x30(0x08)
	struct FName FirstSocketName; // 0x38(0x08)
	struct FName SecondSocketName; // 0x40(0x08)
	enum class ETrailWidthMode WidthScaleMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FName WidthScaleCurve; // 0x4c(0x08)
	char bRecycleSpawnedSystems : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)

	struct UParticleSystem* OverridePSTemplate(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate // (Event|Public|BlueprintEvent|Const) // @ game+0x2552560
};

// Class Engine.AnimNotify_PauseClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_PauseClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_PlayParticleEffect
// Size: 0xc0 (Inherited: 0x38)
struct UAnimNotify_PlayParticleEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x18)
	struct FRotator RotationOffset; // 0x58(0x18)
	struct FVector Scale; // 0x70(0x18)
	char pad_88[0x28]; // 0x88(0x28)
	char Attached : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	struct FName SocketName; // 0xb4(0x08)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Engine.AnimNotify_PlaySound
// Size: 0x58 (Inherited: 0x38)
struct UAnimNotify_PlaySound : UAnimNotify {
	struct USoundBase* Sound; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
	char bFollow : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FName AttachName; // 0x4c(0x08)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.AnimNotify_ResetClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_ResetDynamics
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetDynamics : UAnimNotify {
};

// Class Engine.AnimNotify_ResumeClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResumeClothingSimulation : UAnimNotify {
};

// Class Engine.AnimSequence
// Size: 0x1d0 (Inherited: 0xa8)
struct UAnimSequence : UAnimSequenceBase {
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xa8(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xb0(0x08)
	char pad_B8[0x70]; // 0xb8(0x70)
	enum class EAdditiveAnimationType AdditiveAnimType; // 0x128(0x01)
	enum class EAdditiveBasePoseType RefPoseType; // 0x129(0x01)
	char pad_12A[0x2]; // 0x12a(0x02)
	int32_t RefFrameIndex; // 0x12c(0x04)
	struct UAnimSequence* RefPoseSeq; // 0x130(0x08)
	struct FName RetargetSource; // 0x138(0x08)
	struct TArray<struct FTransform> RetargetSourceAssetReferencePose; // 0x140(0x10)
	enum class EAnimInterpolationType Interpolation; // 0x150(0x01)
	bool bEnableRootMotion; // 0x151(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x152(0x01)
	bool bForceRootLock; // 0x153(0x01)
	bool bUseNormalizedRootMotionScale; // 0x154(0x01)
	bool bRootMotionSettingsCopiedFromMontage; // 0x155(0x01)
	char pad_156[0x2]; // 0x156(0x02)
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x158(0x10)
	char pad_168[0x10]; // 0x168(0x10)
	struct FFrameRate TargetFrameRate; // 0x178(0x08)
	struct TMap<struct FAnimationAttributeIdentifier, struct FAttributeCurve> AttributeCurves; // 0x180(0x50)
};

// Class Engine.AnimSet
// Size: 0xf0 (Inherited: 0x28)
struct UAnimSet : UObject {
	char bAnimRotationOnly : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct TArray<struct FName> TrackBoneNames; // 0x30(0x10)
	struct TArray<struct FAnimSetMeshLinkup> LinkupCache; // 0x40(0x10)
	struct TArray<char> BoneUseAnimTranslation; // 0x50(0x10)
	struct TArray<char> ForceUseMeshTranslation; // 0x60(0x10)
	struct TArray<struct FName> UseTranslationBoneNames; // 0x70(0x10)
	struct TArray<struct FName> ForceMeshTranslationBoneNames; // 0x80(0x10)
	struct FName PreviewSkelMeshName; // 0x90(0x08)
	struct FName BestRatioSkelMeshName; // 0x98(0x08)
	char pad_A0[0x50]; // 0xa0(0x50)
};

// Class Engine.AnimSingleNodeInstance
// Size: 0x360 (Inherited: 0x350)
struct UAnimSingleNodeInstance : UAnimInstance {
	struct UAnimationAsset* CurrentAsset; // 0x348(0x08)
	struct FDelegate PostEvaluateAnimEvent; // 0x350(0x10)

	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4e470
	void SetReverse(bool bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4e3e0
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a4e2c0
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4e1a0
	void SetPosition(float InPosition, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4e0c0
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4dfb0
	void SetPlaying(bool bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4e030
	void SetMirrorDataTable(struct UMirrorDataTable* MirrorDataTable); // Function Engine.AnimSingleNodeInstance.SetMirrorDataTable // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4df20
	void SetLooping(bool bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4de90
	void SetBlendSpacePosition(struct FVector& InPosition); // Function Engine.AnimSingleNodeInstance.SetBlendSpacePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a4de00
	void SetAnimationAsset(struct UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset // (Native|Public|BlueprintCallable) // @ game+0x4a4dce0
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4dbd0
	struct UMirrorDataTable* GetMirrorDataTable(); // Function Engine.AnimSingleNodeInstance.GetMirrorDataTable // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4d530
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength // (Final|Native|Public|BlueprintCallable) // @ game+0x4a4d500
	struct UAnimationAsset* GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a4d4d0
};

// Class Engine.AnimStateMachineTypes
// Size: 0x28 (Inherited: 0x28)
struct UAnimStateMachineTypes : UObject {
};

// Class Engine.AnimStreamable
// Size: 0xe0 (Inherited: 0xa8)
struct UAnimStreamable : UAnimSequenceBase {
	int32_t NumberOfKeys; // 0xa8(0x04)
	enum class EAnimInterpolationType Interpolation; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	struct FName RetargetSource; // 0xb0(0x08)
	char pad_B8[0x10]; // 0xb8(0x10)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xc8(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xd0(0x08)
	bool bEnableRootMotion; // 0xd8(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0xd9(0x01)
	bool bForceRootLock; // 0xda(0x01)
	bool bUseNormalizedRootMotionScale; // 0xdb(0x01)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.RawAnimSequenceTrackExtensions
// Size: 0x28 (Inherited: 0x28)
struct URawAnimSequenceTrackExtensions : UBlueprintFunctionLibrary {

	struct TArray<struct FVector> GetScaleKeys(struct FRawAnimSequenceTrack& Track); // Function Engine.RawAnimSequenceTrackExtensions.GetScaleKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a4d9c0
	struct TArray<struct FQuat> GetRotationalKeys(struct FRawAnimSequenceTrack& Track); // Function Engine.RawAnimSequenceTrackExtensions.GetRotationalKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a4d770
	struct TArray<struct FVector> GetPositionalKeys(struct FRawAnimSequenceTrack& Track); // Function Engine.RawAnimSequenceTrackExtensions.GetPositionalKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a4d560
};

// Class Engine.ApplicationLifecycleComponent
// Size: 0x140 (Inherited: 0xb0)
struct UApplicationLifecycleComponent : UActorComponent {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xc0(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xd0(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xe0(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xf0(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x100(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x110(0x10)
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x130(0x10)
};

// Class Engine.ArrowComponent
// Size: 0x560 (Inherited: 0x540)
struct UArrowComponent : UPrimitiveComponent {
	struct FColor ArrowColor; // 0x540(0x04)
	float ArrowSize; // 0x544(0x04)
	float ArrowLength; // 0x548(0x04)
	float ScreenSize; // 0x54c(0x04)
	char bIsScreenSizeScaled : 1; // 0x550(0x01)
	char bTreatAsASprite : 1; // 0x550(0x01)
	char pad_550_2 : 6; // 0x550(0x01)
	char pad_551[0xf]; // 0x551(0x0f)

	void SetArrowColor(struct FLinearColor NewColor); // Function Engine.ArrowComponent.SetArrowColor // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a51550
};

// Class Engine.AssetExportTask
// Size: 0x78 (Inherited: 0x28)
struct UAssetExportTask : UObject {
	struct UObject* Object; // 0x28(0x08)
	struct UExporter* Exporter; // 0x30(0x08)
	struct FString Filename; // 0x38(0x10)
	bool bSelected; // 0x48(0x01)
	bool bReplaceIdentical; // 0x49(0x01)
	bool bPrompt; // 0x4a(0x01)
	bool bAutomated; // 0x4b(0x01)
	bool bUseFileArchive; // 0x4c(0x01)
	bool bWriteEmptyFiles; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	struct TArray<struct UObject*> IgnoreObjectList; // 0x50(0x10)
	struct UObject* Options; // 0x60(0x08)
	struct TArray<struct FString> Errors; // 0x68(0x10)
};

// Class Engine.AssetManagerSettings
// Size: 0x100 (Inherited: 0x38)
struct UAssetManagerSettings : UDeveloperSettings {
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x38(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x48(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x58(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x68(0x10)
	bool bOnlyCookProductionAssets; // 0x78(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x79(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x7a(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x7b(0x01)
	bool bShouldWarnAboutInvalidAssets; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x80(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x90(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0xa0(0x10)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0xb0(0x50)
};

// Class Engine.AssetMappingTable
// Size: 0x38 (Inherited: 0x28)
struct UAssetMappingTable : UObject {
	struct TArray<struct FAssetMapping> MappedAssets; // 0x28(0x10)
};

// Class Engine.AsyncActionHandleSaveGame
// Size: 0x68 (Inherited: 0x30)
struct UAsyncActionHandleSaveGame : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	char pad_40[0x20]; // 0x40(0x20)
	struct USaveGame* SaveGameObject; // 0x60(0x08)

	struct UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(struct UObject* WorldContextObject, struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a513f0
	struct UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(struct UObject* WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a50d90
};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// Size: 0x78 (Inherited: 0x30)
struct UAsyncActionLoadPrimaryAssetBase : UBlueprintAsyncActionBase {
	char pad_30[0x48]; // 0x30(0x48)
};

// Class Engine.AsyncActionLoadPrimaryAsset
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAsset : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a50eb0
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClass : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a50ff0
};

// Class Engine.AsyncActionLoadPrimaryAssetList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a51290
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClassList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a51130
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionChangePrimaryAssetBundles : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a50bd0
	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(struct UObject* WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a50a70
};

// Class Engine.AtmosphericFog
// Size: 0x280 (Inherited: 0x278)
struct AAtmosphericFog : AInfo {
	struct UAtmosphericFogComponent* AtmosphericFogComponent; // 0x278(0x08)
};

// Class Engine.SkyAtmosphereComponent
// Size: 0x3b0 (Inherited: 0x2b0)
struct USkyAtmosphereComponent : USceneComponent {
	enum class ESkyAtmosphereTransformMode TransformMode; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float BottomRadius; // 0x2b4(0x04)
	struct FColor GroundAlbedo; // 0x2b8(0x04)
	float AtmosphereHeight; // 0x2bc(0x04)
	float MultiScatteringFactor; // 0x2c0(0x04)
	float TraceSampleCountScale; // 0x2c4(0x04)
	float RayleighScatteringScale; // 0x2c8(0x04)
	struct FLinearColor RayleighScattering; // 0x2cc(0x10)
	float RayleighExponentialDistribution; // 0x2dc(0x04)
	float MieScatteringScale; // 0x2e0(0x04)
	struct FLinearColor MieScattering; // 0x2e4(0x10)
	float MieAbsorptionScale; // 0x2f4(0x04)
	struct FLinearColor MieAbsorption; // 0x2f8(0x10)
	float MieAnisotropy; // 0x308(0x04)
	float MieExponentialDistribution; // 0x30c(0x04)
	float OtherAbsorptionScale; // 0x310(0x04)
	struct FLinearColor OtherAbsorption; // 0x314(0x10)
	struct FTentDistribution OtherTentDistribution; // 0x324(0x0c)
	struct FLinearColor SkyLuminanceFactor; // 0x330(0x10)
	float AerialPespectiveViewDistanceScale; // 0x340(0x04)
	float HeightFogContribution; // 0x344(0x04)
	float TransmittanceMinLightElevationAngle; // 0x348(0x04)
	float AerialPerspectiveStartDepth; // 0x34c(0x04)
	char pad_350[0x40]; // 0x350(0x40)
	struct FGuid bStaticLightingBuiltGUID; // 0x390(0x10)
	char pad_3A0[0x10]; // 0x3a0(0x10)

	void SetSkyLuminanceFactor(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba7560
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba74e0
	void SetRayleighScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba7450
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba73d0
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4b2e030
	void SetOtherAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba7340
	void SetMultiScatteringFactor(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMultiScatteringFactor // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba7130
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba7030
	void SetMieScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba6fa0
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4b2dfb0
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba6f20
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba6ea0
	void SetMieAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba6e10
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba6b70
	void SetAtmosphereHeight(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAtmosphereHeight // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba6940
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba68c0
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection // (Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ba67d0
	struct FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(struct UDirectionalLightComponent* DirectionalLight); // Function Engine.SkyAtmosphereComponent.GetAtmosphereTransmitanceOnGroundAtPlanetTop // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba6730
};

// Class Engine.AtmosphericFogComponent
// Size: 0x3b0 (Inherited: 0x3b0)
struct UAtmosphericFogComponent : USkyAtmosphereComponent {

	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a54b60
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetDefaultLightColor(struct FLinearColor NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a546a0
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4a543b0
	void DisableSunDisk(bool NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3969960
	void DisableGroundScattering(bool NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3969960
};

// Class Engine.AnimationAttributeIdentifierExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationAttributeIdentifierExtensions : UBlueprintFunctionLibrary {

	bool IsValid(struct FAnimationAttributeIdentifier& Identifier); // Function Engine.AnimationAttributeIdentifierExtensions.IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a53eb0
};

// Class Engine.AudioBus
// Size: 0x30 (Inherited: 0x28)
struct UAudioBus : UObject {
	enum class EAudioBusChannels AudioBusChannels; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
};

// Class Engine.InitialActiveSoundParams
// Size: 0x38 (Inherited: 0x28)
struct UInitialActiveSoundParams : UObject {
	struct TArray<struct FAudioParameter> AudioParams; // 0x28(0x10)
};

// Class Engine.AudioSubsystemCollectionRoot
// Size: 0x30 (Inherited: 0x28)
struct UAudioSubsystemCollectionRoot : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.AudioPanelWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct UAudioPanelWidgetInterface : UInterface {

	struct FName GetIconBrushName(); // Function Engine.AudioPanelWidgetInterface.GetIconBrushName // (Event|Public|BlueprintEvent) // @ game+0x2552560
	struct FText GetEditorName(); // Function Engine.AudioPanelWidgetInterface.GetEditorName // (Event|Public|BlueprintEvent) // @ game+0x2552560
};

// Class Engine.AudioSettings
// Size: 0x198 (Inherited: 0x38)
struct UAudioSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultSoundClassName; // 0x38(0x18)
	struct FSoftObjectPath DefaultMediaSoundClassName; // 0x50(0x18)
	struct FSoftObjectPath DefaultSoundConcurrencyName; // 0x68(0x18)
	struct FSoftObjectPath DefaultBaseSoundMix; // 0x80(0x18)
	struct FSoftObjectPath VoiPSoundClass; // 0x98(0x18)
	struct FSoftObjectPath MasterSubmix; // 0xb0(0x18)
	struct FSoftObjectPath BaseDefaultSubmix; // 0xc8(0x18)
	struct FSoftObjectPath ReverbSubmix; // 0xe0(0x18)
	struct FSoftObjectPath EQSubmix; // 0xf8(0x18)
	enum class EVoiceSampleRate VoiPSampleRate; // 0x110(0x04)
	float DefaultReverbSendLevel; // 0x114(0x04)
	int32_t MaximumConcurrentStreams; // 0x118(0x04)
	float GlobalMinPitchScale; // 0x11c(0x04)
	float GlobalMaxPitchScale; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct TArray<struct FAudioQualitySettings> QualityLevels; // 0x128(0x10)
	char bAllowPlayWhenSilent : 1; // 0x138(0x01)
	char bDisableMasterEQ : 1; // 0x138(0x01)
	char bAllowCenterChannel3DPanning : 1; // 0x138(0x01)
	char pad_138_3 : 5; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	uint32_t NumStoppingSources; // 0x13c(0x04)
	enum class EPanningMethod PanningMethod; // 0x140(0x01)
	enum class EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x141(0x01)
	char pad_142[0x6]; // 0x142(0x06)
	struct FString DialogueFilenameFormat; // 0x148(0x10)
	struct TArray<struct FSoundDebugEntry> DebugSounds; // 0x158(0x10)
	struct TArray<struct FDefaultAudioBusSettings> DefaultAudioBuses; // 0x168(0x10)
	struct USoundClass* DefaultSoundClass; // 0x178(0x08)
	struct USoundClass* DefaultMediaSoundClass; // 0x180(0x08)
	struct USoundConcurrency* DefaultSoundConcurrency; // 0x188(0x08)
	char pad_190[0x8]; // 0x190(0x08)
};

// Class Engine.AudioVolume
// Size: 0x320 (Inherited: 0x2b0)
struct AAudioVolume : AVolume {
	float Priority; // 0x2b0(0x04)
	char bEnabled : 1; // 0x2b4(0x01)
	char pad_2B4_1 : 7; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	struct FReverbSettings Settings; // 0x2b8(0x20)
	struct FInteriorSettings AmbientZoneSettings; // 0x2d8(0x24)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct TArray<struct FAudioVolumeSubmixSendSettings> SubmixSendSettings; // 0x300(0x10)
	struct TArray<struct FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings; // 0x310(0x10)

	void SetSubmixSendSettings(struct TArray<struct FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings); // Function Engine.AudioVolume.SetSubmixSendSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a587a0
	void SetSubmixOverrideSettings(struct TArray<struct FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings); // Function Engine.AudioVolume.SetSubmixOverrideSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a586d0
	void SetReverbSettings(struct FReverbSettings& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a58620
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x4a585a0
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a58500
	void SetEnabled(bool bNewEnabled); // Function Engine.AudioVolume.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4a58470
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled // (Final|Native|Private) // @ game+0x19b39a0
};

// Class Engine.AudioWidgetSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UAudioWidgetSubsystem : UEngineSubsystem {
};

// Class Engine.AutoDestroySubsystem
// Size: 0x50 (Inherited: 0x40)
struct UAutoDestroySubsystem : UTickableWorldSubsystem {
	struct TArray<struct AActor*> ActorsToPoll; // 0x40(0x10)

	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Engine.AutoDestroySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x4a582d0
};

// Class Engine.AutomationTestSettings
// Size: 0x348 (Inherited: 0x28)
struct UAutomationTestSettings : UObject {
	struct TArray<struct FString> EngineTestModules; // 0x28(0x10)
	struct TArray<struct FString> EditorTestModules; // 0x38(0x10)
	struct FSoftObjectPath AutomationTestmap; // 0x48(0x18)
	struct TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x60(0x10)
	struct TArray<struct FString> AssetsToOpen; // 0x70(0x10)
	struct TArray<struct FString> MapsToPIETest; // 0x80(0x10)
	bool bUseAllProjectMapsToPlayInPIE; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct FBuildPromotionTestSettings BuildPromotionTest; // 0x98(0x1f0)
	struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x288(0x30)
	struct FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2b8(0x10)
	struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2c8(0x30)
	struct TArray<struct FString> TestLevelFolders; // 0x2f8(0x10)
	struct TArray<struct FExternalToolDefinition> ExternalTools; // 0x308(0x10)
	struct TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x318(0x10)
	struct TArray<struct FLaunchOnTestSettings> LaunchOnSettings; // 0x328(0x10)
	struct FIntPoint DefaultScreenshotResolution; // 0x338(0x08)
	float PIETestDuration; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
};

// Class Engine.AvoidanceManager
// Size: 0xe0 (Inherited: 0x28)
struct UAvoidanceManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	float DefaultTimeToLive; // 0x30(0x04)
	float LockTimeAfterAvoid; // 0x34(0x04)
	float LockTimeAfterClean; // 0x38(0x04)
	float DeltaTimeToPredict; // 0x3c(0x04)
	float ArtificialRadiusExpansion; // 0x40(0x04)
	float TestHeightDifference; // 0x44(0x04)
	float HeightCheckMargin; // 0x48(0x04)
	char pad_4C[0x94]; // 0x4c(0x94)

	bool RegisterMovementComponent(struct UMovementComponent* MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4a583a0
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount // (Final|Native|Public|BlueprintCallable) // @ game+0x4a582a0
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID // (Final|Native|Public|BlueprintCallable) // @ game+0x4a58270
	struct FVector GetAvoidanceVelocityForComponent(struct UMovementComponent* MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a581c0
};

// Class Engine.BandwidthTestActor
// Size: 0x298 (Inherited: 0x278)
struct ABandwidthTestActor : AActor {
	struct FBandwidthTestGenerator BandwidthGenerator; // 0x278(0x20)
};

// Class Engine.BillboardComponent
// Size: 0x570 (Inherited: 0x540)
struct UBillboardComponent : UPrimitiveComponent {
	struct UTexture2D* Sprite; // 0x540(0x08)
	char bIsScreenSizeScaled : 1; // 0x548(0x01)
	char pad_548_1 : 7; // 0x548(0x01)
	char pad_549[0x3]; // 0x549(0x03)
	float ScreenSize; // 0x54c(0x04)
	float U; // 0x550(0x04)
	float UL; // 0x554(0x04)
	float V; // 0x558(0x04)
	float VL; // 0x55c(0x04)
	float OpacityMaskRefVal; // 0x560(0x04)
	char pad_564[0xc]; // 0x564(0x0c)

	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV // (Native|Public|BlueprintCallable) // @ game+0x4a5b3f0
	void SetSpriteAndUV(struct UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV // (Native|Public|BlueprintCallable) // @ game+0x4a5b260
	void SetSprite(struct UTexture2D* NewSprite); // Function Engine.BillboardComponent.SetSprite // (Native|Public|BlueprintCallable) // @ game+0x1cd29e0
	void SetOpacityMaskRefVal(float RefVal); // Function Engine.BillboardComponent.SetOpacityMaskRefVal // (Final|Native|Public|BlueprintCallable) // @ game+0x4a5b1e0
};

// Class Engine.BlendableInterface
// Size: 0x28 (Inherited: 0x28)
struct UBlendableInterface : UInterface {
};

// Class Engine.Skeleton
// Size: 0x470 (Inherited: 0x28)
struct USkeleton : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct FBoneNode> BoneTree; // 0x38(0x10)
	struct TArray<struct FTransform> RefLocalPoses; // 0x48(0x10)
	char pad_58[0x118]; // 0x58(0x118)
	struct FGuid VirtualBoneGuid; // 0x170(0x10)
	struct TArray<struct FVirtualBone> VirtualBones; // 0x180(0x10)
	struct TArray<struct TSoftObjectPtr<USkeleton>> CompatibleSkeletons; // 0x190(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x1a0(0x10)
	char pad_1B0[0x50]; // 0x1b0(0x50)
	struct FSmartNameContainer SmartNames; // 0x200(0x50)
	char pad_250[0x30]; // 0x250(0x30)
	struct TArray<struct UBlendProfile*> BlendProfiles; // 0x280(0x10)
	struct TArray<struct FAnimSlotGroup> SlotGroups; // 0x290(0x10)
	char pad_2A0[0x1c0]; // 0x2a0(0x1c0)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x460(0x10)

	struct UBlendProfile* GetBlendProfile(struct FName& InProfileName); // Function Engine.Skeleton.GetBlendProfile // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ba1c60
	void AddCompatibleSkeleton(struct USkeleton* SourceSkeleton); // Function Engine.Skeleton.AddCompatibleSkeleton // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba1810
};

// Class Engine.BlendProfile
// Size: 0x50 (Inherited: 0x28)
struct UBlendProfile : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USkeleton* OwningSkeleton; // 0x30(0x08)
	struct TArray<struct FBlendProfileBoneEntry> ProfileEntries; // 0x38(0x10)
	enum class EBlendProfileMode Mode; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.AnalysisProperties
// Size: 0x38 (Inherited: 0x28)
struct UAnalysisProperties : UObject {
	struct FString Function; // 0x28(0x10)
};

// Class Engine.BlockingVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct ABlockingVolume : AVolume {
};

// Class Engine.Breakpoint
// Size: 0x28 (Inherited: 0x28)
struct UBreakpoint : UObject {
};

// Class Engine.BlueprintExtension
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintExtension : UObject {
};

// Class Engine.BlueprintMapLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintMapLibrary : UBlueprintFunctionLibrary {

	void SetMapPropertyByName(struct UObject* Object, struct FName PropertyName, struct TMap<int32_t, int32_t>& Value); // Function Engine.BlueprintMapLibrary.SetMapPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a61ae0
	void Map_Values(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Values); // Function Engine.BlueprintMapLibrary.Map_Values // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a60ec0
	bool Map_Remove(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a60d10
	int32_t Map_Length(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a60c60
	void Map_Keys(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Keys); // Function Engine.BlueprintMapLibrary.Map_Keys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a60b50
	bool Map_IsNotEmpty(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_IsNotEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a60aa0
	bool Map_IsEmpty(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_IsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a609f0
	bool Map_Find(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a60720
	bool Map_Contains(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a60570
	void Map_Clear(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a604d0
	void Map_Add(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a60250
};

// Class Engine.BlueprintPathsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPathsLibrary : UBlueprintFunctionLibrary {

	struct FString VideoCaptureDir(); // Function Engine.BlueprintPathsLibrary.VideoCaptureDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a62060
	void ValidatePath(struct FString InPath, bool& bDidSucceed, struct FText& OutReason); // Function Engine.BlueprintPathsLibrary.ValidatePath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a61ee0
	void Split(struct FString InPath, struct FString& PathPart, struct FString& FilenamePart, struct FString& ExtensionPart); // Function Engine.BlueprintPathsLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a61d20
	struct FString SourceConfigDir(); // Function Engine.BlueprintPathsLibrary.SourceConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61230
	bool ShouldSaveToUserDir(); // Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61cf0
	struct FString ShaderWorkingDir(); // Function Engine.BlueprintPathsLibrary.ShaderWorkingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61c70
	void SetProjectFilePath(struct FString NewGameProjectFilePath); // Function Engine.BlueprintPathsLibrary.SetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a61be0
	struct FString SetExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.SetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a619a0
	struct FString ScreenShotDir(); // Function Engine.BlueprintPathsLibrary.ScreenShotDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61920
	struct FString SandboxesDir(); // Function Engine.BlueprintPathsLibrary.SandboxesDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a618a0
	struct FString RootDir(); // Function Engine.BlueprintPathsLibrary.RootDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61820
	void RemoveDuplicateSlashes(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a61730
	struct FString ProjectUserDir(); // Function Engine.BlueprintPathsLibrary.ProjectUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a616b0
	struct FString ProjectSavedDir(); // Function Engine.BlueprintPathsLibrary.ProjectSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61630
	struct FString ProjectPluginsDir(); // Function Engine.BlueprintPathsLibrary.ProjectPluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a615b0
	struct FString ProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61530
	struct FString ProjectModsDir(); // Function Engine.BlueprintPathsLibrary.ProjectModsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a614b0
	struct FString ProjectLogDir(); // Function Engine.BlueprintPathsLibrary.ProjectLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61430
	struct FString ProjectIntermediateDir(); // Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a613b0
	struct FString ProjectDir(); // Function Engine.BlueprintPathsLibrary.ProjectDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61330
	struct FString ProjectContentDir(); // Function Engine.BlueprintPathsLibrary.ProjectContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a612b0
	struct FString ProjectConfigDir(); // Function Engine.BlueprintPathsLibrary.ProjectConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a61230
	struct FString ProfilingDir(); // Function Engine.BlueprintPathsLibrary.ProfilingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a611b0
	void NormalizeFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a610c0
	void NormalizeDirectoryName(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a60fd0
	struct FString MakeValidFileName(struct FString InString, struct FString InReplacementChar); // Function Engine.BlueprintPathsLibrary.MakeValidFileName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a60110
	void MakeStandardFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakeStandardFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a60020
	void MakePlatformFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePlatformFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a5ff30
	bool MakePathRelativeTo(struct FString InPath, struct FString InRelativeTo, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePathRelativeTo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a5fdd0
	struct FString LaunchDir(); // Function Engine.BlueprintPathsLibrary.LaunchDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5fd50
	bool IsSamePath(struct FString PathA, struct FString PathB); // Function Engine.BlueprintPathsLibrary.IsSamePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5fc60
	bool IsRestrictedPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRestrictedPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5fbc0
	bool IsRelative(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRelative // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5fb20
	bool IsProjectFilePathSet(); // Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5faf0
	bool IsDrive(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsDrive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5fa50
	bool HasProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5fa20
	struct TArray<struct FString> GetToolTipLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f9e0
	struct TArray<struct FString> GetRestrictedFolderNames(); // Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f9a0
	struct FString GetRelativePathToRoot(); // Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f910
	struct TArray<struct FString> GetPropertyNameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f8d0
	struct FString GetProjectFilePath(); // Function Engine.BlueprintPathsLibrary.GetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f850
	struct FString GetPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f770
	struct FString GetInvalidFileSystemChars(); // Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f6f0
	struct TArray<struct FString> GetGameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f6b0
	struct FString GetExtension(struct FString InPath, bool bIncludeDot); // Function Engine.BlueprintPathsLibrary.GetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f590
	struct TArray<struct FString> GetEngineLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f550
	struct TArray<struct FString> GetEditorLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f510
	struct FString GetCleanFilename(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetCleanFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f430
	struct FString GetBaseFilename(struct FString InPath, bool bRemovePath); // Function Engine.BlueprintPathsLibrary.GetBaseFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f310
	struct FString GeneratedConfigDir(); // Function Engine.BlueprintPathsLibrary.GeneratedConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f290
	struct FString GameUserDeveloperDir(); // Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f210
	struct FString GameSourceDir(); // Function Engine.BlueprintPathsLibrary.GameSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f190
	struct FString GameDevelopersDir(); // Function Engine.BlueprintPathsLibrary.GameDevelopersDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f110
	struct FString GameAgnosticSavedDir(); // Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ec70
	bool FileExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.FileExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5f070
	struct FString FeaturePackDir(); // Function Engine.BlueprintPathsLibrary.FeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5eff0
	struct FString EnterprisePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ef70
	struct FString EnterpriseFeaturePackDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5eef0
	struct FString EnterpriseDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ee70
	struct FString EngineVersionAgnosticUserDir(); // Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5edf0
	struct FString EngineUserDir(); // Function Engine.BlueprintPathsLibrary.EngineUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ed70
	struct FString EngineSourceDir(); // Function Engine.BlueprintPathsLibrary.EngineSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ecf0
	struct FString EngineSavedDir(); // Function Engine.BlueprintPathsLibrary.EngineSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ec70
	struct FString EnginePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnginePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ebf0
	struct FString EngineIntermediateDir(); // Function Engine.BlueprintPathsLibrary.EngineIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5eb70
	struct FString EngineDir(); // Function Engine.BlueprintPathsLibrary.EngineDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5eaf0
	struct FString EngineContentDir(); // Function Engine.BlueprintPathsLibrary.EngineContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ea70
	struct FString EngineConfigDir(); // Function Engine.BlueprintPathsLibrary.EngineConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e9f0
	bool DirectoryExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.DirectoryExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e950
	struct FString DiffDir(); // Function Engine.BlueprintPathsLibrary.DiffDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e8d0
	struct FString CreateTempFilename(struct FString Path, struct FString Prefix, struct FString Extension); // Function Engine.BlueprintPathsLibrary.CreateTempFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e740
	struct FString ConvertToSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e600
	struct FString ConvertRelativePathToFull(struct FString InPath, struct FString InBasePath); // Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e4c0
	struct FString ConvertFromSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e380
	struct FString Combine(struct TArray<struct FString>& InPaths); // Function Engine.BlueprintPathsLibrary.Combine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a5e270
	bool CollapseRelativeDirectories(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a5e170
	struct FString CloudDir(); // Function Engine.BlueprintPathsLibrary.CloudDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5e0f0
	struct FString ChangeExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.ChangeExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5dfb0
	struct FString BugItDir(); // Function Engine.BlueprintPathsLibrary.BugItDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5df30
	struct FString AutomationTransientDir(); // Function Engine.BlueprintPathsLibrary.AutomationTransientDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5deb0
	struct FString AutomationLogDir(); // Function Engine.BlueprintPathsLibrary.AutomationLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5de30
	struct FString AutomationDir(); // Function Engine.BlueprintPathsLibrary.AutomationDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a5ddb0
};

// Class Engine.PlatformGameInstance
// Size: 0x278 (Inherited: 0x1a8)
struct UPlatformGameInstance : UGameInstance {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x1a8(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x1b8(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x1c8(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x1d8(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x1e8(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x1f8(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x208(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x218(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x228(0x10)
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x258(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x268(0x10)
};

// Class Engine.BlueprintPlatformLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPlatformLibrary : UBlueprintFunctionLibrary {

	int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a64530
	void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a64460
	int32_t ScheduleLocalNotificationBadgeAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a64320
	int32_t ScheduleLocalNotificationAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a64030
	void GetLaunchNotification(bool& NotificationLaunchedApp, struct FString& ActivationEvent, int32_t& FireDate); // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a63ef0
	enum class EScreenOrientation GetDeviceOrientation(); // Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a63ec0
	void ClearAllLocalNotifications(); // Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a63ea0
	void CancelLocalNotificationById(int32_t NotificationId); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a63e20
	void CancelLocalNotification(struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a63d90
};

// Class Engine.BlueprintSetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintSetLibrary : UBlueprintFunctionLibrary {

	void SetSetPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSet<int32_t>& Value); // Function Engine.BlueprintSetLibrary.SetSetPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a647d0
	void Set_Union(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Union // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a656c0
	void Set_ToArray(struct TSet<int32_t>& A, struct TArray<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_ToArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a655b0
	void Set_RemoveItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& Items); // Function Engine.BlueprintSetLibrary.Set_RemoveItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a654a0
	bool Set_Remove(struct TSet<int32_t>& TargetSet, int32_t& Item); // Function Engine.BlueprintSetLibrary.Set_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a652f0
	int32_t Set_Length(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a65240
	bool Set_IsNotEmpty(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_IsNotEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a65190
	bool Set_IsEmpty(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_IsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a650e0
	void Set_Intersection(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Intersection // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a64f60
	void Set_Difference(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Difference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a64de0
	bool Set_Contains(struct TSet<int32_t>& TargetSet, int32_t& ItemToFind); // Function Engine.BlueprintSetLibrary.Set_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a64c30
	void Set_Clear(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a64b90
	void Set_AddItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& NewItems); // Function Engine.BlueprintSetLibrary.Set_AddItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a64a80
	void Set_Add(struct TSet<int32_t>& TargetSet, int32_t& NewItem); // Function Engine.BlueprintSetLibrary.Set_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a648d0
};

// Class Engine.BodySetup
// Size: 0x2e8 (Inherited: 0x38)
struct UBodySetup : UBodySetupCore {
	struct FKAggregateGeom AggGeom; // 0x38(0x58)
	char bAlwaysFullAnimWeight : 1; // 0x90(0x01)
	char bConsiderForBounds : 1; // 0x90(0x01)
	char bMeshCollideAll : 1; // 0x90(0x01)
	char bDoubleSidedGeometry : 1; // 0x90(0x01)
	char bGenerateNonMirroredCollision : 1; // 0x90(0x01)
	char bSharedCookedData : 1; // 0x90(0x01)
	char bGenerateMirroredCollision : 1; // 0x90(0x01)
	char bSupportUVsAndFaceRemap : 1; // 0x90(0x01)
	char pad_91_0 : 3; // 0x91(0x01)
	char bNeverNeedsCookedCollisionData : 1; // 0x91(0x01)
	char pad_91_4 : 4; // 0x91(0x01)
	char pad_92[0x6]; // 0x92(0x06)
	struct UPhysicalMaterial* PhysMaterial; // 0x98(0x08)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0xa0(0x10)
	char pad_B0[0x78]; // 0xb0(0x78)
	struct FBodyInstance DefaultInstance; // 0x128(0x190)
	char pad_2B8[0x8]; // 0x2b8(0x08)
	struct FVector BuildScale3D; // 0x2c0(0x18)
	char pad_2D8[0x10]; // 0x2d8(0x10)
};

// Class Engine.BoneMaskFilter
// Size: 0x38 (Inherited: 0x28)
struct UBoneMaskFilter : UObject {
	struct TArray<struct FInputBlendPose> BlendPoses; // 0x28(0x10)
};

// Class Engine.BookmarkBase
// Size: 0x28 (Inherited: 0x28)
struct UBookmarkBase : UObject {
};

// Class Engine.BookMark
// Size: 0x68 (Inherited: 0x28)
struct UBookMark : UBookmarkBase {
	struct FVector Location; // 0x28(0x18)
	struct FRotator Rotation; // 0x40(0x18)
	struct TArray<struct FString> HiddenLevels; // 0x58(0x10)
};

// Class Engine.BookMark2D
// Size: 0x38 (Inherited: 0x28)
struct UBookMark2D : UBookmarkBase {
	float Zoom2D; // 0x28(0x04)
	struct FIntPoint Location; // 0x2c(0x08)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.BoundsCopyComponent
// Size: 0x150 (Inherited: 0xb0)
struct UBoundsCopyComponent : UActorComponent {
	struct TSoftObjectPtr<AActor> BoundsSourceActor; // 0xb0(0x28)
	bool bUseCollidingComponentsForSourceBounds; // 0xd8(0x01)
	bool bKeepOwnBoundsScale; // 0xd9(0x01)
	bool bUseCollidingComponentsForOwnBounds; // 0xda(0x01)
	char pad_DB[0x5]; // 0xdb(0x05)
	struct FTransform PostTransform; // 0xe0(0x60)
	bool bCopyXBounds; // 0x140(0x01)
	bool bCopyYBounds; // 0x141(0x01)
	bool bCopyZBounds; // 0x142(0x01)
	char pad_143[0xd]; // 0x143(0x0d)
};

// Class Engine.ReflectionCapture
// Size: 0x280 (Inherited: 0x278)
struct AReflectionCapture : AActor {
	struct UReflectionCaptureComponent* CaptureComponent; // 0x278(0x08)
};

// Class Engine.BoxReflectionCapture
// Size: 0x280 (Inherited: 0x280)
struct ABoxReflectionCapture : AReflectionCapture {
};

// Class Engine.ReflectionCaptureComponent
// Size: 0x330 (Inherited: 0x2b0)
struct UReflectionCaptureComponent : USceneComponent {
	struct UBillboardComponent* CaptureOffsetComponent; // 0x2b0(0x08)
	enum class EReflectionSourceType ReflectionSourceType; // 0x2b8(0x01)
	enum class EMobileReflectionCompression MobileReflectionCompression; // 0x2b9(0x01)
	char pad_2BA[0x6]; // 0x2ba(0x06)
	struct UTextureCube* Cubemap; // 0x2c0(0x08)
	float SourceCubemapAngle; // 0x2c8(0x04)
	float Brightness; // 0x2cc(0x04)
	bool bModifyMaxValueRGBM; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	float MaxValueRGBM; // 0x2d4(0x04)
	struct FVector CaptureOffset; // 0x2d8(0x18)
	struct FGuid MapBuildDataId; // 0x2f0(0x10)
	struct UTextureCube* CachedEncodedHDRCubemap; // 0x300(0x08)
	char pad_308[0x28]; // 0x308(0x28)
};

// Class Engine.BoxReflectionCaptureComponent
// Size: 0x340 (Inherited: 0x330)
struct UBoxReflectionCaptureComponent : UReflectionCaptureComponent {
	float BoxTransitionDistance; // 0x328(0x04)
	struct UBoxComponent* PreviewInfluenceBox; // 0x330(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x338(0x08)
};

// Class Engine.BrushBuilder
// Size: 0x80 (Inherited: 0x28)
struct UBrushBuilder : UObject {
	struct FString BitmapFilename; // 0x28(0x10)
	struct FString Tooltip; // 0x38(0x10)
	char NotifyBadParams : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<struct FVector> Vertices; // 0x50(0x10)
	struct TArray<struct FBuilderPoly> Polys; // 0x60(0x10)
	struct FName Layer; // 0x70(0x08)
	char MergeCoplanars : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.BrushComponent
// Size: 0x550 (Inherited: 0x540)
struct UBrushComponent : UPrimitiveComponent {
	struct UModel* Brush; // 0x540(0x08)
	struct UBodySetup* BrushBodySetup; // 0x548(0x08)
};

// Class Engine.BrushShape
// Size: 0x2b0 (Inherited: 0x2b0)
struct ABrushShape : ABrush {
};

// Class Engine.BuiltInAttributesExtensions
// Size: 0x28 (Inherited: 0x28)
struct UBuiltInAttributesExtensions : UBlueprintFunctionLibrary {
};

// Class Engine.ButtonStyleAsset
// Size: 0x420 (Inherited: 0x28)
struct UButtonStyleAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FButtonStyle ButtonStyle; // 0x30(0x3f0)
};

// Class Engine.CachedAnimDataLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCachedAnimDataLibrary : UBlueprintFunctionLibrary {

	bool StateMachine_IsStateRelevant(struct UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData); // Function Engine.CachedAnimDataLibrary.StateMachine_IsStateRelevant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a68fd0
	float StateMachine_GetLocalWeight(struct UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData); // Function Engine.CachedAnimDataLibrary.StateMachine_GetLocalWeight // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a68ee0
	float StateMachine_GetGlobalWeight(struct UAnimInstance* InAnimInstance, struct FCachedAnimStateData& CachedAnimStateData); // Function Engine.CachedAnimDataLibrary.StateMachine_GetGlobalWeight // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a68df0
};

// Class Engine.CameraAnim
// Size: 0x750 (Inherited: 0x28)
struct UCameraAnim : UObject {
	struct UInterpGroup* CameraInterpGroup; // 0x28(0x08)
	float AnimLength; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FBox BoundingBox; // 0x38(0x38)
	char bRelativeToInitialTransform : 1; // 0x70(0x01)
	char bRelativeToInitialFOV : 1; // 0x70(0x01)
	char pad_70_2 : 6; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	float BaseFOV; // 0x74(0x04)
	char pad_78[0x8]; // 0x78(0x08)
	struct FPostProcessSettings BasePostProcessSettings; // 0x80(0x6c0)
	float BasePostProcessBlendWeight; // 0x740(0x04)
	char pad_744[0xc]; // 0x744(0x0c)
};

// Class Engine.CameraAnimInst
// Size: 0x190 (Inherited: 0x28)
struct UCameraAnimInst : UObject {
	struct UCameraAnim* CamAnim; // 0x28(0x08)
	struct UInterpGroupInst* InterpGroupInst; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
	float PlayRate; // 0x50(0x04)
	char pad_54[0x14]; // 0x54(0x14)
	struct UInterpTrackMove* MoveTrack; // 0x68(0x08)
	struct UInterpTrackInstMove* MoveInst; // 0x70(0x08)
	enum class ECameraShakePlaySpace PlaySpace; // 0x78(0x01)
	char pad_79[0x117]; // 0x79(0x117)

	void Stop(bool bImmediate); // Function Engine.CameraAnimInst.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x4a690c0
	void SetScale(float NewDuration); // Function Engine.CameraAnimInst.SetScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4a68cd0
	void SetDuration(float NewDuration); // Function Engine.CameraAnimInst.SetDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x4a688b0
};

// Class Engine.CameraBlockingVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct ACameraBlockingVolume : AVolume {
};

// Class Engine.CameraLensEffectInterface
// Size: 0x28 (Inherited: 0x28)
struct UCameraLensEffectInterface : UInterface {

	struct UFXSystemComponent* GetPrimaryParticleComponent(); // Function Engine.CameraLensEffectInterface.GetPrimaryParticleComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a68390
	struct TArray<struct UFXSystemComponent*> GetParticleComponents(); // Function Engine.CameraLensEffectInterface.GetParticleComponents // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a68310
};

// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
// Size: 0x28 (Inherited: 0x28)
struct UCameraLensEffectInterfaceClassSupportLibrary : UBlueprintFunctionLibrary {

	void SetInterfaceClass(struct AActor* Class, struct FCameraLensInterfaceClassSupport& Var, enum class EInterfaceValidResult& Result); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.SetInterfaceClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a68930
	void IsInterfaceValid(struct TScriptInterface<ICameraLensEffectInterface>& CameraLens, enum class EInterfaceValidResult& Result); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a68530
	void IsInterfaceClassValid(struct FCameraLensInterfaceClassSupport& CameraLens, enum class EInterfaceValidResult& Result); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceClassValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a68450
	struct AActor* GetInterfaceClass(struct FCameraLensInterfaceClassSupport& CameraLens); // Function Engine.CameraLensEffectInterfaceClassSupportLibrary.GetInterfaceClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a68270
};

// Class Engine.CameraModifier_CameraShake
// Size: 0xb0 (Inherited: 0x48)
struct UCameraModifier_CameraShake : UCameraModifier {
	struct TArray<struct FActiveCameraShakeInfo> ActiveShakes; // 0x48(0x10)
	struct TMap<struct UCameraShakeBase*, struct FPooledCameraShakes> ExpiredPooledShakesMap; // 0x58(0x50)
	float SplitScreenShakeScale; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.CameraShakeSourceActor
// Size: 0x280 (Inherited: 0x278)
struct ACameraShakeSourceActor : AActor {
	struct UCameraShakeSourceComponent* CameraShakeSourceComponent; // 0x278(0x08)
};

// Class Engine.CameraShakeSourceComponent
// Size: 0x2d0 (Inherited: 0x2b0)
struct UCameraShakeSourceComponent : USceneComponent {
	enum class ECameraShakeAttenuation Attenuation; // 0x2b0(0x01)
	char pad_2B1[0x3]; // 0x2b1(0x03)
	float InnerAttenuationRadius; // 0x2b4(0x04)
	float OuterAttenuationRadius; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct UCameraShakeBase* CameraShake; // 0x2c0(0x08)
	bool bAutoStart; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)

	void StopAllCameraShakesOfType(struct UCameraShakeBase* InCameraShake, bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x4a6d260
	void StopAllCameraShakes(bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes // (Final|Native|Public|BlueprintCallable) // @ game+0x4a6d1d0
	void StartCameraShake(struct UCameraShakeBase* InCameraShake, float Scale, enum class ECameraShakePlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.CameraShakeSourceComponent.StartCameraShake // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6d040
	void Start(); // Function Engine.CameraShakeSourceComponent.Start // (Final|Native|Public|BlueprintCallable) // @ game+0x4a6d020
	float GetAttenuationFactor(struct FVector& Location); // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a6b3d0
};

// Class Engine.Canvas
// Size: 0x390 (Inherited: 0x28)
struct UCanvas : UObject {
	float OrgX; // 0x28(0x04)
	float OrgY; // 0x2c(0x04)
	float ClipX; // 0x30(0x04)
	float ClipY; // 0x34(0x04)
	struct FColor DrawColor; // 0x38(0x04)
	char bCenterX : 1; // 0x3c(0x01)
	char bCenterY : 1; // 0x3c(0x01)
	char bNoSmooth : 1; // 0x3c(0x01)
	char pad_3C_3 : 5; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	int32_t SizeX; // 0x40(0x04)
	int32_t SizeY; // 0x44(0x04)
	char pad_48[0x8]; // 0x48(0x08)
	struct FPlane ColorModulate; // 0x50(0x20)
	struct UTexture2D* DefaultTexture; // 0x70(0x08)
	struct UTexture2D* GradientTexture0; // 0x78(0x08)
	struct UReporterGraph* ReporterGraph; // 0x80(0x08)
	char pad_88[0x308]; // 0x88(0x308)

	struct FVector2D K2_TextSize(struct UFont* RenderFont, struct FString RenderText, struct FVector2D Scale); // Function Engine.Canvas.K2_TextSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6cdb0
	struct FVector2D K2_StrLen(struct UFont* RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6ccb0
	struct FVector K2_Project(struct FVector WorldLocation); // Function Engine.Canvas.K2_Project // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6cbf0
	void K2_DrawTriangle(struct UTexture* RenderTexture, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x4a6cac0
	void K2_DrawTexture(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6c7e0
	void K2_DrawText(struct UFont* RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor); // Function Engine.Canvas.K2_DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6c3f0
	void K2_DrawPolygon(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32_t NumberOfSides, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawPolygon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6c210
	void K2_DrawMaterialTriangle(struct UMaterialInterface* RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x4a6c0e0
	void K2_DrawMaterial(struct UMaterialInterface* RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6bea0
	void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6bd10
	void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6bb80
	void K2_DrawBorder(struct UTexture* BorderTexture, struct UTexture* BackgroundTexture, struct UTexture* LeftBorderTexture, struct UTexture* RightBorderTexture, struct UTexture* TopBorderTexture, struct UTexture* BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize); // Function Engine.Canvas.K2_DrawBorder // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a6b680
	void K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection); // Function Engine.Canvas.K2_Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a6b550
};

// Class Engine.TextureRenderTarget
// Size: 0x200 (Inherited: 0x1f0)
struct UTextureRenderTarget : UTexture {
	float TargetGamma; // 0x1f0(0x04)
	char pad_1F4[0xc]; // 0x1f4(0x0c)
};

// Class Engine.TextureRenderTarget2D
// Size: 0x220 (Inherited: 0x200)
struct UTextureRenderTarget2D : UTextureRenderTarget {
	int32_t SizeX; // 0x1f8(0x04)
	int32_t SizeY; // 0x1fc(0x04)
	struct FLinearColor ClearColor; // 0x200(0x10)
	enum class TextureAddress AddressX; // 0x210(0x01)
	enum class TextureAddress AddressY; // 0x211(0x01)
	char bForceLinearGamma : 1; // 0x212(0x01)
	char bHDR : 1; // 0x212(0x01)
	char bGPUSharedFlag : 1; // 0x212(0x01)
	enum class ETextureRenderTargetFormat RenderTargetFormat; // 0x213(0x01)
	char bAutoGenerateMips : 1; // 0x214(0x01)
	enum class TextureFilter MipsSamplerFilter; // 0x215(0x01)
	enum class TextureAddress MipsAddressU; // 0x216(0x01)
	enum class TextureAddress MipsAddressV; // 0x217(0x01)
	enum class EPixelFormat OverrideFormat; // 0x218(0x01)
	char pad_21F_4 : 4; // 0x21f(0x01)
};

// Class Engine.CanvasRenderTarget2D
// Size: 0x240 (Inherited: 0x220)
struct UCanvasRenderTarget2D : UTextureRenderTarget2D {
	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0x220(0x10)
	struct TWeakObjectPtr<struct UWorld> World; // 0x230(0x08)
	bool bShouldClearRenderTargetOnReceiveUpdate; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)

	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource // (Native|Public|BlueprintCallable) // @ game+0x3fad8e0
	void ReceiveUpdate(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a6b470
	struct UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(struct UObject* WorldContextObject, struct UCanvasRenderTarget2D* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a6b200
};

// Class Engine.CheckBoxStyleAsset
// Size: 0xb00 (Inherited: 0x28)
struct UCheckBoxStyleAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FCheckBoxStyle CheckBoxStyle; // 0x30(0xad0)
};

// Class Engine.ChildActorComponent
// Size: 0x2f0 (Inherited: 0x2b0)
struct UChildActorComponent : USceneComponent {
	struct AActor* ChildActorClass; // 0x2b0(0x08)
	struct AActor* ChildActor; // 0x2b8(0x08)
	struct AActor* ChildActorTemplate; // 0x2c0(0x08)
	char pad_2C8[0x28]; // 0x2c8(0x28)

	void SetChildActorClass(struct AActor* InClass); // Function Engine.ChildActorComponent.SetChildActorClass // (Final|Native|Public|BlueprintCallable) // @ game+0x4a79400
};

// Class Engine.ChildConnection
// Size: 0x3250 (Inherited: 0x3240)
struct UChildConnection : UNetConnection {
	struct UNetConnection* Parent; // 0x3240(0x08)
	char pad_3248[0x8]; // 0x3248(0x08)
};

// Class Engine.PlatformInterfaceBase
// Size: 0x38 (Inherited: 0x28)
struct UPlatformInterfaceBase : UObject {
	struct TArray<struct FDelegateArray> AllDelegates; // 0x28(0x10)
};

// Class Engine.CloudStorageBase
// Size: 0x50 (Inherited: 0x38)
struct UCloudStorageBase : UPlatformInterfaceBase {
	struct TArray<struct FString> LocalCloudFiles; // 0x38(0x10)
	char bSuppressDelegateCalls : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.CollisionProfile
// Size: 0x170 (Inherited: 0x38)
struct UCollisionProfile : UDeveloperSettings {
	struct TArray<struct FCollisionResponseTemplate> Profiles; // 0x38(0x10)
	struct TArray<struct FCustomChannelSetup> DefaultChannelResponses; // 0x48(0x10)
	struct TArray<struct FCustomProfile> EditProfiles; // 0x58(0x10)
	struct TArray<struct FRedirector> ProfileRedirects; // 0x68(0x10)
	struct TArray<struct FRedirector> CollisionChannelRedirects; // 0x78(0x10)
	char pad_88[0xe8]; // 0x88(0xe8)
};

// Class Engine.ComponentDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UComponentDelegateBinding : UDynamicBlueprintBinding {
	struct TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x28(0x10)
};

// Class Engine.ComponentElementCounterInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementCounterInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementHierarchyInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementHierarchyInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementObjectInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementObjectInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ComponentElementWorldInterface
// Size: 0x30 (Inherited: 0x28)
struct UComponentElementWorldInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ActorComponentInstanceDataTransientOuter
// Size: 0x28 (Inherited: 0x28)
struct UActorComponentInstanceDataTransientOuter : UObject {
};

// Class Engine.CurveTable
// Size: 0xa0 (Inherited: 0x28)
struct UCurveTable : UObject {
	char pad_28[0x78]; // 0x28(0x78)
};

// Class Engine.CompositeCurveTable
// Size: 0xc8 (Inherited: 0xa0)
struct UCompositeCurveTable : UCurveTable {
	struct TArray<struct UCurveTable*> ParentTables; // 0xa0(0x10)
	struct TArray<struct UCurveTable*> OldParentTables; // 0xb0(0x10)
	char pad_C0[0x8]; // 0xc0(0x08)
};

// Class Engine.CompositeDataTable
// Size: 0xd8 (Inherited: 0xb0)
struct UCompositeDataTable : UDataTable {
	struct TArray<struct UDataTable*> ParentTables; // 0xb0(0x10)
	struct TArray<struct UDataTable*> OldParentTables; // 0xc0(0x10)
	char pad_D0[0x8]; // 0xd0(0x08)
};

// Class Engine.Console
// Size: 0x130 (Inherited: 0x28)
struct UConsole : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct ULocalPlayer* ConsoleTargetPlayer; // 0x38(0x08)
	struct UTexture2D* DefaultTexture_Black; // 0x40(0x08)
	struct UTexture2D* DefaultTexture_White; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
	struct TArray<struct FString> HistoryBuffer; // 0x68(0x10)
	char pad_78[0xb8]; // 0x78(0xb8)
};

// Class Engine.ConstraintInstanceBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UConstraintInstanceBlueprintLibrary : UBlueprintFunctionLibrary {

	void SetProjectionParams(struct FConstraintInstanceAccessor& Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha); // Function Engine.ConstraintInstanceBlueprintLibrary.SetProjectionParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7fa20
	void SetParentDominates(struct FConstraintInstanceAccessor& Accessor, bool bParentDominates); // Function Engine.ConstraintInstanceBlueprintLibrary.SetParentDominates // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7f940
	void SetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.SetOrientationDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7f810
	void SetOrientationDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.SetOrientationDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7f730
	void SetLinearVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& InVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7f650
	void SetLinearVelocityDrive(struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearVelocityDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7f4d0
	void SetLinearSoftLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearSoftLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7f2e0
	void SetLinearPositionTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& InPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearPositionTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7f200
	void SetLinearPositionDrive(struct FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearPositionDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7f080
	void SetLinearPlasticity(struct FConstraintInstanceAccessor& Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, enum class EConstraintPlasticityType PlasticityType); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7ef10
	void SetLinearLimits(struct FConstraintInstanceAccessor& Accessor, enum class ELinearConstraintMotion XMotion, enum class ELinearConstraintMotion YMotion, enum class ELinearConstraintMotion ZMotion, float Limit); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7ed50
	void SetLinearDriveParams(struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7ebe0
	void SetLinearBreakable(struct FConstraintInstanceAccessor& Accessor, bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.SetLinearBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7eab0
	void SetDisableCollision(struct FConstraintInstanceAccessor& Accessor, bool bDisableCollision); // Function Engine.ConstraintInstanceBlueprintLibrary.SetDisableCollision // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7e9d0
	void SetContactTransferScale(struct FConstraintInstanceAccessor& Accessor, float ContactTransferScale); // Function Engine.ConstraintInstanceBlueprintLibrary.SetContactTransferScale // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7e8f0
	void SetAngularVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& InVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7e810
	void SetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7e6e0
	void SetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7e600
	void SetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftTwistLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7e410
	void SetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftSwingLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7e220
	void SetAngularPlasticity(struct FConstraintInstanceAccessor& Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7e0f0
	void SetAngularOrientationTarget(struct FConstraintInstanceAccessor& Accessor, struct FRotator& InPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularOrientationTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7e010
	void SetAngularLimits(struct FConstraintInstanceAccessor& Accessor, enum class EAngularConstraintMotion Swing1MotionType, float Swing1LimitAngle, enum class EAngularConstraintMotion Swing2MotionType, float Swing2LimitAngle, enum class EAngularConstraintMotion TwistMotionType, float TwistLimitAngle); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7dde0
	void SetAngularDriveParams(struct FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7dc70
	void SetAngularDriveMode(struct FConstraintInstanceAccessor& Accessor, enum class EAngularDriveMode DriveMode); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularDriveMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7db90
	void SetAngularBreakable(struct FConstraintInstanceAccessor& Accessor, bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.SetAngularBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7da60
	void GetProjectionParams(struct FConstraintInstanceAccessor& Accessor, bool& bEnableProjection, float& ProjectionLinearAlpha, float& ProjectionAngularAlpha); // Function Engine.ConstraintInstanceBlueprintLibrary.GetProjectionParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7d8d0
	bool GetParentDominates(struct FConstraintInstanceAccessor& Accessor); // Function Engine.ConstraintInstanceBlueprintLibrary.GetParentDominates // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7d830
	void GetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7d700
	void GetOrientationDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7d610
	void GetLinearVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& OutVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7d530
	void GetLinearVelocityDrive(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7d3a0
	void GetLinearSoftLimitParams(struct FConstraintInstanceAccessor& Accessor, bool& bSoftLinearLimit, float& LinearLimitStiffness, float& LinearLimitDamping, float& LinearLimitRestitution, float& LinearLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearSoftLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7d170
	void GetLinearPositionTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& OutPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7d090
	void GetLinearPositionDrive(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionDrive // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7cf00
	void GetLinearPlasticity(struct FConstraintInstanceAccessor& Accessor, bool& bLinearPlasticity, float& LinearPlasticityThreshold, enum class EConstraintPlasticityType& PlasticityType); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7cd60
	void GetLinearLimits(struct FConstraintInstanceAccessor& Accessor, enum class ELinearConstraintMotion& XMotion, enum class ELinearConstraintMotion& YMotion, enum class ELinearConstraintMotion& ZMotion, float& Limit); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7cb60
	void GetLinearDriveParams(struct FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c9d0
	void GetLinearBreakable(struct FConstraintInstanceAccessor& Accessor, bool& bLinearBreakable, float& LinearBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.GetLinearBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c890
	bool GetDisableCollsion(struct FConstraintInstanceAccessor& Accessor); // Function Engine.ConstraintInstanceBlueprintLibrary.GetDisableCollsion // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c7f0
	void GetContactTransferScale(struct FConstraintInstanceAccessor& Accessor, float& ContactTransferScale); // Function Engine.ConstraintInstanceBlueprintLibrary.GetContactTransferScale // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c700
	void GetAttachedBodyNames(struct FConstraintInstanceAccessor& Accessor, struct FName& ParentBody, struct FName& ChildBody); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAttachedBodyNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c5d0
	void GetAngularVelocityTarget(struct FConstraintInstanceAccessor& Accessor, struct FVector& OutVelTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7c4f0
	void GetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveTwistAndSwing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c3c0
	void GetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveSLERP // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c2d0
	void GetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& Accessor, bool& bSoftTwistLimit, float& TwistLimitStiffness, float& TwistLimitDamping, float& TwistLimitRestitution, float& TwistLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftTwistLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7c0a0
	void GetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& Accessor, bool& bSoftSwingLimit, float& SwingLimitStiffness, float& SwingLimitDamping, float& SwingLimitRestitution, float& SwingLimitContactDistance); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftSwingLimitParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7be70
	void GetAngularPlasticity(struct FConstraintInstanceAccessor& Accessor, bool& bAngularPlasticity, float& AngularPlasticityThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularPlasticity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7bd30
	void GetAngularOrientationTarget(struct FConstraintInstanceAccessor& Accessor, struct FRotator& OutPosTarget); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularOrientationTarget // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a7bc50
	void GetAngularLimits(struct FConstraintInstanceAccessor& Accessor, enum class EAngularConstraintMotion& Swing1MotionType, float& Swing1LimitAngle, enum class EAngularConstraintMotion& Swing2MotionType, float& Swing2LimitAngle, enum class EAngularConstraintMotion& TwistMotionType, float& TwistLimitAngle); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularLimits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7b9d0
	void GetAngularDriveParams(struct FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7b840
	void GetAngularDriveMode(struct FConstraintInstanceAccessor& Accessor, enum class EAngularDriveMode& OutDriveMode); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7b750
	void GetAngularBreakable(struct FConstraintInstanceAccessor& Accessor, bool& bAngularBreakable, float& AngularBreakThreshold); // Function Engine.ConstraintInstanceBlueprintLibrary.GetAngularBreakable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7b610
	void CopyParams(struct FConstraintInstanceAccessor& Accessor, struct FConstraintInstanceAccessor& SourceAccessor, bool bKeepPosition, bool bKeepRotation); // Function Engine.ConstraintInstanceBlueprintLibrary.CopyParams // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a7b480
};

// Class Engine.ControlChannel
// Size: 0x80 (Inherited: 0x68)
struct UControlChannel : UChannel {
	char pad_68[0x18]; // 0x68(0x18)
};

// Class Engine.StreamingSettings
// Size: 0x70 (Inherited: 0x38)
struct UStreamingSettings : UDeveloperSettings {
	char AsyncLoadingThreadEnabled : 1; // 0x38(0x01)
	char WarnIfTimeLimitExceeded : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float TimeLimitExceededMultiplier; // 0x3c(0x04)
	float TimeLimitExceededMinTime; // 0x40(0x04)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x44(0x04)
	char UseBackgroundLevelStreaming : 1; // 0x48(0x01)
	char AsyncLoadingUseFullTimeLimit : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AsyncLoadingTimeLimit; // 0x4c(0x04)
	float PriorityAsyncLoadingExtraTime; // 0x50(0x04)
	float LevelStreamingActorsUpdateTimeLimit; // 0x54(0x04)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x58(0x04)
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x5c(0x04)
	int32_t LevelStreamingAddPrimitiveGranularity; // 0x60(0x04)
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x64(0x04)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x68(0x04)
	char FlushStreamingOnExit : 1; // 0x6c(0x01)
	char EventDrivenLoaderEnabled : 1; // 0x6c(0x01)
	char pad_6C_2 : 6; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
};

// Class Engine.GarbageCollectionSettings
// Size: 0x58 (Inherited: 0x38)
struct UGarbageCollectionSettings : UDeveloperSettings {
	float TimeBetweenPurgingPendingKillObjects; // 0x38(0x04)
	char FlushStreamingOnGC : 1; // 0x3c(0x01)
	char AllowParallelGC : 1; // 0x3c(0x01)
	char IncrementalBeginDestroyEnabled : 1; // 0x3c(0x01)
	char MultithreadedDestructionEnabled : 1; // 0x3c(0x01)
	char CreateGCClusters : 1; // 0x3c(0x01)
	char AssetClusteringEnabled : 1; // 0x3c(0x01)
	char ActorClusteringEnabled : 1; // 0x3c(0x01)
	char BlueprintClusteringEnabled : 1; // 0x3c(0x01)
	char UseDisregardForGCOnDedicatedServers : 1; // 0x3d(0x01)
	char VerifyGCObjectNames : 1; // 0x3d(0x01)
	char VerifyUObjectsAreNotFGCObjects : 1; // 0x3d(0x01)
	char PendingKillEnabled : 1; // 0x3d(0x01)
	char pad_3D_4 : 4; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
	int32_t MinGCClusterSize; // 0x40(0x04)
	int32_t NumRetriesBeforeForcingGC; // 0x44(0x04)
	int32_t MaxObjectsNotConsideredByGC; // 0x48(0x04)
	int32_t SizeOfPermanentObjectPool; // 0x4c(0x04)
	int32_t MaxObjectsInGame; // 0x50(0x04)
	int32_t MaxObjectsInEditor; // 0x54(0x04)
};

// Class Engine.CullDistanceVolume
// Size: 0x2c8 (Inherited: 0x2b0)
struct ACullDistanceVolume : AVolume {
	struct TArray<struct FCullDistanceSizePair> CullDistances; // 0x2b0(0x10)
	char bEnabled : 1; // 0x2c0(0x01)
	char pad_2C0_1 : 7; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
};

// Class Engine.CurveBase
// Size: 0x30 (Inherited: 0x28)
struct UCurveBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void GetValueRange(float& MinValue, float& MaxValue); // Function Engine.CurveBase.GetValueRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82880
	void GetTimeRange(float& MinTime, float& MaxTime); // Function Engine.CurveBase.GetTimeRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82650
};

// Class Engine.CurveEdPresetCurve
// Size: 0x28 (Inherited: 0x28)
struct UCurveEdPresetCurve : UObject {
};

// Class Engine.CurveFloat
// Size: 0xb8 (Inherited: 0x30)
struct UCurveFloat : UCurveBase {
	struct FRichCurve FloatCurve; // 0x30(0x80)
	bool bIsEventCurve; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82370
};

// Class Engine.AnimationCurveIdentifierExtensions
// Size: 0x28 (Inherited: 0x28)
struct UAnimationCurveIdentifierExtensions : UBlueprintFunctionLibrary {

	bool IsValid(struct FAnimationCurveIdentifier& Identifier); // Function Engine.AnimationCurveIdentifierExtensions.IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a82aa0
	enum class ERawCurveTrackTypes GetType(struct FAnimationCurveIdentifier& Identifier); // Function Engine.AnimationCurveIdentifierExtensions.GetType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a82730
	struct FName GetName(struct FAnimationCurveIdentifier& Identifier); // Function Engine.AnimationCurveIdentifierExtensions.GetName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4a824b0
};

// Class Engine.CurveLinearColor
// Size: 0x250 (Inherited: 0x30)
struct UCurveLinearColor : UCurveBase {
	struct FRichCurve FloatCurves[0x4]; // 0x30(0x200)
	float AdjustHue; // 0x230(0x04)
	float AdjustSaturation; // 0x234(0x04)
	float AdjustBrightness; // 0x238(0x04)
	float AdjustBrightnessCurve; // 0x23c(0x04)
	float AdjustVibrance; // 0x240(0x04)
	float AdjustMinAlpha; // 0x244(0x04)
	float AdjustMaxAlpha; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)

	struct FLinearColor GetUnadjustedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetUnadjustedLinearColorValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a827e0
	struct FLinearColor GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82410
	struct FLinearColor GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a82150
};

// Class Engine.Texture2D
// Size: 0x2b0 (Inherited: 0x1f0)
struct UTexture2D : UTexture {
	int32_t FirstResourceMemMip; // 0x1f0(0x04)
	char bTemporarilyDisableStreaming : 1; // 0x1f4(0x01)
	char pad_1F4_1 : 7; // 0x1f4(0x01)
	enum class TextureAddress AddressX; // 0x1f5(0x01)
	enum class TextureAddress AddressY; // 0x1f6(0x01)
	char pad_1F7[0x1]; // 0x1f7(0x01)
	struct FIntPoint ImportedSize; // 0x1f8(0x08)
	char pad_200[0xb0]; // 0x200(0xb0)

	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4900
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc48d0
};

// Class Engine.CurveLinearColorAtlas
// Size: 0x2d0 (Inherited: 0x2b0)
struct UCurveLinearColorAtlas : UTexture2D {
	uint32_t TextureSize; // 0x2a8(0x04)
	char bSquareResolution : 1; // 0x2ac(0x01)
	uint32_t TextureHeight; // 0x2b0(0x04)
	struct TArray<struct UCurveLinearColor*> GradientCurves; // 0x2b8(0x10)
	char pad_2C8_1 : 7; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)

	bool GetCurvePosition(struct UCurveLinearColor* InCurve, float& position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a82240
};

// Class Engine.CurveSourceInterface
// Size: 0x28 (Inherited: 0x28)
struct UCurveSourceInterface : UInterface {

	float GetCurveValue(struct FName CurveName); // Function Engine.CurveSourceInterface.GetCurveValue // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x4a85c90
	void GetCurves(struct TArray<struct FNamedCurveValue>& OutValues); // Function Engine.CurveSourceInterface.GetCurves // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x4a85d30
	struct FName GetBindingName(); // Function Engine.CurveSourceInterface.GetBindingName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x4a85c50
};

// Class Engine.CurveVector
// Size: 0x1b0 (Inherited: 0x30)
struct UCurveVector : UCurveBase {
	struct FRichCurve FloatCurves[0x3]; // 0x30(0x180)

	struct FVector GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86880
};

// Class Engine.DamageType
// Size: 0x40 (Inherited: 0x28)
struct UDamageType : UObject {
	char bCausedByWorld : 1; // 0x28(0x01)
	char bScaleMomentumByMass : 1; // 0x28(0x01)
	char bRadialDamageVelChange : 1; // 0x28(0x01)
	char pad_28_3 : 5; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float DamageImpulse; // 0x2c(0x04)
	float DestructibleImpulse; // 0x30(0x04)
	float DestructibleDamageSpreadScale; // 0x34(0x04)
	float DamageFalloff; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DataDrivenCVarEngineSubsystem
// Size: 0x40 (Inherited: 0x30)
struct UDataDrivenCVarEngineSubsystem : UEngineSubsystem {
	struct FMulticastInlineDelegate OnDataDrivenCVarDelegate; // 0x30(0x10)
};

// Class Engine.DataDrivenConsoleVariableSettings
// Size: 0x70 (Inherited: 0x38)
struct UDataDrivenConsoleVariableSettings : UDeveloperSettings {
	char pad_38[0x18]; // 0x38(0x18)
	struct TArray<struct FDataDrivenConsoleVariable> CVarsArray; // 0x50(0x10)
	char pad_60[0x10]; // 0x60(0x10)
};

// Class Engine.WorldDataLayers
// Size: 0x4f8 (Inherited: 0x278)
struct AWorldDataLayers : AInfo {
	char pad_278[0xa0]; // 0x278(0xa0)
	struct TSet<struct UDataLayer*> WorldDataLayers; // 0x318(0x50)
	struct TArray<struct FName> RepActiveDataLayerNames; // 0x368(0x10)
	struct TArray<struct FName> RepLoadedDataLayerNames; // 0x378(0x10)
	char pad_388[0xa0]; // 0x388(0xa0)
	struct TArray<struct FName> RepEffectiveActiveDataLayerNames; // 0x428(0x10)
	struct TArray<struct FName> RepEffectiveLoadedDataLayerNames; // 0x438(0x10)
	char pad_448[0xb0]; // 0x448(0xb0)

	void OnRep_LoadedDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_LoadedDataLayerNames // (Final|Native|Protected) // @ game+0x4bcfe70
	void OnRep_EffectiveLoadedDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_EffectiveLoadedDataLayerNames // (Final|Native|Protected) // @ game+0x4bcfe50
	void OnRep_EffectiveActiveDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_EffectiveActiveDataLayerNames // (Final|Native|Protected) // @ game+0x4bcfe30
	void OnRep_ActiveDataLayerNames(); // Function Engine.WorldDataLayers.OnRep_ActiveDataLayerNames // (Final|Native|Protected) // @ game+0x4bcfe10
	void OnDataLayerRuntimeStateChanged(struct UDataLayer* InDataLayer, enum class EDataLayerRuntimeState InState); // Function Engine.WorldDataLayers.OnDataLayerRuntimeStateChanged // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x4bcfd00
};

// Class Engine.DataLayer
// Size: 0x58 (Inherited: 0x28)
struct UDataLayer : UObject {
	struct FName DataLayerLabel; // 0x28(0x08)
	char bIsRuntime : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	enum class EDataLayerRuntimeState InitialRuntimeState; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	struct FColor DebugColor; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UDataLayer* Parent; // 0x40(0x08)
	struct TArray<struct UDataLayer*> Children; // 0x48(0x10)

	bool IsVisible(); // Function Engine.DataLayer.IsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86950
	bool IsRuntime(); // Function Engine.DataLayer.IsRuntime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86930
	bool IsInitiallyVisible(); // Function Engine.DataLayer.IsInitiallyVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86950
	bool IsInitiallyActive(); // Function Engine.DataLayer.IsInitiallyActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86980
	bool IsEffectiveVisible(); // Function Engine.DataLayer.IsEffectiveVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86950
	bool IsDynamicallyLoaded(); // Function Engine.DataLayer.IsDynamicallyLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86930
	enum class EDataLayerState GetInitialState(); // Function Engine.DataLayer.GetInitialState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86810
	enum class EDataLayerRuntimeState GetInitialRuntimeState(); // Function Engine.DataLayer.GetInitialRuntimeState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86810
	struct FColor GetDebugColor(); // Function Engine.DataLayer.GetDebugColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x1fd82d0
	struct FName GetDataLayerLabel(); // Function Engine.DataLayer.GetDataLayerLabel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x186df80
	bool Equals(struct FActorDataLayer& ActorDataLayer); // Function Engine.DataLayer.Equals // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a85970
};

// Class Engine.DataLayerSubsystem
// Size: 0x90 (Inherited: 0x30)
struct UDataLayerSubsystem : UWorldSubsystem {
	struct FMulticastInlineDelegate OnDataLayerRuntimeStateChanged; // 0x30(0x10)
	char pad_40[0x50]; // 0x40(0x50)

	void SetDataLayerStateByLabel(struct FName& InDataLayerLabel, enum class EDataLayerState InState); // Function Engine.DataLayerSubsystem.SetDataLayerStateByLabel // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a86cd0
	void SetDataLayerState(struct FActorDataLayer& InDataLayer, enum class EDataLayerState InState); // Function Engine.DataLayerSubsystem.SetDataLayerState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a86bf0
	void SetDataLayerRuntimeStateByLabel(struct FName& InDataLayerLabel, enum class EDataLayerRuntimeState InState, bool bInIsRecursive); // Function Engine.DataLayerSubsystem.SetDataLayerRuntimeStateByLabel // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a86ad0
	void SetDataLayerRuntimeState(struct FActorDataLayer& InDataLayer, enum class EDataLayerRuntimeState InState, bool bInIsRecursive); // Function Engine.DataLayerSubsystem.SetDataLayerRuntimeState // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a869b0
	struct TSet<struct FName> GetLoadedDataLayerNames(); // Function Engine.DataLayerSubsystem.GetLoadedDataLayerNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86840
	enum class EDataLayerState GetDataLayerStateByLabel(struct FName& InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerStateByLabel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a861a0
	enum class EDataLayerState GetDataLayerState(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayerState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86100
	enum class EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(struct FName& InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerRuntimeStateByLabel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a861a0
	enum class EDataLayerRuntimeState GetDataLayerRuntimeState(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayerRuntimeState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86100
	struct UDataLayer* GetDataLayerFromName(struct FName InDataLayerName); // Function Engine.DataLayerSubsystem.GetDataLayerFromName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a86060
	struct UDataLayer* GetDataLayerFromLabel(struct FName InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerFromLabel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a85fc0
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(struct FName& InDataLayerLabel); // Function Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeStateByLabel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a85f20
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a85e80
	struct UDataLayer* GetDataLayer(struct FActorDataLayer& InDataLayer); // Function Engine.DataLayerSubsystem.GetDataLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a85de0
	struct TSet<struct FName> GetActiveDataLayerNames(); // Function Engine.DataLayerSubsystem.GetActiveDataLayerNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a85c10
};

// Class Engine.DataTableFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UDataTableFunctionLibrary : UBlueprintFunctionLibrary {

	void GetDataTableRowNames(struct UDataTable* table, struct TArray<struct FName>& OutRowNames); // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a86730
	bool GetDataTableRowFromName(struct UDataTable* table, struct FName RowName, struct FTableRowBase& OutRow); // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a863a0
	struct TArray<struct FString> GetDataTableColumnAsString(struct UDataTable* DataTable, struct FName PropertyName); // Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a86240
	void EvaluateCurveTableRow(struct UCurveTable* CurveTable, struct FName RowName, float InXY, enum class EEvaluateCurveTableResult& OutResult, float& OutXY, struct FString ContextString); // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a85a10
	bool DoesDataTableRowExist(struct UDataTable* table, struct FName RowName); // Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a858a0
};

// Class Engine.DebugCameraControllerSettings
// Size: 0x48 (Inherited: 0x38)
struct UDebugCameraControllerSettings : UDeveloperSettings {
	struct TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x38(0x10)
};

// Class Engine.DebugCameraHUD
// Size: 0x368 (Inherited: 0x368)
struct ADebugCameraHUD : AHUD {
};

// Class Engine.DebugDrawComponent
// Size: 0x540 (Inherited: 0x540)
struct UDebugDrawComponent : UPrimitiveComponent {
};

// Class Engine.DebugDrawService
// Size: 0x28 (Inherited: 0x28)
struct UDebugDrawService : UBlueprintFunctionLibrary {
};

// Class Engine.DecalActor
// Size: 0x280 (Inherited: 0x278)
struct ADecalActor : AActor {
	struct UDecalComponent* Decal; // 0x278(0x08)

	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8bb40
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a8b8a0
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x4a8b840
};

// Class Engine.DecalComponent
// Size: 0x300 (Inherited: 0x2b0)
struct UDecalComponent : USceneComponent {
	struct UMaterialInterface* DecalMaterial; // 0x2b0(0x08)
	int32_t SortOrder; // 0x2b8(0x04)
	float FadeScreenSize; // 0x2bc(0x04)
	float FadeStartDelay; // 0x2c0(0x04)
	float FadeDuration; // 0x2c4(0x04)
	float FadeInDuration; // 0x2c8(0x04)
	float FadeInStartDelay; // 0x2cc(0x04)
	char bDestroyOwnerAfterFade : 1; // 0x2d0(0x01)
	char pad_2D0_1 : 7; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct FVector DecalSize; // 0x2d8(0x18)
	char pad_2F0[0x10]; // 0x2f0(0x10)

	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8bf50
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8be50
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8bd30
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8bc60
	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8bbd0
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273200
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2272e40
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22733b0
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2273180
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22527e0
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x4a8b870
};

// Class Engine.DefaultPhysicsVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct ADefaultPhysicsVolume : APhysicsVolume {
};

// Class Engine.DemoNetConnection
// Size: 0x3290 (Inherited: 0x3240)
struct UDemoNetConnection : UNetConnection {
	char pad_3240[0x50]; // 0x3240(0x50)
};

// Class Engine.DemoNetDriver
// Size: 0x1260 (Inherited: 0x768)
struct UDemoNetDriver : UNetDriver {
	char pad_768[0x40]; // 0x768(0x40)
	struct TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0x7a8(0x50)
	char pad_7F8[0xa4]; // 0x7f8(0xa4)
	float CheckpointSaveMaxMSPerFrame; // 0x89c(0x04)
	char pad_8A0[0x20]; // 0x8a0(0x20)
	struct TArray<struct FMulticastRecordOptions> MulticastRecordOptions; // 0x8c0(0x10)
	struct TArray<struct APlayerController*> SpectatorControllers; // 0x8d0(0x10)
	char pad_8E0[0x980]; // 0x8e0(0x980)
};

// Class Engine.PendingNetGame
// Size: 0xc0 (Inherited: 0x28)
struct UPendingNetGame : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UNetDriver* NetDriver; // 0x30(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0x38(0x08)
	char pad_40[0x80]; // 0x40(0x80)
};

// Class Engine.DemoPendingNetGame
// Size: 0xc0 (Inherited: 0xc0)
struct UDemoPendingNetGame : UPendingNetGame {
};

// Class Engine.DestructibleInterface
// Size: 0x28 (Inherited: 0x28)
struct UDestructibleInterface : UInterface {
};

// Class Engine.TextureLODSettings
// Size: 0x38 (Inherited: 0x28)
struct UTextureLODSettings : UObject {
	struct TArray<struct FTextureLODGroup> TextureLODGroups; // 0x28(0x10)
};

// Class Engine.DeviceProfile
// Size: 0xb8 (Inherited: 0x38)
struct UDeviceProfile : UTextureLODSettings {
	struct FString DeviceType; // 0x38(0x10)
	struct FString BaseProfileName; // 0x48(0x10)
	struct UDeviceProfile* Parent; // 0x58(0x08)
	char pad_60[0x28]; // 0x60(0x28)
	struct TArray<struct FString> CVars; // 0x88(0x10)
	struct TArray<struct FDPMatchingRulestruct> MatchingRules; // 0x98(0x10)
	char pad_A8[0x10]; // 0xa8(0x10)
};

// Class Engine.DeviceProfileFragment
// Size: 0x38 (Inherited: 0x28)
struct UDeviceProfileFragment : UObject {
	struct TArray<struct FString> CVars; // 0x28(0x10)
};

// Class Engine.DeviceProfileManager
// Size: 0x90 (Inherited: 0x28)
struct UDeviceProfileManager : UObject {
	struct TArray<struct UDeviceProfile*> Profiles; // 0x28(0x10)
	struct TArray<struct UDeviceProfile*> BackupProfiles; // 0x38(0x10)
	char pad_48[0x48]; // 0x48(0x48)
};

// Class Engine.DialogueSoundWaveProxy
// Size: 0x188 (Inherited: 0x170)
struct UDialogueSoundWaveProxy : USoundBase {
	char pad_170[0x18]; // 0x170(0x18)
};

// Class Engine.DialogueVoice
// Size: 0x40 (Inherited: 0x28)
struct UDialogueVoice : UObject {
	enum class EGrammaticalGender Gender; // 0x28(0x01)
	enum class EGrammaticalNumber Plurality; // 0x29(0x01)
	char pad_2A[0x2]; // 0x2a(0x02)
	struct FGuid LocalizationGUID; // 0x2c(0x10)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DialogueWave
// Size: 0x70 (Inherited: 0x28)
struct UDialogueWave : UObject {
	char bMature : 1; // 0x28(0x01)
	char bOverride_SubtitleOverride : 1; // 0x28(0x01)
	char pad_28_2 : 6; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct FString SpokenText; // 0x30(0x10)
	struct FString SubtitleOverride; // 0x40(0x10)
	struct TArray<struct FDialogueContextMapping> ContextMappings; // 0x50(0x10)
	struct FGuid LocalizationGUID; // 0x60(0x10)
};

// Class Engine.Light
// Size: 0x288 (Inherited: 0x278)
struct ALight : AActor {
	struct ULightComponent* LightComponent; // 0x278(0x08)
	char bEnabled : 1; // 0x280(0x01)
	char pad_280_1 : 7; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)

	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e470
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b2dcd0
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2dbb0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2dab0
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.Light.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b2d8c0
	void SetEnabled(bool bSetEnabled); // Function Engine.Light.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d470
	void SetCastShadows(bool bNewValue); // Function Engine.Light.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d170
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d0f0
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.Light.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2cdd0
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled // (Native|Public) // @ game+0x2281e40
	bool IsEnabled(); // Function Engine.Light.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c4f0
	struct FLinearColor GetLightColor(); // Function Engine.Light.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c470
	float GetBrightness(); // Function Engine.Light.GetBrightness // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c3e0
};

// Class Engine.DirectionalLight
// Size: 0x288 (Inherited: 0x288)
struct ADirectionalLight : ALight {
};

// Class Engine.LightComponentBase
// Size: 0x2f0 (Inherited: 0x2b0)
struct ULightComponentBase : USceneComponent {
	struct FGuid LightGuid; // 0x2b0(0x10)
	float Brightness; // 0x2c0(0x04)
	float Intensity; // 0x2c4(0x04)
	struct FColor LightColor; // 0x2c8(0x04)
	char bAffectsWorld : 1; // 0x2cc(0x01)
	char CastShadows : 1; // 0x2cc(0x01)
	char CastStaticShadows : 1; // 0x2cc(0x01)
	char CastDynamicShadows : 1; // 0x2cc(0x01)
	char bAffectTranslucentLighting : 1; // 0x2cc(0x01)
	char bTransmission : 1; // 0x2cc(0x01)
	char bCastVolumetricShadow : 1; // 0x2cc(0x01)
	char bCastDeepShadow : 1; // 0x2cc(0x01)
	char bCastRaytracedShadow : 1; // 0x2cd(0x01)
	char pad_2CD_1 : 7; // 0x2cd(0x01)
	char pad_2CE[0x2]; // 0x2ce(0x02)
	enum class ECastRayTracedShadow CastRaytracedShadow; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	char bAffectReflection : 1; // 0x2d4(0x01)
	char bAffectGlobalIllumination : 1; // 0x2d4(0x01)
	char pad_2D4_2 : 6; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	float DeepShadowLayerDistribution; // 0x2d8(0x04)
	float IndirectLightingIntensity; // 0x2dc(0x04)
	float VolumetricScatteringIntensity; // 0x2e0(0x04)
	int32_t SamplesPerPixel; // 0x2e4(0x04)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel // (Final|Native|Public|BlueprintCallable) // @ game+0x4b319b0
	void SetCastVolumetricShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b318a0
	void SetCastShadows(bool bNewValue); // Function Engine.LightComponentBase.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x4b31810
	void SetCastRaytracedShadows(enum class ECastRayTracedShadow bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x4b31790
	void SetCastRaytracedShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b31700
	void SetCastDeepShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b31670
	void SetAffectReflection(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x4b31560
	void SetAffectGlobalIllumination(bool bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination // (Final|Native|Public|BlueprintCallable) // @ game+0x4b314d0
	struct FLinearColor GetLightColor(); // Function Engine.LightComponentBase.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b31360
};

// Class Engine.LightComponent
// Size: 0x3f0 (Inherited: 0x2f0)
struct ULightComponent : ULightComponentBase {
	float Temperature; // 0x2e8(0x04)
	float MaxDrawDistance; // 0x2ec(0x04)
	float MaxDistanceFadeRange; // 0x2f0(0x04)
	char bUseTemperature : 1; // 0x2f4(0x01)
	int32_t ShadowMapChannel; // 0x2f8(0x04)
	float MinRoughness; // 0x300(0x04)
	float SpecularScale; // 0x304(0x04)
	float ShadowResolutionScale; // 0x308(0x04)
	float ShadowBias; // 0x30c(0x04)
	float ShadowSlopeBias; // 0x310(0x04)
	float ShadowSharpen; // 0x314(0x04)
	float ContactShadowLength; // 0x318(0x04)
	char ContactShadowLengthInWS : 1; // 0x31c(0x01)
	char InverseSquaredFalloff : 1; // 0x31c(0x01)
	char CastTranslucentShadows : 1; // 0x31c(0x01)
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x31c(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x31c(0x01)
	char bForceCachedShadowsForMovablePrimitives : 1; // 0x31c(0x01)
	char pad_31C_7 : 1; // 0x31c(0x01)
	char pad_31D[0x3]; // 0x31d(0x03)
	struct FLightingChannels LightingChannels; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
	struct UMaterialInterface* LightFunctionMaterial; // 0x328(0x08)
	struct FVector LightFunctionScale; // 0x330(0x18)
	struct UTextureLightProfile* IESTexture; // 0x348(0x08)
	char bUseIESBrightness : 1; // 0x350(0x01)
	char pad_350_1 : 7; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	float IESBrightnessScale; // 0x354(0x04)
	float LightFunctionFadeDistance; // 0x358(0x04)
	float DisabledBrightness; // 0x35c(0x04)
	char bEnableLightShaftBloom : 1; // 0x360(0x01)
	char pad_360_1 : 7; // 0x360(0x01)
	char pad_361[0x3]; // 0x361(0x03)
	float BloomScale; // 0x364(0x04)
	float BloomThreshold; // 0x368(0x04)
	float BloomMaxBrightness; // 0x36c(0x04)
	struct FColor BloomTint; // 0x370(0x04)
	bool bUseRayTracedDistanceFieldShadows; // 0x374(0x01)
	char pad_375[0x3]; // 0x375(0x03)
	float RayStartOffsetDepthScale; // 0x378(0x04)
	char pad_37C[0x74]; // 0x37c(0x74)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e3f0
	void SetUseTemperature(bool bNewValue); // Function Engine.LightComponent.SetUseTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e360
	void SetUseIESBrightness(bool bNewValue); // Function Engine.LightComponent.SetUseIESBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e2d0
	void SetTransmission(bool bNewValue); // Function Engine.LightComponent.SetTransmission // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e240
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e1c0
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e140
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e030
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2dfb0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.LightComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2ddf0
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b2dd60
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2dc40
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2db30
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2da30
	void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB); // Function Engine.LightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b2d950
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d720
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d6a0
	void SetIESTexture(struct UTextureLightProfile* NewValue); // Function Engine.LightComponent.SetIESTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d610
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d590
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d500
	void SetEnableLightShaftBloom(bool bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d3e0
	void SetBloomTint(struct FColor NewValue); // Function Engine.LightComponent.SetBloomTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b2d070
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2cff0
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2cf70
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2cef0
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2ce60
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2cd40
};

// Class Engine.DirectionalLightComponent
// Size: 0x4c0 (Inherited: 0x3f0)
struct UDirectionalLightComponent : ULightComponent {
	float ShadowCascadeBiasDistribution; // 0x3f0(0x04)
	char bEnableLightShaftOcclusion : 1; // 0x3f4(0x01)
	char pad_3F4_1 : 7; // 0x3f4(0x01)
	char pad_3F5[0x3]; // 0x3f5(0x03)
	float OcclusionMaskDarkness; // 0x3f8(0x04)
	float OcclusionDepthRange; // 0x3fc(0x04)
	struct FVector LightShaftOverrideDirection; // 0x400(0x18)
	float WholeSceneDynamicShadowRadius; // 0x418(0x04)
	float DynamicShadowDistanceMovableLight; // 0x41c(0x04)
	float DynamicShadowDistanceStationaryLight; // 0x420(0x04)
	int32_t DynamicShadowCascades; // 0x424(0x04)
	float CascadeDistributionExponent; // 0x428(0x04)
	float CascadeTransitionFraction; // 0x42c(0x04)
	float ShadowDistanceFadeoutFraction; // 0x430(0x04)
	char bUseInsetShadowsForMovableObjects : 1; // 0x434(0x01)
	char pad_434_1 : 7; // 0x434(0x01)
	char pad_435[0x3]; // 0x435(0x03)
	int32_t FarShadowCascadeCount; // 0x438(0x04)
	float FarShadowDistance; // 0x43c(0x04)
	float DistanceFieldShadowDistance; // 0x440(0x04)
	float LightSourceAngle; // 0x444(0x04)
	float LightSourceSoftAngle; // 0x448(0x04)
	float ShadowSourceAngleFactor; // 0x44c(0x04)
	float TraceDistance; // 0x450(0x04)
	char bUsedAsAtmosphereSunLight : 1; // 0x454(0x01)
	char bAtmosphereSunLight : 1; // 0x454(0x01)
	char pad_454_2 : 6; // 0x454(0x01)
	char pad_455[0x3]; // 0x455(0x03)
	int32_t AtmosphereSunLightIndex; // 0x458(0x04)
	struct FLinearColor AtmosphereSunDiskColorScale; // 0x45c(0x10)
	char bPerPixelAtmosphereTransmittance : 1; // 0x46c(0x01)
	char bCastShadowsOnClouds : 1; // 0x46c(0x01)
	char bCastShadowsOnAtmosphere : 1; // 0x46c(0x01)
	char bCastCloudShadows : 1; // 0x46c(0x01)
	char pad_46C_4 : 4; // 0x46c(0x01)
	char pad_46D[0x3]; // 0x46d(0x03)
	float CloudShadowStrength; // 0x470(0x04)
	float CloudShadowOnAtmosphereStrength; // 0x474(0x04)
	float CloudShadowOnSurfaceStrength; // 0x478(0x04)
	float CloudShadowDepthBias; // 0x47c(0x04)
	float CloudShadowExtent; // 0x480(0x04)
	float CloudShadowMapResolutionScale; // 0x484(0x04)
	float CloudShadowRaySampleCountScale; // 0x488(0x04)
	struct FLinearColor CloudScatteredLuminanceScale; // 0x48c(0x10)
	struct FLightmassDirectionalLightSettings LightmassSettings; // 0x49c(0x10)
	char bCastModulatedShadows : 1; // 0x4ac(0x01)
	char pad_4AC_1 : 7; // 0x4ac(0x01)
	char pad_4AD[0x3]; // 0x4ad(0x03)
	struct FColor ModulatedShadowColor; // 0x4b0(0x04)
	float ShadowAmount; // 0x4b4(0x04)
	char pad_4B8[0x8]; // 0x4b8(0x08)

	void SetShadowSourceAngleFactor(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowSourceAngleFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8ee50
	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8edd0
	void SetShadowCascadeBiasDistribution(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowCascadeBiasDistribution // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8ed50
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8ecd0
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8ec50
	void SetOcclusionDepthRange(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionDepthRange // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8ebd0
	void SetLightSourceSoftAngle(float NewValue); // Function Engine.DirectionalLightComponent.SetLightSourceSoftAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8eb50
	void SetLightSourceAngle(float NewValue); // Function Engine.DirectionalLightComponent.SetLightSourceAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8ead0
	void SetLightShaftOverrideDirection(struct FVector NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a8ea40
	void SetEnableLightShaftOcclusion(bool bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e9b0
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e930
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e8b0
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e820
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e7a0
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e720
	void SetAtmosphereSunLightIndex(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e690
	void SetAtmosphereSunLight(bool bNewValue); // Function Engine.DirectionalLightComponent.SetAtmosphereSunLight // (Final|Native|Public|BlueprintCallable) // @ game+0x4a8e600
};

// Class Engine.Distribution
// Size: 0x30 (Inherited: 0x28)
struct UDistribution : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.DistributionFloat
// Size: 0x38 (Inherited: 0x30)
struct UDistributionFloat : UDistribution {
	char bCanBeBaked : 1; // 0x30(0x01)
	char pad_30_1 : 1; // 0x30(0x01)
	char bBakedDataSuccesfully : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.DistributionFloatConstant
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatConstant : UDistributionFloat {
	float Constant; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DistributionFloatConstantCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatConstantCurve : UDistributionFloat {
	struct FInterpCurveFloat ConstantCurve; // 0x38(0x18)
};

// Class Engine.DistributionFloatParameterBase
// Size: 0x60 (Inherited: 0x40)
struct UDistributionFloatParameterBase : UDistributionFloatConstant {
	struct FName ParameterName; // 0x40(0x08)
	float MinInput; // 0x48(0x04)
	float MaxInput; // 0x4c(0x04)
	float MinOutput; // 0x50(0x04)
	float MaxOutput; // 0x54(0x04)
	enum class DistributionParamMode ParamMode; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.DistributionFloatParticleParameter
// Size: 0x60 (Inherited: 0x60)
struct UDistributionFloatParticleParameter : UDistributionFloatParameterBase {
};

// Class Engine.DistributionFloatUniform
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatUniform : UDistributionFloat {
	float Min; // 0x38(0x04)
	float Max; // 0x3c(0x04)
};

// Class Engine.DistributionFloatUniformCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatUniformCurve : UDistributionFloat {
	struct FInterpCurveVector2D ConstantCurve; // 0x38(0x18)
};

// Class Engine.DistributionVector
// Size: 0x38 (Inherited: 0x30)
struct UDistributionVector : UDistribution {
	char bCanBeBaked : 1; // 0x30(0x01)
	char bIsDirty : 1; // 0x30(0x01)
	char bBakedDataSuccesfully : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.DistributionVectorConstant
// Size: 0x58 (Inherited: 0x38)
struct UDistributionVectorConstant : UDistributionVector {
	struct FVector Constant; // 0x38(0x18)
	char bLockAxes : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.DistributionVectorConstantCurve
// Size: 0x58 (Inherited: 0x38)
struct UDistributionVectorConstantCurve : UDistributionVector {
	struct FInterpCurveVector ConstantCurve; // 0x38(0x18)
	char bLockAxes : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.DistributionVectorParameterBase
// Size: 0xc8 (Inherited: 0x58)
struct UDistributionVectorParameterBase : UDistributionVectorConstant {
	struct FName ParameterName; // 0x58(0x08)
	struct FVector MinInput; // 0x60(0x18)
	struct FVector MaxInput; // 0x78(0x18)
	struct FVector MinOutput; // 0x90(0x18)
	struct FVector MaxOutput; // 0xa8(0x18)
	enum class DistributionParamMode ParamModes[0x3]; // 0xc0(0x03)
	char pad_C3[0x5]; // 0xc3(0x05)
};

// Class Engine.DistributionVectorParticleParameter
// Size: 0xc8 (Inherited: 0xc8)
struct UDistributionVectorParticleParameter : UDistributionVectorParameterBase {
};

// Class Engine.DistributionVectorUniform
// Size: 0x78 (Inherited: 0x38)
struct UDistributionVectorUniform : UDistributionVector {
	struct FVector Max; // 0x38(0x18)
	struct FVector Min; // 0x50(0x18)
	char bLockAxes : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x3]; // 0x69(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x6c(0x01)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x6d(0x03)
	char bUseExtremes : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.DistributionVectorUniformCurve
// Size: 0x60 (Inherited: 0x38)
struct UDistributionVectorUniformCurve : UDistributionVector {
	struct FInterpCurveTwoVectors ConstantCurve; // 0x38(0x18)
	char bLockAxes1 : 1; // 0x50(0x01)
	char bLockAxes2 : 1; // 0x50(0x01)
	char pad_50_2 : 6; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes[0x2]; // 0x54(0x02)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x56(0x03)
	char pad_59[0x3]; // 0x59(0x03)
	char bUseExtremes : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
};

// Class Engine.DocumentationActor
// Size: 0x280 (Inherited: 0x278)
struct ADocumentationActor : AActor {
	char pad_278[0x8]; // 0x278(0x08)
};

// Class Engine.DPICustomScalingRule
// Size: 0x28 (Inherited: 0x28)
struct UDPICustomScalingRule : UObject {
};

// Class Engine.DrawFrustumComponent
// Size: 0x560 (Inherited: 0x540)
struct UDrawFrustumComponent : UPrimitiveComponent {
	bool bFrustumEnabled; // 0x540(0x01)
	char pad_541[0x3]; // 0x541(0x03)
	struct FColor FrustumColor; // 0x544(0x04)
	float FrustumAngle; // 0x548(0x04)
	float FrustumAspectRatio; // 0x54c(0x04)
	float FrustumStartDist; // 0x550(0x04)
	float FrustumEndDist; // 0x554(0x04)
	struct UTexture* Texture; // 0x558(0x08)
};

// Class Engine.SphereComponent
// Size: 0x560 (Inherited: 0x560)
struct USphereComponent : UShapeComponent {
	float SphereRadius; // 0x558(0x04)

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x4bb6a80
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a714b0
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a71430
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb49f0
};

// Class Engine.DrawSphereComponent
// Size: 0x560 (Inherited: 0x560)
struct UDrawSphereComponent : USphereComponent {
};

// Class Engine.GraphNodeContextMenuContext
// Size: 0x50 (Inherited: 0x28)
struct UGraphNodeContextMenuContext : UObject {
	struct UBlueprint* Blueprint; // 0x28(0x08)
	struct UEdGraph* Graph; // 0x30(0x08)
	struct UEdGraphNode* Node; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
	bool bIsDebugging; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.EdGraphNode
// Size: 0x98 (Inherited: 0x28)
struct UEdGraphNode : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> DeprecatedPins; // 0x38(0x10)
	int32_t NodePosX; // 0x48(0x04)
	int32_t NodePosY; // 0x4c(0x04)
	int32_t NodeWidth; // 0x50(0x04)
	int32_t NodeHeight; // 0x54(0x04)
	enum class ENodeAdvancedPins AdvancedPinDisplay; // 0x58(0x01)
	enum class ENodeEnabledState EnabledState; // 0x59(0x01)
	char pad_5A[0x1]; // 0x5a(0x01)
	char pad_5B_0 : 1; // 0x5b(0x01)
	char bDisplayAsDisabled : 1; // 0x5b(0x01)
	char bUserSetEnabledState : 1; // 0x5b(0x01)
	char pad_5B_3 : 1; // 0x5b(0x01)
	char bHasCompilerMessage : 1; // 0x5b(0x01)
	char pad_5B_5 : 3; // 0x5b(0x01)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FString NodeComment; // 0x60(0x10)
	int32_t ErrorType; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct FString ErrorMsg; // 0x78(0x10)
	struct FGuid NodeGuid; // 0x88(0x10)
};

// Class Engine.EdGraphNode_Documentation
// Size: 0xb8 (Inherited: 0x98)
struct UEdGraphNode_Documentation : UEdGraphNode {
	struct FString Link; // 0x98(0x10)
	struct FString Excerpt; // 0xa8(0x10)
};

// Class Engine.EdGraphPin_Deprecated
// Size: 0x118 (Inherited: 0x28)
struct UEdGraphPin_Deprecated : UObject {
	struct FString PinName; // 0x28(0x10)
	struct FString PinToolTip; // 0x38(0x10)
	enum class EEdGraphPinDirection Direction; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct FEdGraphPinType PinType; // 0x50(0x58)
	struct FString DefaultValue; // 0xa8(0x10)
	struct FString AutogeneratedDefaultValue; // 0xb8(0x10)
	struct UObject* DefaultObject; // 0xc8(0x08)
	struct FText DefaultTextValue; // 0xd0(0x18)
	struct TArray<struct UEdGraphPin_Deprecated*> LinkedTo; // 0xe8(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> SubPins; // 0xf8(0x10)
	struct UEdGraphPin_Deprecated* ParentPin; // 0x108(0x08)
	struct UEdGraphPin_Deprecated* ReferencePassThroughConnection; // 0x110(0x08)
};

// Class Engine.EdGraphSchema
// Size: 0x28 (Inherited: 0x28)
struct UEdGraphSchema : UObject {
};

// Class Engine.Emitter
// Size: 0x2c8 (Inherited: 0x278)
struct AEmitter : AActor {
	struct UParticleSystemComponent* ParticleSystemComponent; // 0x278(0x08)
	char bDestroyOnSystemFinish : 1; // 0x280(0x01)
	char bPostUpdateTickGroup : 1; // 0x280(0x01)
	char bCurrentlyActive : 1; // 0x280(0x01)
	char pad_280_3 : 5; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x288(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x298(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x2b8(0x10)

	void ToggleActive(); // Function Engine.Emitter.ToggleActive // (Final|Native|Public|BlueprintCallable) // @ game+0x4a92660
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.Emitter.SetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a92580
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.Emitter.SetTemplate // (Native|Public|BlueprintCallable) // @ game+0x106d620
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.Emitter.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x4a924b0
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x4a923e0
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.Emitter.SetColorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a92310
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.Emitter.SetActorParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x4a92240
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive // (Native|Public) // @ game+0x106d600
	void OnParticleSystemFinished(struct UParticleSystemComponent* FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished // (Native|Public) // @ game+0x4a921b0
	bool IsActive(); // Function Engine.Emitter.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a92180
	void Deactivate(); // Function Engine.Emitter.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x4a92160
	void Activate(); // Function Engine.Emitter.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x4a92140
};

// Class Engine.EmitterCameraLensEffectBase
// Size: 0x360 (Inherited: 0x2c8)
struct AEmitterCameraLensEffectBase : AEmitter {
	char pad_2C8[0x8]; // 0x2c8(0x08)
	struct UParticleSystem* PS_CameraEffect; // 0x2d0(0x08)
	struct APlayerCameraManager* BaseCamera; // 0x2d8(0x08)
	struct FTransform RelativeTransform; // 0x2e0(0x60)
	float BaseFOV; // 0x340(0x04)
	char bAllowMultipleInstances : 1; // 0x344(0x01)
	char bResetWhenRetriggered : 1; // 0x344(0x01)
	char pad_344_2 : 6; // 0x344(0x01)
	char pad_345[0x3]; // 0x345(0x03)
	struct TArray<struct AActor*> EmittersToTreatAsSame; // 0x348(0x10)
	float DistFromCamera; // 0x358(0x04)
	char pad_35C[0x4]; // 0x35c(0x04)
};

// Class Engine.ViewModeUtils
// Size: 0x28 (Inherited: 0x28)
struct UViewModeUtils : UObject {
};

// Class Engine.EngineBaseTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineBaseTypes : UObject {
};

// Class Engine.EngineElementsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UEngineElementsLibrary : UBlueprintFunctionLibrary {
};

// Class Engine.EngineHandlerComponentFactory
// Size: 0x28 (Inherited: 0x28)
struct UEngineHandlerComponentFactory : UHandlerComponentFactory {
};

// Class Engine.LocalMessage
// Size: 0x28 (Inherited: 0x28)
struct ULocalMessage : UObject {
};

// Class Engine.EngineMessage
// Size: 0xa8 (Inherited: 0x28)
struct UEngineMessage : ULocalMessage {
	struct FString FailedPlaceMessage; // 0x28(0x10)
	struct FString MaxedOutMessage; // 0x38(0x10)
	struct FString EnteredMessage; // 0x48(0x10)
	struct FString LeftMessage; // 0x58(0x10)
	struct FString GlobalNameChange; // 0x68(0x10)
	struct FString SpecEnteredMessage; // 0x78(0x10)
	struct FString NewPlayerMessage; // 0x88(0x10)
	struct FString NewSpecMessage; // 0x98(0x10)
};

// Class Engine.EngineTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineTypes : UObject {
};

// Class Engine.ExponentialHeightFog
// Size: 0x288 (Inherited: 0x278)
struct AExponentialHeightFog : AInfo {
	struct UExponentialHeightFogComponent* Component; // 0x278(0x08)
	char bEnabled : 1; // 0x280(0x01)
	char pad_280_1 : 7; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)

	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled // (Native|Public) // @ game+0x2281e40
};

// Class Engine.ExponentialHeightFogComponent
// Size: 0x370 (Inherited: 0x2b0)
struct UExponentialHeightFogComponent : USceneComponent {
	float FogDensity; // 0x2b0(0x04)
	float FogHeightFalloff; // 0x2b4(0x04)
	struct FExponentialHeightFogData SecondFogData; // 0x2b8(0x0c)
	struct FLinearColor FogInscatteringColor; // 0x2c4(0x10)
	struct FLinearColor FogInscatteringLuminance; // 0x2d4(0x10)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UTextureCube* InscatteringColorCubemap; // 0x2e8(0x08)
	float InscatteringColorCubemapAngle; // 0x2f0(0x04)
	struct FLinearColor InscatteringTextureTint; // 0x2f4(0x10)
	float FullyDirectionalInscatteringColorDistance; // 0x304(0x04)
	float NonDirectionalInscatteringColorDistance; // 0x308(0x04)
	float DirectionalInscatteringExponent; // 0x30c(0x04)
	float DirectionalInscatteringStartDistance; // 0x310(0x04)
	struct FLinearColor DirectionalInscatteringColor; // 0x314(0x10)
	struct FLinearColor DirectionalInscatteringLuminance; // 0x324(0x10)
	float FogMaxOpacity; // 0x334(0x04)
	float StartDistance; // 0x338(0x04)
	float FogCutoffDistance; // 0x33c(0x04)
	bool bEnableVolumetricFog; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float VolumetricFogScatteringDistribution; // 0x344(0x04)
	struct FColor VolumetricFogAlbedo; // 0x348(0x04)
	struct FLinearColor VolumetricFogEmissive; // 0x34c(0x10)
	float VolumetricFogExtinctionScale; // 0x35c(0x04)
	float VolumetricFogDistance; // 0x360(0x04)
	float VolumetricFogStaticLightingScatteringIntensity; // 0x364(0x04)
	bool bOverrideLightColorsWithFogInscatteringColors; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)

	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9b4a0
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9b420
	void SetVolumetricFogEmissive(struct FLinearColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a9b390
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9b310
	void SetVolumetricFogAlbedo(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a9b290
	void SetVolumetricFog(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9b200
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9b180
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9b100
	void SetInscatteringTextureTint(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a9b070
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9aff0
	void SetInscatteringColorCubemap(struct UTextureCube* Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9af60
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9aee0
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9add0
	void SetFogInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a9ad40
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9acc0
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9ac40
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9abc0
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9ab40
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9aac0
	void SetDirectionalInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4a9aa30
};

// Class Engine.Exporter
// Size: 0x78 (Inherited: 0x28)
struct UExporter : UObject {
	struct UObject* SupportedClass; // 0x28(0x08)
	struct UObject* ExportRootScope; // 0x30(0x08)
	struct TArray<struct FString> FormatExtension; // 0x38(0x10)
	struct TArray<struct FString> FormatDescription; // 0x48(0x10)
	int32_t PreferredFormatIndex; // 0x58(0x04)
	int32_t TextIndent; // 0x5c(0x04)
	char bText : 1; // 0x60(0x01)
	char bSelectedOnly : 1; // 0x60(0x01)
	char bForceFileOperations : 1; // 0x60(0x01)
	char pad_60_3 : 5; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct UAssetExportTask* ExportTask; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	bool ScriptRunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.ScriptRunAssetExportTask // (Event|Public|BlueprintEvent) // @ game+0x2552560
	bool RunAssetExportTasks(struct TArray<struct UAssetExportTask*>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a9a980
	bool RunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.RunAssetExportTask // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x9fa6a0
};

// Class Engine.FloatingPawnMovement
// Size: 0x178 (Inherited: 0x160)
struct UFloatingPawnMovement : UPawnMovementComponent {
	float MaxSpeed; // 0x160(0x04)
	float Acceleration; // 0x164(0x04)
	float Deceleration; // 0x168(0x04)
	float TurningBoost; // 0x16c(0x04)
	char bPositionCorrected : 1; // 0x170(0x01)
	char pad_170_1 : 7; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
};

// Class Engine.Font
// Size: 0x1d0 (Inherited: 0x28)
struct UFont : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class EFontCacheType FontCacheType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FFontCharacter> Characters; // 0x38(0x10)
	struct TArray<struct UTexture2D*> Textures; // 0x48(0x10)
	int32_t IsRemapped; // 0x58(0x04)
	float EmScale; // 0x5c(0x04)
	float Ascent; // 0x60(0x04)
	float Descent; // 0x64(0x04)
	float Leading; // 0x68(0x04)
	int32_t Kerning; // 0x6c(0x04)
	struct FFontImportOptionsData ImportOptions; // 0x70(0xb0)
	int32_t NumCharacters; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct TArray<int32_t> MaxCharHeight; // 0x128(0x10)
	float ScalingFactor; // 0x138(0x04)
	int32_t LegacyFontSize; // 0x13c(0x04)
	struct FName LegacyFontName; // 0x140(0x08)
	struct FCompositeFont CompositeFont; // 0x148(0x38)
	char pad_180[0x50]; // 0x180(0x50)
};

// Class Engine.FontFace
// Size: 0x58 (Inherited: 0x28)
struct UFontFace : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString SourceFilename; // 0x30(0x10)
	enum class EFontHinting Hinting; // 0x40(0x01)
	enum class EFontLoadingPolicy LoadingPolicy; // 0x41(0x01)
	enum class EFontLayoutMethod LayoutMethod; // 0x42(0x01)
	char pad_43[0x15]; // 0x43(0x15)
};

// Class Engine.FontImportOptions
// Size: 0xd8 (Inherited: 0x28)
struct UFontImportOptions : UObject {
	struct FFontImportOptionsData Data; // 0x28(0xb0)
};

// Class Engine.ForceFeedbackAttenuation
// Size: 0xf0 (Inherited: 0x28)
struct UForceFeedbackAttenuation : UObject {
	struct FForceFeedbackAttenuationSettings Attenuation; // 0x28(0xc8)
};

// Class Engine.ForceFeedbackComponent
// Size: 0x3b0 (Inherited: 0x2b0)
struct UForceFeedbackComponent : USceneComponent {
	struct UForceFeedbackEffect* ForceFeedbackEffect; // 0x2b0(0x08)
	char bAutoDestroy : 1; // 0x2b8(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x2b8(0x01)
	char bLooping : 1; // 0x2b8(0x01)
	char bIgnoreTimeDilation : 1; // 0x2b8(0x01)
	char bOverrideAttenuation : 1; // 0x2b8(0x01)
	char pad_2B8_5 : 3; // 0x2b8(0x01)
	char pad_2B9[0x3]; // 0x2b9(0x03)
	float IntensityMultiplier; // 0x2bc(0x04)
	struct UForceFeedbackAttenuation* AttenuationSettings; // 0x2c0(0x08)
	struct FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x2c8(0xc8)
	struct FMulticastInlineDelegate OnForceFeedbackFinished; // 0x390(0x10)
	char pad_3A0[0x10]; // 0x3a0(0x10)

	void Stop(); // Function Engine.ForceFeedbackComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x4a9b520
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x1fa8240
	void SetForceFeedbackEffect(struct UForceFeedbackEffect* NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x4a9ae50
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x402d0c0
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4a9a850
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4a9a720
};

// Class Engine.ForceFeedbackEffect
// Size: 0x40 (Inherited: 0x28)
struct UForceFeedbackEffect : UObject {
	struct TArray<struct FForceFeedbackChannelDetails> ChannelDetails; // 0x28(0x10)
	float Duration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.GameNetworkManager
// Size: 0x328 (Inherited: 0x278)
struct AGameNetworkManager : AInfo {
	float BadPacketLossThreshold; // 0x278(0x04)
	float SeverePacketLossThreshold; // 0x27c(0x04)
	int32_t BadPingThreshold; // 0x280(0x04)
	int32_t SeverePingThreshold; // 0x284(0x04)
	int32_t AdjustedNetSpeed; // 0x288(0x04)
	float LastNetSpeedUpdateTime; // 0x28c(0x04)
	int32_t TotalNetBandwidth; // 0x290(0x04)
	int32_t MinDynamicBandwidth; // 0x294(0x04)
	int32_t MaxDynamicBandwidth; // 0x298(0x04)
	char bIsStandbyCheckingEnabled : 1; // 0x29c(0x01)
	char bHasStandbyCheatTriggered : 1; // 0x29c(0x01)
	char pad_29C_2 : 6; // 0x29c(0x01)
	char pad_29D[0x3]; // 0x29d(0x03)
	float StandbyRxCheatTime; // 0x2a0(0x04)
	float StandbyTxCheatTime; // 0x2a4(0x04)
	float PercentMissingForRxStandby; // 0x2a8(0x04)
	float PercentMissingForTxStandby; // 0x2ac(0x04)
	float PercentForBadPing; // 0x2b0(0x04)
	float JoinInProgressStandbyWaitTime; // 0x2b4(0x04)
	float MoveRepSize; // 0x2b8(0x04)
	float MAXPOSITIONERRORSQUARED; // 0x2bc(0x04)
	float MAXNEARZEROVELOCITYSQUARED; // 0x2c0(0x04)
	float CLIENTADJUSTUPDATECOST; // 0x2c4(0x04)
	float MAXCLIENTUPDATEINTERVAL; // 0x2c8(0x04)
	float MaxClientForcedUpdateDuration; // 0x2cc(0x04)
	float ServerForcedUpdateHitchThreshold; // 0x2d0(0x04)
	float ServerForcedUpdateHitchCooldown; // 0x2d4(0x04)
	float MaxMoveDeltaTime; // 0x2d8(0x04)
	float MaxClientSmoothingDeltaTime; // 0x2dc(0x04)
	float ClientNetSendMoveDeltaTime; // 0x2e0(0x04)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x2e4(0x04)
	float ClientNetSendMoveDeltaTimeStationary; // 0x2e8(0x04)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x2ec(0x04)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x2f0(0x04)
	bool ClientAuthorativePosition; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	float ClientErrorUpdateRateLimit; // 0x2f8(0x04)
	float ClientNetCamUpdateDeltaTime; // 0x2fc(0x04)
	float ClientNetCamUpdatePositionLimit; // 0x300(0x04)
	bool bMovementTimeDiscrepancyDetection; // 0x304(0x01)
	bool bMovementTimeDiscrepancyResolution; // 0x305(0x01)
	char pad_306[0x2]; // 0x306(0x02)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x308(0x04)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x30c(0x04)
	float MovementTimeDiscrepancyResolutionRate; // 0x310(0x04)
	float MovementTimeDiscrepancyDriftAllowance; // 0x314(0x04)
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x318(0x01)
	bool bUseDistanceBasedRelevancy; // 0x319(0x01)
	char pad_31A[0xe]; // 0x31a(0x0e)
};

// Class Engine.GameplayStatics
// Size: 0x28 (Inherited: 0x28)
struct UGameplayStatics : UBlueprintFunctionLibrary {

	void UnRetainAllSoundsInSoundClass(struct USoundClass* InSoundClass); // Function Engine.GameplayStatics.UnRetainAllSoundsInSoundClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aab590
	void UnloadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aab780
	void UnloadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aab610
	bool SuggestProjectileVelocity_CustomArc(struct UObject* WorldContextObject, struct FVector& OutLaunchVelocity, struct FVector StartPos, struct FVector EndPos, float OverrideGravityZ, float ArcParam); // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aab390
	struct UAudioComponent* SpawnSoundAttached(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aaaf90
	struct UAudioComponent* SpawnSoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aaac80
	struct UAudioComponent* SpawnSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x4aaaa20
	struct UObject* SpawnObject(struct UObject* ObjectClass, struct UObject* Outer); // Function Engine.GameplayStatics.SpawnObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aaa950
	struct UForceFeedbackComponent* SpawnForceFeedbackAttached(struct UForceFeedbackEffect* ForceFeedbackEffect, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aaa5b0
	struct UForceFeedbackComponent* SpawnForceFeedbackAtLocation(struct UObject* WorldContextObject, struct UForceFeedbackEffect* ForceFeedbackEffect, struct FVector Location, struct FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aaa2f0
	struct UParticleSystemComponent* SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function Engine.GameplayStatics.SpawnEmitterAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa9fd0
	struct UParticleSystemComponent* SpawnEmitterAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // Function Engine.GameplayStatics.SpawnEmitterAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa9d40
	struct UAudioComponent* SpawnDialogueAttached(struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAttached // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa9930
	struct UAudioComponent* SpawnDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa9610
	struct UAudioComponent* SpawnDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4aa93e0
	struct UDecalComponent* SpawnDecalAttached(struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAttached // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa8f30
	struct UDecalComponent* SpawnDecalAtLocation(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct FVector Location, struct FRotator Rotation, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAtLocation // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa8d20
	void SetWorldOriginLocation(struct UObject* WorldContextObject, struct FIntVector NewLocation); // Function Engine.GameplayStatics.SetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa8bb0
	void SetViewportMouseCaptureMode(struct UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode); // Function Engine.GameplayStatics.SetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8af0
	void SetSubtitlesEnabled(bool bEnabled); // Function Engine.GameplayStatics.SetSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8a70
	void SetSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // Function Engine.GameplayStatics.SetSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8850
	void SetSoundClassDistanceScale(struct UObject* WorldContextObject, struct USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // Function Engine.GameplayStatics.SetSoundClassDistanceScale // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8700
	void SetPlayerControllerID(struct APlayerController* Player, int32_t ControllerId); // Function Engine.GameplayStatics.SetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8640
	void SetMaxAudioChannelsScaled(struct UObject* WorldContextObject, float MaxChannelCountScale); // Function Engine.GameplayStatics.SetMaxAudioChannelsScaled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8580
	void SetGlobalTimeDilation(struct UObject* WorldContextObject, float TimeDilation); // Function Engine.GameplayStatics.SetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa84c0
	void SetGlobalPitchModulation(struct UObject* WorldContextObject, float PitchModulation, float TimeSec); // Function Engine.GameplayStatics.SetGlobalPitchModulation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x4aa83c0
	void SetGlobalListenerFocusParameters(struct UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8120
	bool SetGamePaused(struct UObject* WorldContextObject, bool bPaused); // Function Engine.GameplayStatics.SetGamePaused // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa8050
	void SetForceDisableSplitscreen(struct UObject* WorldContextObject, bool bDisable); // Function Engine.GameplayStatics.SetForceDisableSplitscreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa7f90
	void SetEnableWorldRendering(struct UObject* WorldContextObject, bool bEnable); // Function Engine.GameplayStatics.SetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa7ed0
	void SetBaseSoundMix(struct UObject* WorldContextObject, struct USoundMix* InSoundMix); // Function Engine.GameplayStatics.SetBaseSoundMix // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa7e10
	bool SaveGameToSlot(struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.SaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa7c50
	void RemovePlayer(struct APlayerController* Player, bool bDestroyPawn); // Function Engine.GameplayStatics.RemovePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa78a0
	struct FVector RebaseZeroOriginOntoLocal(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa77a0
	struct FVector RebaseLocalOriginOntoZero(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa76a0
	void PushSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PushSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa75b0
	bool ProjectWorldToScreen(struct APlayerController* Player, struct FVector& WorldPosition, struct FVector2D& ScreenPosition, bool bPlayerViewportRelative); // Function Engine.GameplayStatics.ProjectWorldToScreen // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa7430
	void PrimeSound(struct USoundBase* InSound); // Function Engine.GameplayStatics.PrimeSound // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa73b0
	void PrimeAllSoundsInSoundClass(struct USoundClass* InSoundClass); // Function Engine.GameplayStatics.PrimeAllSoundsInSoundClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa7330
	void PopSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PopSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa7270
	void PlayWorldCameraShake(struct UObject* WorldContextObject, struct UCameraShakeBase* Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Function Engine.GameplayStatics.PlayWorldCameraShake // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa6fa0
	void PlaySoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor, struct UInitialActiveSoundParams* InitialParams); // Function Engine.GameplayStatics.PlaySoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa6c40
	void PlaySound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor, bool bIsUISound); // Function Engine.GameplayStatics.PlaySound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x4aa69e0
	void PlayDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function Engine.GameplayStatics.PlayDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa6700
	void PlayDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Function Engine.GameplayStatics.PlayDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4aa6510
	struct FString ParseOption(struct FString Options, struct FString Key); // Function Engine.GameplayStatics.ParseOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa6390
	void OpenLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa6130
	void OpenLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString Options); // Function Engine.GameplayStatics.OpenLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa5f90
	struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, struct UPhysicalMaterial* PhysMat, struct AActor* HitActor, struct UPrimitiveComponent* HitComponent, struct FName HitBoneName, struct FName BoneName, int32_t HitItem, int32_t ElementIndex, int32_t FaceIndex, struct FVector TraceStart, struct FVector TraceEnd); // Function Engine.GameplayStatics.MakeHitResult // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa58a0
	void LoadStreamLevelBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa5610
	void LoadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa5450
	struct USaveGame* LoadGameFromSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.LoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa5370
	bool IsSplitscreenForceDisabled(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsSplitscreenForceDisabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa51f0
	bool IsGamePaused(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsGamePaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa5130
	bool HasOption(struct FString Options, struct FString InKey); // Function Engine.GameplayStatics.HasOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4f20
	bool HasLaunchOption(struct FString OptionToCheck); // Function Engine.GameplayStatics.HasLaunchOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4e50
	int32_t GrassOverlappingSphereCount(struct UObject* WorldContextObject, struct UStaticMesh* StaticMesh, struct FVector centerPosition, float Radius); // Function Engine.GameplayStatics.GrassOverlappingSphereCount // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4aa4c40
	struct FIntVector GetWorldOriginLocation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa4ba0
	float GetWorldDeltaSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldDeltaSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4b10
	void GetViewProjectionMatrix(struct FMinimalViewInfo DesiredView, struct FMatrix& ViewMatrix, struct FMatrix& ProjectionMatrix, struct FMatrix& ViewProjectionMatrix); // Function Engine.GameplayStatics.GetViewProjectionMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa4700
	enum class EMouseCaptureMode GetViewportMouseCaptureMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4a80
	float GetUnpausedTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetUnpausedTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4670
	float GetTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa45e0
	enum class EPhysicalSurface GetSurfaceType(struct FHitResult& Hit); // Function Engine.GameplayStatics.GetSurfaceType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aa44e0
	struct ULevelStreaming* GetStreamingLevel(struct UObject* WorldContextObject, struct FName PackageName); // Function Engine.GameplayStatics.GetStreamingLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4410
	float GetRealTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetRealTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4380
	struct APlayerState* GetPlayerStateFromUniqueNetId(struct UObject* WorldContextObject, struct FUniqueNetIdRepl& UniqueId); // Function Engine.GameplayStatics.GetPlayerStateFromUniqueNetId // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aa41f0
	struct APlayerState* GetPlayerState(struct UObject* WorldContextObject, int32_t PlayerStateIndex); // Function Engine.GameplayStatics.GetPlayerState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4120
	struct APawn* GetPlayerPawn(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa4050
	int32_t GetPlayerControllerID(struct APlayerController* Player); // Function Engine.GameplayStatics.GetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3fc0
	struct APlayerController* GetPlayerControllerFromID(struct UObject* WorldContextObject, int32_t ControllerId); // Function Engine.GameplayStatics.GetPlayerControllerFromID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3ef0
	struct APlayerController* GetPlayerController(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3e20
	struct ACharacter* GetPlayerCharacter(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3d50
	struct APlayerCameraManager* GetPlayerCameraManager(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCameraManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3c80
	struct FString GetPlatformName(); // Function Engine.GameplayStatics.GetPlatformName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3c00
	struct UObject* GetObjectClass(struct UObject* Object); // Function Engine.GameplayStatics.GetObjectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3b70
	int32_t GetNumPlayerStates(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetNumPlayerStates // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3a80
	int32_t GetNumPlayerControllers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetNumPlayerControllers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa39f0
	int32_t GetNumLocalPlayerControllers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetNumLocalPlayerControllers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3960
	int32_t GetMaxAudioChannelCount(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetMaxAudioChannelCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa38d0
	void GetKeyValue(struct FString Pair, struct FString& Key, struct FString& Value); // Function Engine.GameplayStatics.GetKeyValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aa3750
	int32_t GetIntOption(struct FString Options, struct FString Key, int32_t DefaultValue); // Function Engine.GameplayStatics.GetIntOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3610
	float GetGlobalTimeDilation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3580
	struct AGameStateBase* GetGameState(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa34f0
	struct AGameModeBase* GetGameMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa3460
	struct UGameInstance* GetGameInstance(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa33d0
	bool GetEnableWorldRendering(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa3340
	struct UReverbEffect* GetCurrentReverbEffect(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetCurrentReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa3210
	struct FString GetCurrentLevelName(struct UObject* WorldContextObject, bool bRemovePrefixString); // Function Engine.GameplayStatics.GetCurrentLevelName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa3100
	bool GetClosestListenerLocation(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector& ListenerPosition); // Function Engine.GameplayStatics.GetClosestListenerLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa2f30
	float GetAudioTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetAudioTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa2ea0
	void GetAllActorsWithTag(struct UObject* WorldContextObject, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4aa2d80
	void GetAllActorsWithInterface(struct UObject* WorldContextObject, struct UInterface* Interface, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithInterface // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4aa2c60
	void GetAllActorsOfClassWithTag(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClassWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4aa2b00
	void GetAllActorsOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4aa29e0
	struct AActor* GetActorOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass); // Function Engine.GameplayStatics.GetActorOfClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa2910
	void GetActorArrayBounds(struct TArray<struct AActor*>& Actors, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function Engine.GameplayStatics.GetActorArrayBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa2770
	struct FVector GetActorArrayAverageLocation(struct TArray<struct AActor*>& Actors); // Function Engine.GameplayStatics.GetActorArrayAverageLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa26b0
	void GetAccurateRealTime(int32_t& Seconds, float& PartialSeconds); // Function Engine.GameplayStatics.GetAccurateRealTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aa25d0
	void FlushLevelStreaming(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.FlushLevelStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa2550
	struct AActor* FinishSpawningActor(struct AActor* Actor, struct FTransform& SpawnTransform); // Function Engine.GameplayStatics.FinishSpawningActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa2400
	struct AActor* FindNearestActor(struct FVector Origin, struct TArray<struct AActor*>& ActorsToCheck, float& Distance); // Function Engine.GameplayStatics.FindNearestActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa2190
	bool FindCollisionUV(struct FHitResult& Hit, int32_t UVChannel, struct FVector2D& UV); // Function Engine.GameplayStatics.FindCollisionUV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa1ff0
	void EnableLiveStreaming(bool Enable); // Function Engine.GameplayStatics.EnableLiveStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1f50
	bool DoesSaveGameExist(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DoesSaveGameExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1e70
	bool DeprojectScreenToWorld(struct APlayerController* Player, struct FVector2D& ScreenPosition, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.GameplayStatics.DeprojectScreenToWorld // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa1cf0
	bool DeleteGameInSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DeleteGameInSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1c10
	void DeactivateReverbEffect(struct UObject* WorldContextObject, struct FName TagName); // Function Engine.GameplayStatics.DeactivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1a30
	struct UAudioComponent* CreateSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.CreateSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x4aa17d0
	struct USaveGame* CreateSaveGameObject(struct USaveGame* SaveGameClass); // Function Engine.GameplayStatics.CreateSaveGameObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1740
	struct APlayerController* CreatePlayer(struct UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Function Engine.GameplayStatics.CreatePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1640
	void ClearSoundMixModifiers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.ClearSoundMixModifiers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa15c0
	void ClearSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float FadeOutTime); // Function Engine.GameplayStatics.ClearSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1470
	void CancelAsyncLoading(); // Function Engine.GameplayStatics.CancelAsyncLoading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4aa1280
	void BreakHitResult(struct FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, struct FVector& Location, struct FVector& ImpactPoint, struct FVector& Normal, struct FVector& ImpactNormal, struct UPhysicalMaterial*& PhysMat, struct AActor*& HitActor, struct UPrimitiveComponent*& HitComponent, struct FName& HitBoneName, struct FName& BoneName, int32_t& HitItem, int32_t& ElementIndex, int32_t& FaceIndex, struct FVector& TraceStart, struct FVector& TraceEnd); // Function Engine.GameplayStatics.BreakHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aa0aa0
	bool BlueprintSuggestProjectileVelocity(struct UObject* WorldContextObject, struct FVector& TossVelocity, struct FVector StartLocation, struct FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9fa10
	bool Blueprint_PredictProjectilePath_ByTraceChannel(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aa0500
	bool Blueprint_PredictProjectilePath_ByObjectType(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9ff40
	bool Blueprint_PredictProjectilePath_Advanced(struct UObject* WorldContextObject, struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult& PredictResult); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4a9fd30
	struct AActor* BeginSpawningActorFromBlueprint(struct UObject* WorldContextObject, struct UBlueprint* Blueprint, struct FTransform& SpawnTransform, bool bNoCollisionFail); // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9f830
	struct AActor* BeginDeferredActorSpawnFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9f620
	bool AreSubtitlesEnabled(); // Function Engine.GameplayStatics.AreSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4a9f5f0
	bool AreAnyListenersWithinRange(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange); // Function Engine.GameplayStatics.AreAnyListenersWithinRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9f4d0
	bool ApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9f130
	bool ApplyRadialDamage(struct UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float DamageRadius, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9ee20
	float ApplyPointDamage(struct AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyPointDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4a9eb60
	float ApplyDamage(struct AActor* DamagedActor, float BaseDamage, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x4a9e9c0
	void AnnounceAccessibleString(struct FString AnnouncementString); // Function Engine.GameplayStatics.AnnounceAccessibleString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a9e930
	void ActivateReverbEffect(struct UObject* WorldContextObject, struct UReverbEffect* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime); // Function Engine.GameplayStatics.ActivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4a9e760
};

// Class Engine.SpotLight
// Size: 0x290 (Inherited: 0x288)
struct ASpotLight : ALight {
	struct USpotLightComponent* SpotLightComponent; // 0x288(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbadc0
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbac10
};

// Class Engine.GeneratedMeshAreaLight
// Size: 0x290 (Inherited: 0x290)
struct AGeneratedMeshAreaLight : ASpotLight {
};

// Class Engine.HapticFeedbackEffect_Base
// Size: 0x28 (Inherited: 0x28)
struct UHapticFeedbackEffect_Base : UObject {
};

// Class Engine.HapticFeedbackEffect_Buffer
// Size: 0x40 (Inherited: 0x28)
struct UHapticFeedbackEffect_Buffer : UHapticFeedbackEffect_Base {
	struct TArray<char> Amplitudes; // 0x28(0x10)
	int32_t SampleRate; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.HapticFeedbackEffect_Curve
// Size: 0x138 (Inherited: 0x28)
struct UHapticFeedbackEffect_Curve : UHapticFeedbackEffect_Base {
	struct FHapticFeedbackDetails_Curve HapticDetails; // 0x28(0x110)
};

// Class Engine.HapticFeedbackEffect_SoundWave
// Size: 0x48 (Inherited: 0x28)
struct UHapticFeedbackEffect_SoundWave : UHapticFeedbackEffect_Base {
	struct USoundWave* SoundWave; // 0x28(0x08)
	char pad_30[0x18]; // 0x30(0x18)
};

// Class Engine.HealthSnapshotBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UHealthSnapshotBlueprintLibrary : UBlueprintFunctionLibrary {

	void StopPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x4ab3e40
	void StartPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x4ab3e20
	void LogPerformanceSnapshot(struct FString SnapshotTitle, bool bResetStats); // Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x4ab3880
};

// Class Engine.WorldPartitionHLOD
// Size: 0x2b0 (Inherited: 0x278)
struct AWorldPartitionHLOD : AActor {
	uint32_t LODLevel; // 0x278(0x04)
	bool bRequireWarmup; // 0x27c(0x01)
	char pad_27D[0x3]; // 0x27d(0x03)
	struct TSoftObjectPtr<UWorldPartitionRuntimeCell> SourceCell; // 0x280(0x28)
	struct FName SourceCellName; // 0x2a8(0x08)
};

// Class Engine.HLODBuilderSettings
// Size: 0x28 (Inherited: 0x28)
struct UHLODBuilderSettings : UObject {
};

// Class Engine.HLODEngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UHLODEngineSubsystem : UEngineSubsystem {
};

// Class Engine.HLODLayer
// Size: 0x28 (Inherited: 0x28)
struct UHLODLayer : UObject {
};

// Class Engine.HLODProxy
// Size: 0x88 (Inherited: 0x28)
struct UHLODProxy : UObject {
	struct TArray<struct FHLODProxyMesh> ProxyMeshes; // 0x28(0x10)
	struct TMap<struct UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors; // 0x38(0x50)
};

// Class Engine.HLODProxyDesc
// Size: 0x28 (Inherited: 0x28)
struct UHLODProxyDesc : UObject {
};

// Class Engine.HLODSubsystem
// Size: 0x130 (Inherited: 0x30)
struct UHLODSubsystem : UWorldSubsystem {
	char pad_30[0x100]; // 0x30(0x100)
};

// Class Engine.AnimationDataController
// Size: 0x28 (Inherited: 0x28)
struct UAnimationDataController : UInterface {

	void UpdateCurveNamesFromSkeleton(struct USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Function Engine.AnimationDataController.UpdateCurveNamesFromSkeleton // (Native|Public|BlueprintCallable) // @ game+0x4ab8c20
	bool SetTransformCurveKeys(struct FAnimationCurveIdentifier& CurveId, struct TArray<struct FTransform>& TransformValues, struct TArray<float>& TimeKeys, bool bShouldTransact); // Function Engine.AnimationDataController.SetTransformCurveKeys // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab8a50
	bool SetTransformCurveKey(struct FAnimationCurveIdentifier& CurveId, float Time, struct FTransform& Value, bool bShouldTransact); // Function Engine.AnimationDataController.SetTransformCurveKey // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ab8860
	void SetPlayLength(float Length, bool bShouldTransact); // Function Engine.AnimationDataController.SetPlayLength // (Native|Public|BlueprintCallable) // @ game+0x4ab8780
	void SetModel(struct UAnimDataModel* InModel); // Function Engine.AnimationDataController.SetModel // (Native|Public|BlueprintCallable) // @ game+0x3fe30e0
	void SetFrameRate(struct FFrameRate FrameRate, bool bShouldTransact); // Function Engine.AnimationDataController.SetFrameRate // (Native|Public|BlueprintCallable) // @ game+0x4ab86a0
	bool SetCurveKeys(struct FAnimationCurveIdentifier& CurveId, struct TArray<struct FRichCurveKey>& CurveKeys, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveKeys // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab8530
	bool SetCurveKey(struct FAnimationCurveIdentifier& CurveId, struct FRichCurveKey& Key, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab83c0
	bool SetCurveFlags(struct FAnimationCurveIdentifier& CurveId, int32_t Flags, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveFlags // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab8270
	bool SetCurveFlag(struct FAnimationCurveIdentifier& CurveId, enum class EAnimAssetCurveFlags Flag, bool bState, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveFlag // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab80d0
	bool SetCurveColor(struct FAnimationCurveIdentifier& CurveId, struct FLinearColor Color, bool bShouldTransact); // Function Engine.AnimationDataController.SetCurveColor // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ab7f80
	bool SetBoneTrackKeys(struct FName BoneName, struct TArray<struct FVector>& PositionalKeys, struct TArray<struct FQuat>& RotationalKeys, struct TArray<struct FVector>& ScalingKeys, bool bShouldTransact); // Function Engine.AnimationDataController.SetBoneTrackKeys // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab7d80
	bool ScaleCurve(struct FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact); // Function Engine.AnimationDataController.ScaleCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab7bf0
	void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact); // Function Engine.AnimationDataController.ResizePlayLength // (Native|Public|BlueprintCallable) // @ game+0x4ab7a90
	void Resize(float Length, float T0, float T1, bool bShouldTransact); // Function Engine.AnimationDataController.Resize // (Native|Public|BlueprintCallable) // @ game+0x4ab7930
	bool RenameCurve(struct FAnimationCurveIdentifier& CurveToRenameId, struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Function Engine.AnimationDataController.RenameCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab77c0
	bool RemoveTransformCurveKey(struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveTransformCurveKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab7670
	bool RemoveCurveKey(struct FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveCurveKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab7520
	bool RemoveCurve(struct FAnimationCurveIdentifier& CurveId, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab7420
	bool RemoveBoneTrack(struct FName BoneName, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveBoneTrack // (Native|Public|BlueprintCallable) // @ game+0x4ab7350
	bool RemoveAttributeKey(struct FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAttributeKey // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab71d0
	bool RemoveAttribute(struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAttribute // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab70a0
	void RemoveAllCurvesOfType(enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllCurvesOfType // (Native|Public|BlueprintCallable) // @ game+0x4ab6fc0
	void RemoveAllBoneTracks(bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllBoneTracks // (Native|Public|BlueprintCallable) // @ game+0x4ab6f30
	int32_t RemoveAllAttributesForBone(struct FName& BoneName, bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllAttributesForBone // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab6e40
	int32_t RemoveAllAttributes(bool bShouldTransact); // Function Engine.AnimationDataController.RemoveAllAttributes // (Native|Public|BlueprintCallable) // @ game+0x4ab6da0
	void OpenBracket(struct FText& InTitle, bool bShouldTransact); // Function Engine.AnimationDataController.OpenBracket // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab6820
	int32_t InsertBoneTrack(struct FName BoneName, int32_t DesiredIndex, bool bShouldTransact); // Function Engine.AnimationDataController.InsertBoneTrack // (Native|Public|BlueprintCallable) // @ game+0x4ab61b0
	struct UAnimDataModel* GetModel(); // Function Engine.AnimationDataController.GetModel // (Native|Public|BlueprintCallable) // @ game+0x4ab5e90
	void FindOrAddCurveNamesOnSkeleton(struct USkeleton* Skeleton, enum class ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Function Engine.AnimationDataController.FindOrAddCurveNamesOnSkeleton // (Native|Public|BlueprintCallable) // @ game+0x4ab5d80
	bool DuplicateCurve(struct FAnimationCurveIdentifier& CopyCurveId, struct FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Function Engine.AnimationDataController.DuplicateCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab5c10
	bool DuplicateAttribute(struct FAnimationAttributeIdentifier& AttributeIdentifier, struct FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact); // Function Engine.AnimationDataController.DuplicateAttribute // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab5a70
	void CloseBracket(bool bShouldTransact); // Function Engine.AnimationDataController.CloseBracket // (Native|Public|BlueprintCallable) // @ game+0x4ab59e0
	bool AddCurve(struct FAnimationCurveIdentifier& CurveId, int32_t CurveFlags, bool bShouldTransact); // Function Engine.AnimationDataController.AddCurve // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab5710
	int32_t AddBoneTrack(struct FName BoneName, bool bShouldTransact); // Function Engine.AnimationDataController.AddBoneTrack // (Native|Public|BlueprintCallable) // @ game+0x4ab5640
	bool AddAttribute(struct FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Function Engine.AnimationDataController.AddAttribute // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ab5510
};

// Class Engine.ImportanceSamplingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UImportanceSamplingLibrary : UBlueprintFunctionLibrary {

	float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ab6ca0
	struct FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, struct FVector Cell, struct FVector Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ab6ae0
	struct FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D Cell, struct FVector2D Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ab6950
	float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ab6720
	struct FVector NextSobolCell3D(int32_t Index, int32_t NumCells, struct FVector PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ab65d0
	struct FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ab64b0
	struct FImportanceTexture MakeImportanceTexture(struct UTexture2D* Texture, enum class EImportanceWeight WeightingFunc); // Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ab62d0
	void ImportanceSample(struct FImportanceTexture& Texture, struct FVector2D& Rand, int32_t Samples, float Intensity, struct FVector2D& SamplePosition, struct FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Function Engine.ImportanceSamplingLibrary.ImportanceSample // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ab5ec0
	void BreakImportanceTexture(struct FImportanceTexture& ImportanceTexture, struct UTexture2D*& Texture, enum class EImportanceWeight& WeightingFunc); // Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ab5860
};

// Class Engine.ImportantToggleSettingInterface
// Size: 0x28 (Inherited: 0x28)
struct UImportantToggleSettingInterface : UInterface {
};

// Class Engine.InGameAdManager
// Size: 0x60 (Inherited: 0x38)
struct UInGameAdManager : UPlatformInterfaceBase {
	char bShouldPauseWhileAdOpen : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct FDelegate> ClickedBannerDelegates; // 0x40(0x10)
	struct TArray<struct FDelegate> ClosedAdDelegates; // 0x50(0x10)
};

// Class Engine.InheritableComponentHandler
// Size: 0x48 (Inherited: 0x28)
struct UInheritableComponentHandler : UObject {
	struct TArray<struct FComponentOverrideRecord> Records; // 0x28(0x10)
	struct TArray<struct UActorComponent*> UnnecessaryComponents; // 0x38(0x10)
};

// Class Engine.InputActionDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputActionDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputAxisDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputAxisKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputSettings
// Size: 0x140 (Inherited: 0x28)
struct UInputSettings : UObject {
	struct TArray<struct FInputAxisConfigEntry> AxisConfig; // 0x28(0x10)
	char bAltEnterTogglesFullscreen : 1; // 0x38(0x01)
	char bF11TogglesFullscreen : 1; // 0x38(0x01)
	char bUseMouseForTouch : 1; // 0x38(0x01)
	char bEnableMouseSmoothing : 1; // 0x38(0x01)
	char bEnableFOVScaling : 1; // 0x38(0x01)
	char bCaptureMouseOnLaunch : 1; // 0x38(0x01)
	char bDefaultViewportMouseLock : 1; // 0x38(0x01)
	char bEnableLegacyInputScales : 1; // 0x38(0x01)
	char bAlwaysShowTouchInterface : 1; // 0x39(0x01)
	char bShowConsoleOnFourFingerTap : 1; // 0x39(0x01)
	char bEnableGestureRecognizer : 1; // 0x39(0x01)
	char bUseAutocorrect : 1; // 0x39(0x01)
	char pad_39_4 : 4; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<struct FString> ExcludedAutocorrectOS; // 0x40(0x10)
	struct TArray<struct FString> ExcludedAutocorrectCultures; // 0x50(0x10)
	struct TArray<struct FString> ExcludedAutocorrectDeviceModels; // 0x60(0x10)
	enum class EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x70(0x01)
	enum class EMouseLockMode DefaultViewportMouseLockMode; // 0x71(0x01)
	char pad_72[0x2]; // 0x72(0x02)
	float FOVScale; // 0x74(0x04)
	float DoubleClickTime; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<struct FInputActionKeyMapping> ActionMappings; // 0x80(0x10)
	struct TArray<struct FInputAxisKeyMapping> AxisMappings; // 0x90(0x10)
	struct TArray<struct FInputActionSpeechMapping> SpeechMappings; // 0xa0(0x10)
	struct TSoftClassPtr<UObject> DefaultPlayerInputClass; // 0xb0(0x28)
	struct TSoftClassPtr<UObject> DefaultInputComponentClass; // 0xd8(0x28)
	struct FSoftObjectPath DefaultTouchInterface; // 0x100(0x18)
	struct FKey ConsoleKey; // 0x118(0x18)
	struct TArray<struct FKey> ConsoleKeys; // 0x130(0x10)

	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x4abe010
	void RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4abdcf0
	void RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4abdb60
	struct UInputSettings* GetInputSettings(); // Function Engine.InputSettings.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4abd2b0
	void GetAxisNames(struct TArray<struct FName>& AxisNames); // Function Engine.InputSettings.GetAxisNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abcdd0
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abcc80
	void GetActionNames(struct TArray<struct FName>& ActionNames); // Function Engine.InputSettings.GetActionNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abcbd0
	void GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4abca80
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps // (Final|Native|Public|BlueprintCallable) // @ game+0x4abca60
	void AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4abc010
	void AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4abbe80
};

// Class Engine.InputTouchDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputTouchDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputVectorAxisDelegateBinding
// Size: 0x38 (Inherited: 0x38)
struct UInputVectorAxisDelegateBinding : UInputAxisKeyDelegateBinding {
};

// Class Engine.InstancedPlacemenClientSettings
// Size: 0x28 (Inherited: 0x28)
struct UInstancedPlacemenClientSettings : UObject {
};

// Class Engine.InstancedPlacementPartitionActor
// Size: 0x288 (Inherited: 0x288)
struct AInstancedPlacementPartitionActor : AISMPartitionActor {
};

// Class Engine.Interface_ActorSubobject
// Size: 0x28 (Inherited: 0x28)
struct UInterface_ActorSubobject : UInterface {
};

// Class Engine.Interface_AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UInterface_AssetUserData : UInterface {
};

// Class Engine.Interface_AsyncCompilation
// Size: 0x28 (Inherited: 0x28)
struct UInterface_AsyncCompilation : UInterface {
};

// Class Engine.BoneReferenceSkeletonProvider
// Size: 0x28 (Inherited: 0x28)
struct UBoneReferenceSkeletonProvider : UInterface {
};

// Class Engine.Interface_CollisionDataProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_CollisionDataProvider : UInterface {
};

// Class Engine.Interface_PostProcessVolume
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PostProcessVolume : UInterface {
};

// Class Engine.Interface_PreviewMeshProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PreviewMeshProvider : UInterface {
};

// Class Engine.InterpCurveEdSetup
// Size: 0x40 (Inherited: 0x28)
struct UInterpCurveEdSetup : UObject {
	struct TArray<struct FCurveEdTab> Tabs; // 0x28(0x10)
	int32_t ActiveTab; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.InterpData
// Size: 0x70 (Inherited: 0x28)
struct UInterpData : UObject {
	float InterpLength; // 0x28(0x04)
	float PathBuildTime; // 0x2c(0x04)
	struct TArray<struct UInterpGroup*> InterpGroups; // 0x30(0x10)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x40(0x08)
	float EdSectionStart; // 0x48(0x04)
	float EdSectionEnd; // 0x4c(0x04)
	char bShouldBakeAndPrune : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct UInterpGroupDirector* CachedDirectorGroup; // 0x58(0x08)
	struct TArray<struct FName> AllEventNames; // 0x60(0x10)
};

// Class Engine.InterpFilter
// Size: 0x38 (Inherited: 0x28)
struct UInterpFilter : UObject {
	struct FString Caption; // 0x28(0x10)
};

// Class Engine.InterpFilter_Classes
// Size: 0x38 (Inherited: 0x38)
struct UInterpFilter_Classes : UInterpFilter {
};

// Class Engine.InterpFilter_Custom
// Size: 0x38 (Inherited: 0x38)
struct UInterpFilter_Custom : UInterpFilter {
};

// Class Engine.InterpGroup
// Size: 0x50 (Inherited: 0x28)
struct UInterpGroup : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct UInterpTrack*> InterpTracks; // 0x30(0x10)
	struct FName GroupName; // 0x40(0x08)
	struct FColor GroupColor; // 0x48(0x04)
	char bCollapsed : 1; // 0x4c(0x01)
	char bVisible : 1; // 0x4c(0x01)
	char bIsFolder : 1; // 0x4c(0x01)
	char bIsParented : 1; // 0x4c(0x01)
	char bIsSelected : 1; // 0x4c(0x01)
	char pad_4C_5 : 3; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.InterpGroupCamera
// Size: 0x60 (Inherited: 0x50)
struct UInterpGroupCamera : UInterpGroup {
	struct UCameraAnim* CameraAnimInst; // 0x50(0x08)
	float CompressTolerance; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.InterpGroupDirector
// Size: 0x50 (Inherited: 0x50)
struct UInterpGroupDirector : UInterpGroup {
};

// Class Engine.InterpGroupInst
// Size: 0x48 (Inherited: 0x28)
struct UInterpGroupInst : UObject {
	struct UInterpGroup* Group; // 0x28(0x08)
	struct AActor* GroupActor; // 0x30(0x08)
	struct TArray<struct UInterpTrackInst*> TrackInst; // 0x38(0x10)
};

// Class Engine.InterpGroupInstCamera
// Size: 0x48 (Inherited: 0x48)
struct UInterpGroupInstCamera : UInterpGroupInst {
};

// Class Engine.InterpGroupInstDirector
// Size: 0x48 (Inherited: 0x48)
struct UInterpGroupInstDirector : UInterpGroupInst {
};

// Class Engine.InterpToMovementComponent
// Size: 0x1c8 (Inherited: 0x118)
struct UInterpToMovementComponent : UMovementComponent {
	float Duration; // 0x118(0x04)
	char bPauseOnImpact : 1; // 0x11c(0x01)
	char pad_11C_1 : 7; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	bool bSweep; // 0x120(0x01)
	enum class ETeleportType TeleportType; // 0x121(0x01)
	enum class EInterpToBehaviourType BehaviourType; // 0x122(0x01)
	bool bCheckIfStillInWorld; // 0x123(0x01)
	char bForceSubStepping : 1; // 0x124(0x01)
	char pad_124_1 : 7; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	struct FMulticastInlineDelegate OnInterpToReverse; // 0x128(0x10)
	struct FMulticastInlineDelegate OnInterpToStop; // 0x138(0x10)
	struct FMulticastInlineDelegate OnWaitBeginDelegate; // 0x148(0x10)
	struct FMulticastInlineDelegate OnWaitEndDelegate; // 0x158(0x10)
	struct FMulticastInlineDelegate OnResetDelegate; // 0x168(0x10)
	float MaxSimulationTimeStep; // 0x178(0x04)
	int32_t MaxSimulationIterations; // 0x17c(0x04)
	struct TArray<struct FInterpControlPoint> ControlPoints; // 0x180(0x10)
	char pad_190[0x38]; // 0x190(0x38)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac11f0
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x4ac1170
	void ResetControlPoints(); // Function Engine.InterpToMovementComponent.ResetControlPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x4ac1150
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2552560
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2552560
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2552560
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2552560
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2552560
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x4ac1130
	void AddControlPointPosition(struct FVector Pos, bool bPositionIsRelative); // Function Engine.InterpToMovementComponent.AddControlPointPosition // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ac1040
};

// Class Engine.InterpTrack
// Size: 0x70 (Inherited: 0x28)
struct UInterpTrack : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct UInterpTrack*> SubTracks; // 0x38(0x10)
	struct UInterpTrackInst* TrackInstClass; // 0x48(0x08)
	enum class ETrackActiveCondition ActiveCondition; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FString TrackTitle; // 0x58(0x10)
	char bOnePerGroup : 1; // 0x68(0x01)
	char bDirGroupOnly : 1; // 0x68(0x01)
	char bDisableTrack : 1; // 0x68(0x01)
	char bIsSelected : 1; // 0x68(0x01)
	char bIsAnimControlTrack : 1; // 0x68(0x01)
	char bSubTrackOnly : 1; // 0x68(0x01)
	char bVisible : 1; // 0x68(0x01)
	char bIsRecording : 1; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.InterpTrackFloatBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackFloatBase : UInterpTrack {
	struct FInterpCurveFloat FloatTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.InterpTrackAnimControl
// Size: 0xb0 (Inherited: 0x90)
struct UInterpTrackAnimControl : UInterpTrackFloatBase {
	struct FName SlotName; // 0x90(0x08)
	struct TArray<struct FAnimControlTrackKey> AnimSeqs; // 0x98(0x10)
	char bSkipAnimNotifiers : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.InterpTrackVectorBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackVectorBase : UInterpTrack {
	struct FInterpCurveVector VectorTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.InterpTrackAudioMaster
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackAudioMaster : UInterpTrackVectorBase {
};

// Class Engine.InterpTrackBoolProp
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackBoolProp : UInterpTrack {
	struct TArray<struct FBoolTrackKey> BoolTrack; // 0x70(0x10)
	struct FName PropertyName; // 0x80(0x08)
};

// Class Engine.InterpTrackColorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackColorProp : UInterpTrackVectorBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackColorScale
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackColorScale : UInterpTrackVectorBase {
};

// Class Engine.InterpTrackDirector
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackDirector : UInterpTrack {
	struct TArray<struct FDirectorTrackCut> CutTrack; // 0x70(0x10)
	char bSimulateCameraCutsOnClients : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.InterpTrackEvent
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackEvent : UInterpTrack {
	struct TArray<struct FEventTrackKey> EventTrack; // 0x70(0x10)
	char bFireEventsWhenForwards : 1; // 0x80(0x01)
	char bFireEventsWhenBackwards : 1; // 0x80(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x80(0x01)
	char bUseCustomEventName : 1; // 0x80(0x01)
	char pad_80_4 : 4; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.InterpTrackFade
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackFade : UInterpTrackFloatBase {
	char bPersistFade : 1; // 0x90(0x01)
	char bFadeAudio : 1; // 0x90(0x01)
	char pad_90_2 : 6; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FLinearColor FadeColor; // 0x94(0x10)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.InterpTrackFloatAnimBPParam
// Size: 0xb0 (Inherited: 0x90)
struct UInterpTrackFloatAnimBPParam : UInterpTrackFloatBase {
	ClassPtrProperty AnimBlueprintClass; // 0x90(0x08)
	struct UAnimInstance* AnimClass; // 0x98(0x08)
	struct FName ParamName; // 0xa0(0x08)
	char pad_A8[0x8]; // 0xa8(0x08)
};

// Class Engine.InterpTrackFloatMaterialParam
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackFloatMaterialParam : UInterpTrackFloatBase {
	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x90(0x10)
	struct FName ParamName; // 0xa0(0x08)
};

// Class Engine.InterpTrackFloatParticleParam
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackFloatParticleParam : UInterpTrackFloatBase {
	struct FName ParamName; // 0x90(0x08)
};

// Class Engine.InterpTrackFloatProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackFloatProp : UInterpTrackFloatBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackInst
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInst : UObject {
};

// Class Engine.InterpTrackInstAnimControl
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstAnimControl : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstAudioMaster
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstAudioMaster : UInterpTrackInst {
};

// Class Engine.InterpTrackInstProperty
// Size: 0x50 (Inherited: 0x28)
struct UInterpTrackInstProperty : UInterpTrackInst {
	struct TFieldPath<FProperty> InterpProperty; // 0x28(0x20)
	struct UObject* PropertyOuterObjectInst; // 0x48(0x08)
};

// Class Engine.InterpTrackInstBoolProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstBoolProp : UInterpTrackInstProperty {
	char pad_50[0x10]; // 0x50(0x10)
	bool ResetBool; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.InterpTrackInstColorProp
// Size: 0x60 (Inherited: 0x50)
struct UInterpTrackInstColorProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	struct FColor ResetColor; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.InterpTrackInstColorScale
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstColorScale : UInterpTrackInst {
};

// Class Engine.InterpTrackInstDirector
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstDirector : UInterpTrackInst {
	struct AActor* OldViewTarget; // 0x28(0x08)
};

// Class Engine.InterpTrackInstEvent
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstEvent : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstFade
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstFade : UInterpTrackInst {
};

// Class Engine.InterpTrackInstFloatAnimBPParam
// Size: 0x40 (Inherited: 0x28)
struct UInterpTrackInstFloatAnimBPParam : UInterpTrackInst {
	struct UAnimInstance* AnimScriptInstance; // 0x28(0x08)
	float ResetFloat; // 0x30(0x04)
	char pad_34[0xc]; // 0x34(0x0c)
};

// Class Engine.InterpTrackInstFloatMaterialParam
// Size: 0x60 (Inherited: 0x28)
struct UInterpTrackInstFloatMaterialParam : UInterpTrackInst {
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x28(0x10)
	struct TArray<float> ResetFloats; // 0x38(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48(0x10)
	struct UInterpTrackFloatMaterialParam* InstancedTrack; // 0x58(0x08)
};

// Class Engine.InterpTrackInstFloatParticleParam
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstFloatParticleParam : UInterpTrackInst {
	float ResetFloat; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstFloatProp
// Size: 0x60 (Inherited: 0x50)
struct UInterpTrackInstFloatProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	float ResetFloat; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.InterpTrackInstLinearColorProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstLinearColorProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	struct FLinearColor ResetColor; // 0x58(0x10)
};

// Class Engine.InterpTrackInstMove
// Size: 0x58 (Inherited: 0x28)
struct UInterpTrackInstMove : UInterpTrackInst {
	struct FVector ResetLocation; // 0x28(0x18)
	struct FRotator ResetRotation; // 0x40(0x18)
};

// Class Engine.InterpTrackInstParticleReplay
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstParticleReplay : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstSlomo
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstSlomo : UInterpTrackInst {
	float OldTimeDilation; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstSound
// Size: 0x38 (Inherited: 0x28)
struct UInterpTrackInstSound : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct UAudioComponent* PlayAudioComp; // 0x30(0x08)
};

// Class Engine.InterpTrackInstToggle
// Size: 0x38 (Inherited: 0x28)
struct UInterpTrackInstToggle : UInterpTrackInst {
	enum class ETrackToggleAction Action; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float LastUpdatePosition; // 0x2c(0x04)
	char bSavedActiveState : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.InterpTrackInstVectorMaterialParam
// Size: 0x60 (Inherited: 0x28)
struct UInterpTrackInstVectorMaterialParam : UInterpTrackInst {
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x28(0x10)
	struct TArray<struct FVector> ResetVectors; // 0x38(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48(0x10)
	struct UInterpTrackVectorMaterialParam* InstancedTrack; // 0x58(0x08)
};

// Class Engine.InterpTrackInstVectorProp
// Size: 0x70 (Inherited: 0x50)
struct UInterpTrackInstVectorProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	struct FVector ResetVector; // 0x58(0x18)
};

// Class Engine.InterpTrackInstVisibility
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstVisibility : UInterpTrackInst {
	enum class EVisibilityTrackAction Action; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float LastUpdatePosition; // 0x2c(0x04)
};

// Class Engine.InterpTrackLinearColorBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackLinearColorBase : UInterpTrack {
	struct FInterpCurveLinearColor LinearColorTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.InterpTrackLinearColorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackLinearColorProp : UInterpTrackLinearColorBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackMove
// Size: 0xc8 (Inherited: 0x70)
struct UInterpTrackMove : UInterpTrack {
	struct FInterpCurveVector PosTrack; // 0x70(0x18)
	struct FInterpCurveVector EulerTrack; // 0x88(0x18)
	struct FInterpLookupTrack LookupTrack; // 0xa0(0x10)
	struct FName LookAtGroupName; // 0xb0(0x08)
	float LinCurveTension; // 0xb8(0x04)
	float AngCurveTension; // 0xbc(0x04)
	char bUseQuatInterpolation : 1; // 0xc0(0x01)
	char bShowArrowAtKeys : 1; // 0xc0(0x01)
	char bDisableMovement : 1; // 0xc0(0x01)
	char bShowTranslationOnCurveEd : 1; // 0xc0(0x01)
	char bShowRotationOnCurveEd : 1; // 0xc0(0x01)
	char bHide3DTrack : 1; // 0xc0(0x01)
	char pad_C0_6 : 2; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	enum class EInterpTrackMoveRotMode RotMode; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Engine.InterpTrackMoveAxis
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackMoveAxis : UInterpTrackFloatBase {
	enum class EInterpMoveAxis MoveAxis; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct FInterpLookupTrack LookupTrack; // 0x98(0x10)
};

// Class Engine.InterpTrackParticleReplay
// Size: 0x80 (Inherited: 0x70)
struct UInterpTrackParticleReplay : UInterpTrack {
	struct TArray<struct FParticleReplayTrackKey> TrackKeys; // 0x70(0x10)
};

// Class Engine.InterpTrackSlomo
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackSlomo : UInterpTrackFloatBase {
};

// Class Engine.InterpTrackSound
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackSound : UInterpTrackVectorBase {
	struct TArray<struct FSoundTrackKey> Sounds; // 0x90(0x10)
	char bPlayOnReverse : 1; // 0xa0(0x01)
	char bContinueSoundOnMatineeEnd : 1; // 0xa0(0x01)
	char bSuppressSubtitles : 1; // 0xa0(0x01)
	char bTreatAsDialogue : 1; // 0xa0(0x01)
	char bAttach : 1; // 0xa0(0x01)
	char pad_A0_5 : 3; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class Engine.InterpTrackToggle
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackToggle : UInterpTrack {
	struct TArray<struct FToggleTrackKey> ToggleTrack; // 0x70(0x10)
	char bActivateSystemEachUpdate : 1; // 0x80(0x01)
	char bActivateWithJustAttachedFlag : 1; // 0x80(0x01)
	char bFireEventsWhenForwards : 1; // 0x80(0x01)
	char bFireEventsWhenBackwards : 1; // 0x80(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x80(0x01)
	char pad_80_5 : 3; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.InterpTrackVectorMaterialParam
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackVectorMaterialParam : UInterpTrackVectorBase {
	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x90(0x10)
	struct FName ParamName; // 0xa0(0x08)
};

// Class Engine.InterpTrackVectorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackVectorProp : UInterpTrackVectorBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackVisibility
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackVisibility : UInterpTrack {
	struct TArray<struct FVisibilityTrackKey> VisibilityTrack; // 0x70(0x10)
	char bFireEventsWhenForwards : 1; // 0x80(0x01)
	char bFireEventsWhenBackwards : 1; // 0x80(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.IntSerialization
// Size: 0x50 (Inherited: 0x28)
struct UIntSerialization : UObject {
	uint16_t UnsignedInt16Variable; // 0x28(0x02)
	char pad_2A[0x2]; // 0x2a(0x02)
	uint32_t UnsignedInt32Variable; // 0x2c(0x04)
	uint64_t UnsignedInt64Variable; // 0x30(0x08)
	int8_t SignedInt8Variable; // 0x38(0x01)
	char pad_39[0x1]; // 0x39(0x01)
	int16_t SignedInt16Variable; // 0x3a(0x02)
	char pad_3C[0x4]; // 0x3c(0x04)
	int64_t SignedInt64Variable; // 0x40(0x08)
	char UnsignedInt8Variable; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t SignedInt32Variable; // 0x4c(0x04)
};

// Class Engine.ISMPartitionInstanceManager
// Size: 0x28 (Inherited: 0x28)
struct UISMPartitionInstanceManager : UInterface {
};

// Class Engine.ISMPartitionInstanceManagerProvider
// Size: 0x28 (Inherited: 0x28)
struct UISMPartitionInstanceManagerProvider : UInterface {
};

// Class Engine.KillZVolume
// Size: 0x2c0 (Inherited: 0x2c0)
struct AKillZVolume : APhysicsVolume {
};

// Class Engine.KismetArrayLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetArrayLibrary : UBlueprintFunctionLibrary {

	void SetArrayPropertyByName(struct UObject* Object, struct FName PropertyName, struct TArray<int32_t>& Value); // Function Engine.KismetArrayLibrary.SetArrayPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4acbff0
	void FilterArray(struct TArray<struct AActor*>& TargetArray, struct AActor* FilterClass, struct TArray<struct AActor*>& FilteredArray); // Function Engine.KismetArrayLibrary.FilterArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac8c60
	void Array_Swap(struct TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex); // Function Engine.KismetArrayLibrary.Array_Swap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac8580
	void Array_Shuffle(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Shuffle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac84e0
	void Array_Set(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Function Engine.KismetArrayLibrary.Array_Set // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac82b0
	void Array_Reverse(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Reverse // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac8210
	void Array_Resize(struct TArray<int32_t>& TargetArray, int32_t Size); // Function Engine.KismetArrayLibrary.Array_Resize // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac8120
	bool Array_RemoveItem(struct TArray<int32_t>& TargetArray, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_RemoveItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac7f60
	void Array_Remove(struct TArray<int32_t>& TargetArray, int32_t IndexToRemove); // Function Engine.KismetArrayLibrary.Array_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac7e70
	void Array_RandomFromStream(struct TArray<int32_t>& TargetArray, struct FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_RandomFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ac7ce0
	void Array_Random(struct TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex); // Function Engine.KismetArrayLibrary.Array_Random // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac7ba0
	int32_t Array_Length(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac7af0
	int32_t Array_LastIndex(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_LastIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac7a40
	bool Array_IsValidIndex(struct TArray<int32_t>& TargetArray, int32_t IndexToTest); // Function Engine.KismetArrayLibrary.Array_IsValidIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac7950
	bool Array_IsNotEmpty(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_IsNotEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac78a0
	bool Array_IsEmpty(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_IsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac77f0
	void Array_Insert(struct TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index); // Function Engine.KismetArrayLibrary.Array_Insert // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac7600
	bool Array_Identical(struct TArray<int32_t>& ArrayA, struct TArray<int32_t>& ArrayB); // Function Engine.KismetArrayLibrary.Array_Identical // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac74e0
	void Array_Get(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_Get // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac72c0
	int32_t Array_Find(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac7100
	bool Array_Contains(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac6f40
	void Array_Clear(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac6ea0
	void Array_Append(struct TArray<int32_t>& TargetArray, struct TArray<int32_t>& SourceArray); // Function Engine.KismetArrayLibrary.Array_Append // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac6d90
	int32_t Array_AddUnique(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_AddUnique // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac6be0
	int32_t Array_Add(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ac6a30
};

// Class Engine.KismetGuidLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetGuidLibrary : UBlueprintFunctionLibrary {

	void Parse_StringToGuid(struct FString GuidString, struct FGuid& OutGuid, bool& Success); // Function Engine.KismetGuidLibrary.Parse_StringToGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4acade0
	bool NotEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4acace0
	struct FGuid NewGuid(); // Function Engine.KismetGuidLibrary.NewGuid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4acaca0
	bool IsValid_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.IsValid_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ac9c30
	void Invalidate_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Invalidate_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ac9ba0
	bool EqualEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ac87c0
	struct FString Conv_GuidToString(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Conv_GuidToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ac86e0
};

// Class Engine.KismetInputLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInputLibrary : UBlueprintFunctionLibrary {

	bool PointerEvent_IsTouchEvent(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acbea0
	bool PointerEvent_IsMouseButtonDown(struct FPointerEvent& Input, struct FKey MouseButton); // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acbca0
	float PointerEvent_GetWheelDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acbb50
	int32_t PointerEvent_GetUserIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acba00
	int32_t PointerEvent_GetTouchpadIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acb8b0
	struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4acb760
	int32_t PointerEvent_GetPointerIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acb610
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4acb4c0
	enum class ESlateGesture PointerEvent_GetGestureType(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acb370
	struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4acb220
	struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acb070
	struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4acaf20
	bool Key_IsVectorAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsVectorAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acabc0
	bool Key_IsValid(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acaae0
	bool Key_IsMouseButton(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsMouseButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4acaa00
	bool Key_IsModifierKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsModifierKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca920
	bool Key_IsKeyboardKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsKeyboardKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca840
	bool Key_IsGamepadKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsGamepadKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca760
	bool Key_IsDigital(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsDigital // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca680
	bool Key_IsButtonAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsButtonAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca5a0
	bool Key_IsAxis3D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis3D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca4c0
	bool Key_IsAxis2D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis2D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca3e0
	bool Key_IsAxis1D(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAxis1D // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca300
	bool Key_IsAnalog(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca220
	enum class EUINavigation Key_GetNavigationDirectionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aca110
	enum class EUINavigation Key_GetNavigationDirectionFromAnalog(struct FAnalogInputEvent& InAnalogEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9ff0
	enum class EUINavigationAction Key_GetNavigationActionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9ee0
	enum class EUINavigationAction Key_GetNavigationAction(struct FKey& InKey); // Function Engine.KismetInputLibrary.Key_GetNavigationAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9e00
	struct FText Key_GetDisplayName(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9cd0
	bool InputEvent_IsShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9af0
	bool InputEvent_IsRightShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9a40
	bool InputEvent_IsRightControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9990
	bool InputEvent_IsRightCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac98e0
	bool InputEvent_IsRightAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9830
	bool InputEvent_IsRepeat(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRepeat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9780
	bool InputEvent_IsLeftShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac96d0
	bool InputEvent_IsLeftControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9620
	bool InputEvent_IsLeftCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9570
	bool InputEvent_IsLeftAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac94c0
	bool InputEvent_IsControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9410
	bool InputEvent_IsCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9360
	bool InputEvent_IsAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac92b0
	struct FText InputChord_GetDisplayName(struct FInputChord& Key); // Function Engine.KismetInputLibrary.InputChord_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9150
	int32_t GetUserIndex(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac9040
	struct FKey GetKey(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac8ed0
	float GetAnalogValue(struct FAnalogInputEvent& Input); // Function Engine.KismetInputLibrary.GetAnalogValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ac8db0
	bool EqualEqual_KeyKey(struct FKey A, struct FKey B); // Function Engine.KismetInputLibrary.EqualEqual_KeyKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ac8ac0
	bool EqualEqual_InputChordInputChord(struct FInputChord A, struct FInputChord B); // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ac88c0
	void CalibrateTilt(); // Function Engine.KismetInputLibrary.CalibrateTilt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4ac86c0
};

// Class Engine.KismetInternationalizationLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInternationalizationLibrary : UBlueprintFunctionLibrary {

	bool SetCurrentLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4af9ba0
	bool SetCurrentLanguageAndLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4af9ac0
	bool SetCurrentLanguage(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4af99e0
	bool SetCurrentCulture(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4af9900
	bool SetCurrentAssetGroupCulture(struct FName AssetGroup, struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4af97d0
	struct FString GetSuitableCulture(struct TArray<struct FString>& AvailableCultures, struct FString CultureToMatch, struct FString FallbackCulture); // Function Engine.KismetInternationalizationLibrary.GetSuitableCulture // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ae4510
	struct FString GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory); // Function Engine.KismetInternationalizationLibrary.GetNativeCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae3ac0
	struct TArray<struct FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae33b0
	struct FString GetCurrentLocale(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae2ce0
	struct FString GetCurrentLanguage(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae2c60
	struct FString GetCurrentCulture(); // Function Engine.KismetInternationalizationLibrary.GetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae2c60
	struct FString GetCurrentAssetGroupCulture(struct FName AssetGroup); // Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae2b90
	struct FString GetCultureDisplayName(struct FString Culture, bool Localized); // Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae2a70
	void ClearCurrentAssetGroupCulture(struct FName AssetGroup, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4ada580
};

// Class Engine.KismetMaterialLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMaterialLibrary : UBlueprintFunctionLibrary {

	void SetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, struct FLinearColor& ParameterValue); // Function Engine.KismetMaterialLibrary.SetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4afa0a0
	void SetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, float ParameterValue); // Function Engine.KismetMaterialLibrary.SetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4af9f50
	struct FLinearColor GetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4ae4c30
	float GetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4ae4150
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(struct UObject* WorldContextObject, struct UMaterialInterface* Parent, struct FName OptionalName, enum class EMIDCreationFlags CreationFlags); // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4adc840
};

// Class Engine.KismetMathLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMathLibrary : UBlueprintFunctionLibrary {

	int32_t Xor_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Xor_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b02170
	int64_t Xor_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Xor_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b020a0
	int32_t Wrap(int32_t Value, int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.Wrap // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b01f80
	struct FVector WeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01d00
	struct FRotator WeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01ba0
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b01e60
	double VSizeXYSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXYSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd5d0
	double VSizeXY(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd540
	double VSizeSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd4a0
	double VSize2DSquared(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd370
	double VSize2D(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd2e0
	double VSize(struct FVector A); // Function Engine.KismetMathLibrary.VSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd400
	struct FVector VLerp(struct FVector A, struct FVector B, float Alpha); // Function Engine.KismetMathLibrary.VLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd190
	struct FVector VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd000
	struct FVector VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afce70
	struct FVector VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, struct FVector MinValue, struct FVector MaxValue, bool bInitializeFromTarget); // Function Engine.KismetMathLibrary.VectorSpringInterp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4afef30
	struct FVector Vector_Zero(); // Function Engine.KismetMathLibrary.Vector_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01b70
	struct FVector Vector_Up(); // Function Engine.KismetMathLibrary.Vector_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01b40
	void Vector_UnwindEuler(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_UnwindEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b01ac0
	struct FVector2D Vector_UnitCartesianToSpherical(struct FVector A); // Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b019e0
	struct FVector Vector_ToRadians(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01950
	struct FVector Vector_ToDegrees(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b018c0
	struct FVector Vector_SnappedToGrid(struct FVector InVect, float InGridSize); // Function Engine.KismetMathLibrary.Vector_SnappedToGrid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b016e0
	void Vector_Set(struct FVector& A, double X, double Y, double Z); // Function Engine.KismetMathLibrary.Vector_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b01570
	struct FVector Vector_Right(); // Function Engine.KismetMathLibrary.Vector_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01540
	struct FVector Vector_Reciprocal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_Reciprocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01450
	struct FVector Vector_ProjectOnToNormal(struct FVector V, struct FVector InNormal); // Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01350
	struct FVector Vector_One(); // Function Engine.KismetMathLibrary.Vector_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b01320
	struct FVector Vector_NormalUnsafe(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_NormalUnsafe // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b010f0
	void Vector_Normalize(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b011e0
	struct FVector Vector_Normal2D(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00f80
	struct FVector Vector_MirrorByPlane(struct FVector A, struct FPlane& InPlane); // Function Engine.KismetMathLibrary.Vector_MirrorByPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00e20
	struct FVector Vector_Left(); // Function Engine.KismetMathLibrary.Vector_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00df0
	bool Vector_IsZero(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00d40
	bool Vector_IsUnit(struct FVector& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector_IsUnit // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00c20
	bool Vector_IsUniform(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsUniform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00af0
	bool Vector_IsNormal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00a20
	bool Vector_IsNearlyZero(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsNearlyZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00900
	bool Vector_IsNAN(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00840
	double Vector_HeadingAngle(struct FVector A); // Function Engine.KismetMathLibrary.Vector_HeadingAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00710
	struct FVector Vector_GetSignVector(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetSignVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00640
	struct FVector Vector_GetProjection(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetProjection // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b005a0
	double Vector_GetAbsMin(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00500
	double Vector_GetAbsMax(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00460
	struct FVector Vector_GetAbs(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbs // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b003d0
	struct FVector Vector_Forward(); // Function Engine.KismetMathLibrary.Vector_Forward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b003a0
	struct FVector Vector_Down(); // Function Engine.KismetMathLibrary.Vector_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00370
	double Vector_DistanceSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_DistanceSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00290
	double Vector_Distance2DSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b000d0
	double Vector_Distance2D(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b00000
	double Vector_Distance(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b001a0
	double Vector_CosineAngle2D(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_CosineAngle2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4affe90
	struct FVector Vector_ComponentMin(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4affdb0
	struct FVector Vector_ComponentMax(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4affcd0
	struct FVector Vector_ClampSizeMax2D(struct FVector A, double Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4affa10
	struct FVector Vector_ClampSizeMax(struct FVector A, double Max); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4affb70
	struct FVector Vector_ClampSize2D(struct FVector A, double Min, double Max); // Function Engine.KismetMathLibrary.Vector_ClampSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aff860
	struct FVector Vector_BoundedToCube(struct FVector InVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_BoundedToCube // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aff750
	struct FVector Vector_BoundedToBox(struct FVector InVect, struct FVector InBoxMin, struct FVector InBoxMax); // Function Engine.KismetMathLibrary.Vector_BoundedToBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aff600
	struct FVector Vector_Backward(); // Function Engine.KismetMathLibrary.Vector_Backward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aff5d0
	void Vector_Assign(struct FVector& A, struct FVector& InVector); // Function Engine.KismetMathLibrary.Vector_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aff4f0
	void Vector_AddBounded(struct FVector& A, struct FVector InAddVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_AddBounded // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aff380
	struct FVector4 Vector4_Zero(); // Function Engine.KismetMathLibrary.Vector4_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afef00
	double Vector4_SizeSquared3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afed70
	double Vector4_SizeSquared(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afee30
	double Vector4_Size3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afebe0
	double Vector4_Size(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afeca0
	void Vector4_Set(struct FVector4& A, double X, double Y, double Z, double W); // Function Engine.KismetMathLibrary.Vector4_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4afea00
	struct FVector4 Vector4_NormalUnsafe3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afe790
	void Vector4_Normalize3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normalize3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4afe8a0
	struct FVector4 Vector4_Normal3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afe620
	struct FVector4 Vector4_Negated(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Negated // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afe560
	struct FVector4 Vector4_MirrorByVector3(struct FVector4& Direction, struct FVector4& SurfaceNormal); // Function Engine.KismetMathLibrary.Vector4_MirrorByVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afe3c0
	bool Vector4_IsZero(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afe2f0
	bool Vector4_IsUnit3(struct FVector4& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector4_IsUnit3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afe1c0
	bool Vector4_IsNormal3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNormal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afe0e0
	bool Vector4_IsNearlyZero3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afdfb0
	bool Vector4_IsNAN(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afdec0
	double Vector4_DotProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afdc50
	double Vector4_DotProduct(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afdd80
	struct FVector4 Vector4_CrossProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_CrossProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afdae0
	void Vector4_Assign(struct FVector4& A, struct FVector4& InVector); // Function Engine.KismetMathLibrary.Vector4_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4afd9e0
	struct FVector2D Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd7f0
	struct FVector2D Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd660
	struct FVector2D Vector2D_Zero(); // Function Engine.KismetMathLibrary.Vector2D_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd9c0
	struct FVector2D Vector2D_Unit45Deg(); // Function Engine.KismetMathLibrary.Vector2D_Unit45Deg // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd9a0
	struct FVector2D Vector2D_One(); // Function Engine.KismetMathLibrary.Vector2D_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afd980
	struct FVector VEase(struct FVector A, struct FVector B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.VEase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afcc60
	struct FDateTime UtcNow(); // Function Engine.KismetMathLibrary.UtcNow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afcc20
	struct FVector4 TransformVector4(struct FMatrix& Matrix, struct FVector4& Vec4); // Function Engine.KismetMathLibrary.TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afc960
	struct FRotator TransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.TransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afc7e0
	struct FVector TransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.TransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afc570
	struct FVector TransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.TransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afc310
	float Transform_Determinant(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Transform_Determinant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afcb10
	struct FVector2D ToSign2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToSign2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afc200
	struct FVector2D ToRounded2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToRounded2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afc100
	void ToDirectionAndLength2D(struct FVector2D A, struct FVector2D& OutDir, double& OutLength); // Function Engine.KismetMathLibrary.ToDirectionAndLength2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afbf80
	struct FDateTime Today(); // Function Engine.KismetMathLibrary.Today // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afc2c0
	struct FTransform TLerp(struct FTransform& A, struct FTransform& B, float Alpha, enum class ELerpInterpolationMode InterpMode); // Function Engine.KismetMathLibrary.TLerp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afb9f0
	struct FTransform TInterpTo(struct FTransform& Current, struct FTransform& Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.TInterpTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afb790
	struct FTimespan TimespanZeroValue(); // Function Engine.KismetMathLibrary.TimespanZeroValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adcf70
	float TimespanRatio(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.TimespanRatio // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afbe90
	struct FTimespan TimespanMinValue(); // Function Engine.KismetMathLibrary.TimespanMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afbe60
	struct FTimespan TimespanMaxValue(); // Function Engine.KismetMathLibrary.TimespanMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afbe30
	bool TimespanFromString(struct FString TimespanString, struct FTimespan& Result); // Function Engine.KismetMathLibrary.TimespanFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afbce0
	struct FTransform TEase(struct FTransform& A, struct FTransform& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.TEase // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afb4a0
	double Tan(double A); // Function Engine.KismetMathLibrary.Tan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afbc50
	struct FVector Subtract_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Subtract_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afb3c0
	struct FVector Subtract_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afb2e0
	struct FVector Subtract_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Subtract_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afb200
	struct FVector4 Subtract_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Subtract_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afb0c0
	struct FVector2D Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afaff0
	struct FVector2D Subtract_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afaf20
	struct FTimespan Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afa860
	struct FQuat Subtract_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Subtract_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afae30
	struct FLinearColor Subtract_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afad40
	struct FIntPoint Subtract_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afac70
	struct FIntPoint Subtract_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afab90
	int32_t Subtract_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afaad0
	int64_t Subtract_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Subtract_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afaa00
	double Subtract_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Subtract_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa930
	struct FDateTime Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afa860
	struct FTimespan Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afa860
	char Subtract_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Subtract_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa7a0
	double Square(double A); // Function Engine.KismetMathLibrary.Square // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa720
	double Sqrt(double A); // Function Engine.KismetMathLibrary.Sqrt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa670
	struct FVector Spherical2DToUnitCartesian(struct FVector2D A); // Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4afa5b0
	double Sin(double A); // Function Engine.KismetMathLibrary.Sin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa520
	int64_t SignOfInteger64(int64_t A); // Function Engine.KismetMathLibrary.SignOfInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa3d0
	int32_t SignOfInteger(int32_t A); // Function Engine.KismetMathLibrary.SignOfInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa480
	double SignOfFloat(double A); // Function Engine.KismetMathLibrary.SignOfFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4afa300
	void SetVectorSpringStateVelocity(struct FVectorSpringState& SpringState, struct FVector Velocity); // Function Engine.KismetMathLibrary.SetVectorSpringStateVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4afa1f0
	void SetRandomStreamSeed(struct FRandomStream& Stream, int32_t NewSeed); // Function Engine.KismetMathLibrary.SetRandomStreamSeed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af9e80
	void SetQuaternionSpringStateAngularVelocity(struct FQuaternionSpringState& SpringState, struct FVector AngularVelocity); // Function Engine.KismetMathLibrary.SetQuaternionSpringStateAngularVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af9d60
	void SetFloatSpringStateVelocity(struct FFloatSpringState& SpringState, float Velocity); // Function Engine.KismetMathLibrary.SetFloatSpringStateVelocity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4af9c80
	void Set2D(struct FVector2D& A, double X, double Y); // Function Engine.KismetMathLibrary.Set2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af96a0
	struct FVector SelectVector(struct FVector A, struct FVector B, bool bPickA); // Function Engine.KismetMathLibrary.SelectVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af9180
	struct FTransform SelectTransform(struct FTransform& A, struct FTransform& B, bool bPickA); // Function Engine.KismetMathLibrary.SelectTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af9470
	struct FString SelectString(struct FString A, struct FString B, bool bPickA); // Function Engine.KismetMathLibrary.SelectString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af92d0
	struct FRotator SelectRotator(struct FRotator A, struct FRotator B, bool bPickA); // Function Engine.KismetMathLibrary.SelectRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af9180
	struct UObject* SelectObject(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af8d40
	int32_t SelectInt(int32_t A, int32_t B, bool bPickA); // Function Engine.KismetMathLibrary.SelectInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af9080
	double SelectFloat(double A, double B, bool bPickA); // Function Engine.KismetMathLibrary.SelectFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af8f60
	struct FLinearColor SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA); // Function Engine.KismetMathLibrary.SelectColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af8e40
	struct UObject* SelectClass(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af8d40
	void SeedRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.SeedRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af8cc0
	double SafeDivide(double A, double B); // Function Engine.KismetMathLibrary.SafeDivide // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af8be0
	int64_t Round64(double A); // Function Engine.KismetMathLibrary.Round64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af8a80
	int32_t Round(double A); // Function Engine.KismetMathLibrary.Round // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af8b50
	struct FRotator RotatorFromAxisAndAngle(struct FVector Axis, float Angle); // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af8980
	struct FVector RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis); // Function Engine.KismetMathLibrary.RotateAngleAxis // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af8820
	struct FRotator RLerp(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath); // Function Engine.KismetMathLibrary.RLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6870
	struct FRotator RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af66e0
	struct FRotator RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6550
	void RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor& HSV); // Function Engine.KismetMathLibrary.RGBToHSV_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6470
	void RGBToHSV(struct FLinearColor InColor, float& H, float& S, float& V, float& A); // Function Engine.KismetMathLibrary.RGBToHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6280
	struct FLinearColor RGBLinearToHSV(struct FLinearColor RGB); // Function Engine.KismetMathLibrary.RGBLinearToHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af61f0
	void ResetVectorSpringState(struct FVectorSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetVectorSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4af8780
	void ResetRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.ResetRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af8700
	void ResetQuaternionSpringState(struct FQuaternionSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetQuaternionSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4af8650
	void ResetFloatSpringState(struct FFloatSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetFloatSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4af85c0
	struct FRotator REase(struct FRotator A, struct FRotator B, float Alpha, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.REase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af5fa0
	struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af8420
	struct FVector RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af82c0
	struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af8110
	struct FVector RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7fa0
	struct FVector RandomUnitVectorInConeInRadiansFromStream(struct FVector& ConeDir, float ConeHalfAngleInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7e60
	struct FVector RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7d60
	struct FVector RandomUnitVectorInConeInDegreesFromStream(struct FVector& ConeDir, float ConeHalfAngleInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7c10
	struct FVector RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7b00
	struct FVector RandomUnitVectorFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7a50
	struct FVector RandomUnitVector(); // Function Engine.KismetMathLibrary.RandomUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7a10
	struct FRotator RandomRotatorFromStream(bool bRoll, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomRotatorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7920
	struct FRotator RandomRotator(bool bRoll); // Function Engine.KismetMathLibrary.RandomRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7880
	struct FVector RandomPointInBoundingBoxFromStream(struct FVector Center, struct FVector HalfSize, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomPointInBoundingBoxFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af7710
	struct FVector RandomPointInBoundingBox(struct FVector Center, struct FVector HalfSize); // Function Engine.KismetMathLibrary.RandomPointInBoundingBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af75c0
	int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af74b0
	int32_t RandomIntegerInRange(int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.RandomIntegerInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af73a0
	int32_t RandomIntegerFromStream(int32_t Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af72d0
	int64_t RandomInteger64InRange(int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64InRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af70f0
	int64_t RandomInteger64(int64_t Max); // Function Engine.KismetMathLibrary.RandomInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af7010
	int32_t RandomInteger(int32_t Max); // Function Engine.KismetMathLibrary.RandomInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af7210
	float RandomFloatInRangeFromStream(float Min, float Max, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6ef0
	double RandomFloatInRange(double Min, double Max); // Function Engine.KismetMathLibrary.RandomFloatInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af6df0
	float RandomFloatFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6d60
	double RandomFloat(); // Function Engine.KismetMathLibrary.RandomFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af6d10
	bool RandomBoolWithWeightFromStream(float Weight, struct FRandomStream& RandomStream); // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6c30
	bool RandomBoolWithWeight(float Weight); // Function Engine.KismetMathLibrary.RandomBoolWithWeight // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af6bb0
	bool RandomBoolFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomBoolFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af6b20
	bool RandomBool(); // Function Engine.KismetMathLibrary.RandomBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af6ac0
	double RadiansToDegrees(double A); // Function Engine.KismetMathLibrary.RadiansToDegrees // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af6a30
	struct FQuat QuaternionSpringInterp(struct FQuat Current, struct FQuat Target, struct FQuaternionSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget); // Function Engine.KismetMathLibrary.QuaternionSpringInterp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af5c60
	struct FVector Quat_VectorUp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4810
	struct FVector Quat_VectorRight(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorRight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4720
	struct FVector Quat_VectorForward(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorForward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4630
	struct FVector Quat_UnrotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_UnrotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af5a40
	float Quat_SizeSquared(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af5980
	float Quat_Size(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af58c0
	void Quat_SetFromEuler(struct FQuat& Q, struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_SetFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af57d0
	void Quat_SetComponents(struct FQuat& Q, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Quat_SetComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af5620
	struct FRotator Quat_Rotator(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Rotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af5580
	struct FVector Quat_RotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_RotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af5370
	struct FQuat Quat_Normalized(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af5200
	void Quat_Normalize(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af50a0
	struct FQuat Quat_MakeFromEuler(struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_MakeFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af5000
	struct FQuat Quat_Log(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Log // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4f60
	bool Quat_IsNormalized(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNormalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4e50
	bool Quat_IsNonFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNonFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4d80
	bool Quat_IsIdentity(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_IsIdentity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4c00
	bool Quat_IsFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4b30
	struct FQuat Quat_Inversed(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Inversed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4a90
	struct FQuat Quat_Identity(); // Function Engine.KismetMathLibrary.Quat_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4a60
	struct FVector Quat_GetRotationAxis(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetRotationAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4920
	struct FVector Quat_GetAxisZ(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4810
	struct FVector Quat_GetAxisY(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4720
	struct FVector Quat_GetAxisX(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4630
	float Quat_GetAngle(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAngle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4570
	struct FQuat Quat_Exp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Exp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af44d0
	struct FVector Quat_Euler(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Euler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4430
	void Quat_EnforceShortestArcWith(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af42d0
	float Quat_AngularDistance(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_AngularDistance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4180
	struct FVector ProjectVectorOnToVector(struct FVector V, struct FVector Target); // Function Engine.KismetMathLibrary.ProjectVectorOnToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af4030
	struct FVector ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af3f00
	struct FVector ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectPointOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af3d80
	bool PointsAreCoplanar(struct TArray<struct FVector>& Points, float Tolerance); // Function Engine.KismetMathLibrary.PointsAreCoplanar // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4af3c80
	float PerlinNoise1D(float Value); // Function Engine.KismetMathLibrary.PerlinNoise1D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af3bf0
	int32_t Percent_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Percent_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af3b10
	double Percent_FloatFloat(double A, double B); // Function Engine.KismetMathLibrary.Percent_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af39a0
	char Percent_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Percent_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af38c0
	int32_t Or_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Or_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af3800
	int64_t Or_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Or_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af3730
	struct FDateTime Now(); // Function Engine.KismetMathLibrary.Now // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af36f0
	bool NotEqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af2190
	bool NotEqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af2050
	bool NotEqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1f70
	bool NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af3400
	bool NotEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af3250
	bool NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af3110
	bool NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af24e0
	bool NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af2e50
	bool NotEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af2c80
	bool NotEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af2410
	bool NotEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.NotEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af2bb0
	bool NotEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af2a00
	bool NotEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af2910
	bool NotEqual_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af2840
	bool NotEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.NotEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af2770
	bool NotEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.NotEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af26a0
	bool NotEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.NotEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af25b0
	bool NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af24e0
	bool NotEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af2410
	bool NotEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.NotEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af2350
	bool NotEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.NotEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af2270
	bool Not_PreBool(bool A); // Function Engine.KismetMathLibrary.Not_PreBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af3660
	int64_t Not_Int64(int64_t A); // Function Engine.KismetMathLibrary.Not_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af3550
	int32_t Not_Int(int32_t A); // Function Engine.KismetMathLibrary.Not_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af35e0
	struct FVector2D NormalSafe2D(struct FVector2D A, float Tolerance); // Function Engine.KismetMathLibrary.NormalSafe2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1a60
	double NormalizeToRange(double Value, double RangeMin, double RangeMax); // Function Engine.KismetMathLibrary.NormalizeToRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af1d40
	struct FRotator NormalizedDeltaRotator(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.NormalizedDeltaRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1e60
	float NormalizeAxis(float Angle); // Function Engine.KismetMathLibrary.NormalizeAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af1cb0
	void Normalize2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.Normalize2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4af1b80
	struct FVector2D Normal2D(struct FVector2D A); // Function Engine.KismetMathLibrary.Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1830
	struct FVector Normal(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Normal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1900
	struct FVector NegateVector(struct FVector A); // Function Engine.KismetMathLibrary.NegateVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1710
	struct FRotator NegateRotator(struct FRotator A); // Function Engine.KismetMathLibrary.NegateRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1660
	struct FVector2D Negated2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.Negated2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af17a0
	bool NearlyEqual_TransformTransform(struct FTransform& A, struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af13f0
	bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af12d0
	double MultiplyMultiply_FloatFloat(double Base, double Exp); // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aefe50
	double MultiplyByPi(double Value); // Function Engine.KismetMathLibrary.MultiplyByPi // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aefdc0
	struct FVector Multiply_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Multiply_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af11f0
	struct FVector Multiply_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0c70
	struct FVector Multiply_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Multiply_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af1110
	struct FVector4 Multiply_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Multiply_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0fd0
	struct FVector2D Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0f00
	struct FVector2D Multiply_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0e30
	struct FTimespan Multiply_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Multiply_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0d50
	struct FRotator Multiply_RotatorInt(struct FRotator A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_RotatorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0c70
	struct FRotator Multiply_RotatorFloat(struct FRotator A, float B); // Function Engine.KismetMathLibrary.Multiply_RotatorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0b90
	struct FQuat Multiply_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Multiply_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af09c0
	struct FMatrix Multiply_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Multiply_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0860
	struct FMatrix Multiply_MatrixFloat(struct FMatrix& A, double B); // Function Engine.KismetMathLibrary.Multiply_MatrixFloat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af06a0
	struct FLinearColor Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af05b0
	struct FLinearColor Multiply_LinearColorFloat(struct FLinearColor A, float B); // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af04e0
	struct FIntPoint Multiply_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0400
	struct FIntPoint Multiply_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4af0320
	int32_t Multiply_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af0260
	double Multiply_IntFloat(int32_t A, double B); // Function Engine.KismetMathLibrary.Multiply_IntFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af0190
	int64_t Multiply_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Multiply_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4af00c0
	double Multiply_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Multiply_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aefff0
	char Multiply_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Multiply_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeff30
	struct FVector MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal); // Function Engine.KismetMathLibrary.MirrorVectorByNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3e80
	void MinOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Function Engine.KismetMathLibrary.MinOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aef9c0
	void MinOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Function Engine.KismetMathLibrary.MinOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aef880
	void MinOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Function Engine.KismetMathLibrary.MinOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aef740
	int64_t MinInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MinInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aef670
	void MinimumAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InVerts, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinimumAreaRectangle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aefb00
	void MinAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InPoints, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutRectLengthX, float& OutRectLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinAreaRectangle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aef3b0
	int32_t Min(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Min // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aef2e0
	void MaxOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Function Engine.KismetMathLibrary.MaxOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aef1a0
	void MaxOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Function Engine.KismetMathLibrary.MaxOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aef060
	void MaxOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Function Engine.KismetMathLibrary.MaxOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4aeef20
	int64_t MaxInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MaxInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeee50
	int32_t Max(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Max // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeed80
	struct FVector4 Matrix_TransformVector4(struct FMatrix& M, struct FVector4 V); // Function Engine.KismetMathLibrary.Matrix_TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeea50
	struct FVector4 Matrix_TransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeebf0
	struct FVector4 Matrix_TransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aee8c0
	struct FQuat Matrix_ToQuat(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ToQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aee7f0
	void Matrix_SetOrigin(struct FMatrix& M, struct FVector NewOrigin); // Function Engine.KismetMathLibrary.Matrix_SetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aee6e0
	void Matrix_SetColumn(struct FMatrix& M, enum class EMatrixColumns Column, struct FVector Value); // Function Engine.KismetMathLibrary.Matrix_SetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aee590
	void Matrix_SetAxis(struct FMatrix& M, enum class EAxis Axis, struct FVector AxisVector); // Function Engine.KismetMathLibrary.Matrix_SetAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aee440
	struct FMatrix Matrix_ScaleTranslation(struct FMatrix& M, struct FVector Scale3D); // Function Engine.KismetMathLibrary.Matrix_ScaleTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aee2b0
	struct FMatrix Matrix_RemoveTranslation(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_RemoveTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aee190
	void Matrix_RemoveScaling(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_RemoveScaling // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4aee090
	struct FMatrix Matrix_Mirror(struct FMatrix& M, enum class EAxis MirrorAxis, enum class EAxis FlipAxis); // Function Engine.KismetMathLibrary.Matrix_Mirror // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aedec0
	struct FVector Matrix_InverseTransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aedd00
	struct FVector Matrix_InverseTransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aedb40
	struct FMatrix Matrix_Identity(); // Function Engine.KismetMathLibrary.Matrix_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aedac0
	struct FVector Matrix_GetUnitAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aed9b0
	void Matrix_GetUnitAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aed810
	struct FMatrix Matrix_GetTransposed(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aed630
	struct FMatrix Matrix_GetTransposeAdjoint(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aed520
	struct FVector Matrix_GetScaleVector(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetScaleVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aed0d0
	struct FVector Matrix_GetScaledAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aed3c0
	void Matrix_GetScaledAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aed1f0
	float Matrix_GetRotDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aecfa0
	struct FRotator Matrix_GetRotator(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb990
	struct FVector Matrix_GetOrigin(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Matrix_GetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aecee0
	float Matrix_GetMaximumAxisScale(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aece20
	struct FMatrix Matrix_GetMatrixWithoutScale(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aecc80
	struct FMatrix Matrix_GetInverse(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetInverse // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aecb70
	bool Matrix_GetFrustumTopPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aec9c0
	bool Matrix_GetFrustumRightPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aec810
	bool Matrix_GetFrustumNearPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aec660
	bool Matrix_GetFrustumLeftPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aec4b0
	bool Matrix_GetFrustumFarPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aec320
	bool Matrix_GetFrustumBottomPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aec170
	float Matrix_GetDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aec0b0
	struct FVector Matrix_GetColumn(struct FMatrix& M, enum class EMatrixColumns Column); // Function Engine.KismetMathLibrary.Matrix_GetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aebfa0
	bool Matrix_ContainsNaN(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ContainsNaN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aebee0
	struct FMatrix Matrix_ConcatenateTranslation(struct FMatrix& M, struct FVector Translation); // Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aebcf0
	struct FMatrix Matrix_ApplyScale(struct FMatrix& M, float Scale); // Function Engine.KismetMathLibrary.Matrix_ApplyScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aebb40
	double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Function Engine.KismetMathLibrary.MapRangeUnclamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeb990
	double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Function Engine.KismetMathLibrary.MapRangeClamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeb7e0
	struct FVector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantizeNormal // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeb6c0
	struct FVector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantize100 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeb6c0
	struct FVector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantize10 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeb6c0
	struct FVector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector_NetQuantize // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aeb6c0
	struct FVector4 MakeVector4(double X, double Y, double Z, double W); // Function Engine.KismetMathLibrary.MakeVector4 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeb550
	struct FVector2D MakeVector2D(double X, double Y); // Function Engine.KismetMathLibrary.MakeVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeb470
	struct FVector MakeVector(double X, double Y, double Z); // Function Engine.KismetMathLibrary.MakeVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeb6c0
	struct FTransform MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function Engine.KismetMathLibrary.MakeTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeb2b0
	struct FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Function Engine.KismetMathLibrary.MakeTimespan2 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeaf90
	struct FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Function Engine.KismetMathLibrary.MakeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeb120
	struct FRotator MakeRotFromZY(struct FVector& Z, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromZY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeabe0
	struct FRotator MakeRotFromZX(struct FVector& Z, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromZX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeaac0
	struct FRotator MakeRotFromZ(struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea9e0
	struct FRotator MakeRotFromYZ(struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromYZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea8c0
	struct FRotator MakeRotFromYX(struct FVector& Y, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromYX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea7a0
	struct FRotator MakeRotFromY(struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea6c0
	struct FRotator MakeRotFromXZ(struct FVector& X, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromXZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea5a0
	struct FRotator MakeRotFromXY(struct FVector& X, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromXY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea480
	struct FRotator MakeRotFromX(struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea3a0
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw); // Function Engine.KismetMathLibrary.MakeRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aeae70
	struct FRotator MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up); // Function Engine.KismetMathLibrary.MakeRotationFromAxes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aead00
	struct FTransform MakeRelativeTransform(struct FTransform& A, struct FTransform& RelativeTo); // Function Engine.KismetMathLibrary.MakeRelativeTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea1d0
	struct FRandomStream MakeRandomStream(int32_t InitialSeed); // Function Engine.KismetMathLibrary.MakeRandomStream // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4aea140
	struct FQuat MakeQuat(float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.MakeQuat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9fc0
	struct FQualifiedFrameTime MakeQualifiedFrameTime(struct FFrameNumber Frame, struct FFrameRate FrameRate, float SubFrame); // Function Engine.KismetMathLibrary.MakeQualifiedFrameTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9ea0
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Function Engine.KismetMathLibrary.MakePulsatingValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae9d80
	struct FPlane MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal); // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9c70
	struct FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator); // Function Engine.KismetMathLibrary.MakeFrameRate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae9bb0
	struct FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Function Engine.KismetMathLibrary.MakeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae99a0
	struct FLinearColor MakeColor(float R, float G, float B, float A); // Function Engine.KismetMathLibrary.MakeColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9830
	struct FBoxSphereBounds MakeBoxSphereBounds(struct FVector Origin, struct FVector BoxExtent, float SphereRadius); // Function Engine.KismetMathLibrary.MakeBoxSphereBounds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae96e0
	struct FBox2D MakeBox2D(struct FVector2D Min, struct FVector2D Max); // Function Engine.KismetMathLibrary.MakeBox2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9510
	struct FBox MakeBox(struct FVector Min, struct FVector Max); // Function Engine.KismetMathLibrary.MakeBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae95e0
	double Loge(double A); // Function Engine.KismetMathLibrary.Loge // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae9480
	double Log(double A, double Base); // Function Engine.KismetMathLibrary.Log // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae93a0
	bool LinePlaneIntersection_OriginNormal(struct FVector& LineStart, struct FVector& LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae7ef0
	bool LinePlaneIntersection(struct FVector& LineStart, struct FVector& LineEnd, struct FPlane& APlane, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae7cf0
	struct FLinearColor LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae8280
	struct FLinearColor LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float Alpha); // Function Engine.KismetMathLibrary.LinearColorLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae8120
	struct FLinearColor LinearColor_Yellow(); // Function Engine.KismetMathLibrary.LinearColor_Yellow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9380
	struct FLinearColor LinearColor_White(); // Function Engine.KismetMathLibrary.LinearColor_White // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9360
	struct FLinearColor LinearColor_Transparent(); // Function Engine.KismetMathLibrary.LinearColor_Transparent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae9340
	struct FColor LinearColor_ToRGBE(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.LinearColor_ToRGBE // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae92b0
	struct FLinearColor LinearColor_ToNewOpacity(struct FLinearColor InColor, float InOpacity); // Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae91d0
	void LinearColor_SetTemperature(struct FLinearColor& InOutColor, float InTemperature); // Function Engine.KismetMathLibrary.LinearColor_SetTemperature // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ae90f0
	void LinearColor_SetRGBA(struct FLinearColor& InOutColor, float R, float G, float B, float A); // Function Engine.KismetMathLibrary.LinearColor_SetRGBA // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ae8eb0
	void LinearColor_SetRandomHue(struct FLinearColor& InOutColor); // Function Engine.KismetMathLibrary.LinearColor_SetRandomHue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ae9060
	void LinearColor_SetFromSRGB(struct FLinearColor& InOutColor, struct FColor& InSRGB); // Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ae8dd0
	void LinearColor_SetFromPow22(struct FLinearColor& InOutColor, struct FColor& InColor); // Function Engine.KismetMathLibrary.LinearColor_SetFromPow22 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ae8cf0
	void LinearColor_SetFromHSV(struct FLinearColor& InOutColor, float H, float S, float V, float A); // Function Engine.KismetMathLibrary.LinearColor_SetFromHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ae8b40
	void LinearColor_Set(struct FLinearColor& InOutColor, struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ae8a70
	struct FLinearColor LinearColor_Red(); // Function Engine.KismetMathLibrary.LinearColor_Red // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae8a50
	struct FColor LinearColor_QuantizeRound(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_QuantizeRound // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae89c0
	struct FColor LinearColor_Quantize(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Quantize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae8930
	bool LinearColor_IsNearEqual(struct FLinearColor A, struct FLinearColor B, float Tolerance); // Function Engine.KismetMathLibrary.LinearColor_IsNearEqual // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae87d0
	struct FLinearColor LinearColor_Green(); // Function Engine.KismetMathLibrary.LinearColor_Green // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae87b0
	struct FLinearColor LinearColor_Gray(); // Function Engine.KismetMathLibrary.LinearColor_Gray // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae8790
	float LinearColor_GetMin(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae8700
	float LinearColor_GetMax(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae8670
	float LinearColor_GetLuminance(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetLuminance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae85d0
	float LinearColor_Distance(struct FLinearColor C1, struct FLinearColor C2); // Function Engine.KismetMathLibrary.LinearColor_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae84d0
	struct FLinearColor LinearColor_Desaturated(struct FLinearColor InColor, float InDesaturation); // Function Engine.KismetMathLibrary.LinearColor_Desaturated // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae83f0
	struct FLinearColor LinearColor_Blue(); // Function Engine.KismetMathLibrary.LinearColor_Blue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae83d0
	struct FLinearColor LinearColor_Black(); // Function Engine.KismetMathLibrary.LinearColor_Black // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae83b0
	struct FVector LessLess_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.LessLess_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae77e0
	bool LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae74a0
	bool LessEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.LessEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae7710
	bool LessEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.LessEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae7640
	bool LessEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.LessEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae7570
	bool LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae74a0
	bool LessEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.LessEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae73e0
	bool Less_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Less_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae79b0
	bool Less_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Less_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae7c20
	bool Less_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Less_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae7b50
	bool Less_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Less_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae7a80
	bool Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Less_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae79b0
	bool Less_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Less_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae78f0
	double Lerp(double A, double B, double Alpha); // Function Engine.KismetMathLibrary.Lerp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae72c0
	bool IsZero2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.IsZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae7210
	bool IsPointInBoxWithTransform(struct FVector Point, struct FTransform& BoxWorldTransform, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae7040
	bool IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6ee0
	bool IsNearlyZero2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.IsNearlyZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6dd0
	bool IsMorning(struct FDateTime A); // Function Engine.KismetMathLibrary.IsMorning // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6d10
	bool IsLeapYear(int32_t Year); // Function Engine.KismetMathLibrary.IsLeapYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae6c80
	bool IsAfternoon(struct FDateTime A); // Function Engine.KismetMathLibrary.IsAfternoon // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6bc0
	struct FTransform InvertTransform(struct FTransform& T); // Function Engine.KismetMathLibrary.InvertTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6a80
	struct FRotator InverseTransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.InverseTransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6900
	struct FVector InverseTransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.InverseTransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae65d0
	struct FVector InverseTransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.InverseTransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6360
	struct FIntPoint IntPoint_Zero(); // Function Engine.KismetMathLibrary.IntPoint_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6330
	struct FIntPoint IntPoint_Up(); // Function Engine.KismetMathLibrary.IntPoint_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6300
	struct FIntPoint IntPoint_Right(); // Function Engine.KismetMathLibrary.IntPoint_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae62e0
	struct FIntPoint IntPoint_One(); // Function Engine.KismetMathLibrary.IntPoint_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae62b0
	struct FIntPoint IntPoint_Left(); // Function Engine.KismetMathLibrary.IntPoint_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6280
	struct FIntPoint IntPoint_Down(); // Function Engine.KismetMathLibrary.IntPoint_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae6250
	bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae60b0
	bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5f10
	bool InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5d40
	double Hypotenuse(double Width, double Height); // Function Engine.KismetMathLibrary.Hypotenuse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5c60
	struct FLinearColor HSVToRGBLinear(struct FLinearColor HSV); // Function Engine.KismetMathLibrary.HSVToRGBLinear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae5af0
	void HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor& RGB); // Function Engine.KismetMathLibrary.HSVToRGB_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae5b80
	struct FLinearColor HSVToRGB(float H, float S, float V, float A); // Function Engine.KismetMathLibrary.HSVToRGB // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae5960
	double GridSnap_Float(double Location, double GridSize); // Function Engine.KismetMathLibrary.GridSnap_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5830
	struct FVector GreaterGreater_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae5320
	bool GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4fe0
	bool GreaterEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.GreaterEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5250
	bool GreaterEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5180
	bool GreaterEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.GreaterEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae50b0
	bool GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4fe0
	bool GreaterEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae4f20
	bool Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Greater_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae54f0
	bool Greater_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Greater_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5760
	bool Greater_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Greater_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5690
	bool Greater_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Greater_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae55c0
	bool Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae54f0
	bool Greater_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Greater_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae5430
	int32_t GetYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4e90
	void GetYawPitchFromVector(struct FVector InVec, float& Yaw, float& Pitch); // Function Engine.KismetMathLibrary.GetYawPitchFromVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4d40
	struct FVector GetVectorArrayAverage(struct TArray<struct FVector>& Vectors); // Function Engine.KismetMathLibrary.GetVectorArrayAverage // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4b70
	struct FVector GetUpVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetUpVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4ac0
	float GetTotalSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4a20
	float GetTotalMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4980
	float GetTotalMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae48e0
	float GetTotalHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4840
	float GetTotalDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae47a0
	struct FTimespan GetTimeOfDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetTimeOfDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4710
	double GetTAU(); // Function Engine.KismetMathLibrary.GetTAU // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae46e0
	void GetSlopeDegreeAngles(struct FVector& MyRightYAxis, struct FVector& FloorNormal, struct FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Function Engine.KismetMathLibrary.GetSlopeDegreeAngles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4320
	int32_t GetSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4250
	int32_t GetSecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetSecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4250
	struct FVector2D GetRotated2D(struct FVector2D A, float AngleDeg); // Function Engine.KismetMathLibrary.GetRotated2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae4040
	struct FVector GetRightVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetRightVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3f90
	struct FVector GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal); // Function Engine.KismetMathLibrary.GetReflectionVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3e80
	float GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.GetPointDistanceToSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3d20
	float GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.GetPointDistanceToLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3bc0
	double GetPI(); // Function Engine.KismetMathLibrary.GetPI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae3b90
	int32_t GetMonth(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMonth // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3a30
	int32_t GetMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3970
	int32_t GetMinute(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMinute // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3970
	double GetMinElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMinElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae38f0
	double GetMin2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMin2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3870
	int32_t GetMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae37a0
	int32_t GetMillisecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMillisecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae36e0
	double GetMaxElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMaxElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3660
	double GetMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae35e0
	int32_t GetHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae32f0
	int32_t GetHour12(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour12 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3260
	int32_t GetHour(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae32f0
	struct FVector GetForwardVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetForwardVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae31b0
	struct FTimespan GetDuration(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDuration // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae3120
	struct FVector GetDirectionUnitVector(struct FVector From, struct FVector To); // Function Engine.KismetMathLibrary.GetDirectionUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2fb0
	int32_t GetDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2f20
	int32_t GetDayOfYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDayOfYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2e90
	int32_t GetDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2e00
	struct FDateTime GetDate(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDate // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2d60
	void GetAzimuthAndElevation(struct FVector InDirection, struct FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Function Engine.KismetMathLibrary.GetAzimuthAndElevation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2890
	void GetAxes(struct FRotator A, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.GetAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2700
	double GetAbsMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbsMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2670
	struct FVector2D GetAbs2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbs2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae25f0
	double FWrap(double Value, double Min, double Max); // Function Engine.KismetMathLibrary.FWrap // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae1490
	struct FIntVector FTruncVector(struct FVector& InVector); // Function Engine.KismetMathLibrary.FTruncVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae13f0
	int64_t FTrunc64(double A); // Function Engine.KismetMathLibrary.FTrunc64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adae10
	int32_t FTrunc(double A); // Function Engine.KismetMathLibrary.FTrunc // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae1370
	struct FTimespan FromSeconds(float Seconds); // Function Engine.KismetMathLibrary.FromSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2560
	struct FTimespan FromMinutes(float Minutes); // Function Engine.KismetMathLibrary.FromMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae24d0
	struct FTimespan FromMilliseconds(float Milliseconds); // Function Engine.KismetMathLibrary.FromMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2440
	struct FTimespan FromHours(float Hours); // Function Engine.KismetMathLibrary.FromHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae23b0
	struct FTimespan FromDays(float Days); // Function Engine.KismetMathLibrary.FromDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae2320
	double Fraction(double A); // Function Engine.KismetMathLibrary.Fraction // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae2280
	int64_t FMod64(double Dividend, double Divisor, double& Remainder); // Function Engine.KismetMathLibrary.FMod64 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ae1130
	int32_t FMod(double Dividend, double Divisor, double& Remainder); // Function Engine.KismetMathLibrary.FMod // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ae1250
	double FMin(double A, double B); // Function Engine.KismetMathLibrary.FMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae1060
	double FMax(double A, double B); // Function Engine.KismetMathLibrary.FMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0f90
	float FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget); // Function Engine.KismetMathLibrary.FloatSpringInterp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4ae1ed0
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Function Engine.KismetMathLibrary.FixedTurn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae1db0
	double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo_Constant // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0de0
	double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0c20
	double FInterpEaseInOut(double A, double B, double Alpha, double Exponent); // Function Engine.KismetMathLibrary.FInterpEaseInOut // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0ac0
	struct FRotator FindRelativeLookAtRotation(struct FTransform& StartTransform, struct FVector& TargetLocation); // Function Engine.KismetMathLibrary.FindRelativeLookAtRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae1c50
	void FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector& Segment1Point, struct FVector& Segment2Point); // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae1a10
	struct FRotator FindLookAtRotation(struct FVector& Start, struct FVector& Target); // Function Engine.KismetMathLibrary.FindLookAtRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae18b0
	struct FVector FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.FindClosestPointOnSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae1760
	struct FVector FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.FindClosestPointOnLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae15f0
	int64_t FFloor64(double A); // Function Engine.KismetMathLibrary.FFloor64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0970
	int32_t FFloor(double A); // Function Engine.KismetMathLibrary.FFloor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0a30
	double FClamp(double Value, double Min, double Max); // Function Engine.KismetMathLibrary.FClamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0850
	int64_t FCeil64(double A); // Function Engine.KismetMathLibrary.FCeil64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae06f0
	int32_t FCeil(double A); // Function Engine.KismetMathLibrary.FCeil // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae07b0
	double Exp(double A); // Function Engine.KismetMathLibrary.Exp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ae0660
	bool EqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.EqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae04b0
	bool EqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae0370
	bool EqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae0290
	bool EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae0140
	bool EqualEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adff90
	bool EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adfe50
	bool EqualEqual_TransformTransform(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adfc80
	bool EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adf120
	bool EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adf9c0
	bool EqualEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adf7f0
	bool EqualEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adf050
	bool EqualEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.EqualEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adf720
	bool EqualEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adf570
	bool EqualEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adf480
	bool EqualEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.EqualEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adf3b0
	bool EqualEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.EqualEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adf2e0
	bool EqualEqual_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.EqualEqual_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adf1f0
	bool EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adf120
	bool EqualEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adf050
	bool EqualEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.EqualEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adef90
	bool EqualEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.EqualEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adeeb0
	bool Equal_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Equal_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ae0590
	double Ease(double A, double B, double Alpha, enum class EEasingFunc EasingFunc, double BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.Ease // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adecc0
	struct FVector DynamicWeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade940
	struct FRotator DynamicWeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade770
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adeb10
	double DotProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.DotProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade5c0
	double Dot_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Dot_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade690
	struct FVector Divide_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Divide_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade4a0
	struct FVector Divide_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Divide_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade390
	struct FVector Divide_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Divide_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade280
	struct FVector4 Divide_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Divide_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade140
	struct FVector2D Divide_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Divide_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ade040
	struct FVector2D Divide_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Divide_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4addf30
	struct FTimespan Divide_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Divide_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adde50
	struct FLinearColor Divide_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4addd60
	struct FIntPoint Divide_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Divide_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4addc60
	struct FIntPoint Divide_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4addb60
	int32_t Divide_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adda80
	int64_t Divide_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Divide_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add990
	double Divide_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Divide_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add8a0
	char Divide_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Divide_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add7c0
	double DistanceSquared2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.DistanceSquared2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4add6f0
	double Distance2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4add620
	double DegTan(double A); // Function Engine.KismetMathLibrary.DegTan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add500
	double DegSin(double A); // Function Engine.KismetMathLibrary.DegSin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add470
	double DegreesToRadians(double A); // Function Engine.KismetMathLibrary.DegreesToRadians // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add590
	double DegCos(double A); // Function Engine.KismetMathLibrary.DegCos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add3e0
	double DegAtan2(double Y, double X); // Function Engine.KismetMathLibrary.DegAtan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add270
	double DegAtan(double A); // Function Engine.KismetMathLibrary.DegAtan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add350
	double DegAsin(double A); // Function Engine.KismetMathLibrary.DegAsin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add1c0
	double DegAcos(double A); // Function Engine.KismetMathLibrary.DegAcos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add110
	int32_t DaysInYear(int32_t Year); // Function Engine.KismetMathLibrary.DaysInYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4add080
	int32_t DaysInMonth(int32_t Year, int32_t Month); // Function Engine.KismetMathLibrary.DaysInMonth // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adcf90
	struct FDateTime DateTimeMinValue(); // Function Engine.KismetMathLibrary.DateTimeMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adcf70
	struct FDateTime DateTimeMaxValue(); // Function Engine.KismetMathLibrary.DateTimeMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adcf40
	bool DateTimeFromString(struct FString DateTimeString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adcdf0
	bool DateTimeFromIsoString(struct FString IsoString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromIsoString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adcca0
	double CrossProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.CrossProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adcac0
	struct FVector Cross_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Cross_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adcb90
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length); // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc990
	double Cos(double A); // Function Engine.KismetMathLibrary.Cos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adc7b0
	struct FTransform ConvertTransformToRelative(struct FTransform& Transform, struct FTransform& ParentTransform); // Function Engine.KismetMathLibrary.ConvertTransformToRelative // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc5e0
	struct FVector2D Conv_VectorToVector2D(struct FVector InVector); // Function Engine.KismetMathLibrary.Conv_VectorToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc560
	struct FTransform Conv_VectorToTransform(struct FVector InLocation); // Function Engine.KismetMathLibrary.Conv_VectorToTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc4a0
	struct FRotator Conv_VectorToRotator(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc3f0
	struct FQuat Conv_VectorToQuaternion(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToQuaternion // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc340
	struct FLinearColor Conv_VectorToLinearColor(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc2a0
	struct FVector Conv_Vector4ToVector(struct FVector4& InVector4); // Function Engine.KismetMathLibrary.Conv_Vector4ToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc1f0
	struct FRotator Conv_Vector4ToRotator(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc130
	struct FQuat Conv_Vector4ToQuaternion(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToQuaternion // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adc070
	struct FVector Conv_Vector2DToVector(struct FVector2D InVector2D, float Z); // Function Engine.KismetMathLibrary.Conv_Vector2DToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adbfa0
	struct FIntPoint Conv_Vector2DToIntPoint(struct FVector2D InVector2D); // Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adbef0
	struct FMatrix Conv_TransformToMatrix(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Conv_TransformToMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adbda0
	struct FVector Conv_RotatorToVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adbcf0
	struct FTransform Conv_RotatorToTransform(struct FRotator& InRotator); // Function Engine.KismetMathLibrary.Conv_RotatorToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adbc10
	struct FQuat Conv_RotatorToQuaternion(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToQuaternion // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adbb60
	struct FTransform Conv_MatrixToTransform(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adba60
	struct FRotator Conv_MatrixToRotator(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb990
	struct FVector Conv_LinearColorToVector(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.Conv_LinearColorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb8f0
	struct FColor Conv_LinearColorToColor(struct FLinearColor InLinearColor, bool InUseSRGB); // Function Engine.KismetMathLibrary.Conv_LinearColorToColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb810
	struct FVector Conv_IntVectorToVector(struct FIntVector& InIntVector); // Function Engine.KismetMathLibrary.Conv_IntVectorToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb750
	struct FVector Conv_IntToVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb6c0
	struct FIntVector Conv_IntToIntVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToIntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb630
	int64_t Conv_IntToInt64(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb5b0
	float Conv_IntToFloat(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb520
	double Conv_IntToDouble(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb490
	char Conv_IntToByte(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb410
	bool Conv_IntToBool(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb380
	struct FVector2D Conv_IntPointToVector2D(struct FIntPoint InIntPoint); // Function Engine.KismetMathLibrary.Conv_IntPointToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb2f0
	int32_t Conv_Int64ToInt(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb270
	double Conv_Int64ToDouble(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb1e0
	char Conv_Int64ToByte(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adb160
	struct FVector Conv_FloatToVector(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb0d0
	struct FLinearColor Conv_FloatToLinearColor(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adb040
	double Conv_FloatToDouble(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adafc0
	struct FVector Conv_DoubleToVector(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adaf30
	struct FLinearColor Conv_DoubleToLinearColor(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adae90
	int64_t Conv_DoubleToInt64(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adae10
	float Conv_DoubleToFloat(double InDouble); // Function Engine.KismetMathLibrary.Conv_DoubleToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adad90
	struct FLinearColor Conv_ColorToLinearColor(struct FColor InColor); // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4adad00
	int64_t Conv_ByteToInt64(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adac00
	int32_t Conv_ByteToInt(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adac80
	float Conv_ByteToFloat(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adab80
	double Conv_ByteToDouble(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adab00
	int32_t Conv_BoolToInt(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4adaa70
	float Conv_BoolToFloat(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ada9e0
	char Conv_BoolToByte(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ada950
	struct FTransform ComposeTransforms(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.ComposeTransforms // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ada750
	struct FRotator ComposeRotators(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.ComposeRotators // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ada640
	bool ClassIsChildOf(struct UObject* TestClass, struct UObject* ParentClass); // Function Engine.KismetMathLibrary.ClassIsChildOf // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ada4b0
	struct FVector ClampVectorSize(struct FVector A, double Min, double Max); // Function Engine.KismetMathLibrary.ClampVectorSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ada2e0
	int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max); // Function Engine.KismetMathLibrary.ClampInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ada1d0
	float ClampAxis(float Angle); // Function Engine.KismetMathLibrary.ClampAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ada140
	struct FVector2D ClampAxes2D(struct FVector2D A, double MinAxisVal, double MaxAxisVal); // Function Engine.KismetMathLibrary.ClampAxes2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ada000
	double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees); // Function Engine.KismetMathLibrary.ClampAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad9ed0
	int32_t Clamp(int32_t Value, int32_t Min, int32_t Max); // Function Engine.KismetMathLibrary.Clamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad9dd0
	struct FLinearColor CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.CInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad9c40
	void BreakVector_NetQuantizeNormal(struct FVector_NetQuantizeNormal InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantizeNormal // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ad9aa0
	void BreakVector_NetQuantize100(struct FVector_NetQuantize100 InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantize100 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ad9aa0
	void BreakVector_NetQuantize10(struct FVector_NetQuantize10 InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantize10 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ad9aa0
	void BreakVector_NetQuantize(struct FVector_NetQuantize InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector_NetQuantize // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ad9aa0
	void BreakVector4(struct FVector4& InVec, double& X, double& Y, double& Z, double& W); // Function Engine.KismetMathLibrary.BreakVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad9880
	void BreakVector3f(struct FVector3f InVec, float& X, float& Y, float& Z); // Function Engine.KismetMathLibrary.BreakVector3f // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad96f0
	void BreakVector2D(struct FVector2D InVec, double& X, double& Y); // Function Engine.KismetMathLibrary.BreakVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad95c0
	void BreakVector(struct FVector InVec, double& X, double& Y, double& Z); // Function Engine.KismetMathLibrary.BreakVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad9aa0
	void BreakTransform(struct FTransform& InTransform, struct FVector& Location, struct FRotator& Rotation, struct FVector& Scale); // Function Engine.KismetMathLibrary.BreakTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad9380
	void BreakTimespan2(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Function Engine.KismetMathLibrary.BreakTimespan2 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad8f60
	void BreakTimespan(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Function Engine.KismetMathLibrary.BreakTimespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad9170
	void BreakRotIntoAxes(struct FRotator& InRot, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.BreakRotIntoAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad8c40
	void BreakRotator(struct FRotator InRot, float& Roll, float& Pitch, float& Yaw); // Function Engine.KismetMathLibrary.BreakRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad8dd0
	void BreakRandomStream(struct FRandomStream& InRandomStream, int32_t& InitialSeed); // Function Engine.KismetMathLibrary.BreakRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad8b60
	void BreakQuat(struct FQuat& InQuat, float& X, float& Y, float& Z, float& W); // Function Engine.KismetMathLibrary.BreakQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad8950
	void BreakQualifiedFrameTime(struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber& Frame, struct FFrameRate& FrameRate, float& SubFrame); // Function Engine.KismetMathLibrary.BreakQualifiedFrameTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad87b0
	void BreakFrameRate(struct FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Function Engine.KismetMathLibrary.BreakFrameRate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4ad8680
	void BreakDateTime(struct FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Function Engine.KismetMathLibrary.BreakDateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad83d0
	void BreakColor(struct FLinearColor InColor, float& R, float& G, float& B, float& A); // Function Engine.KismetMathLibrary.BreakColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad81f0
	void BreakBoxSphereBounds(struct FBoxSphereBounds& InBoxSphereBounds, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetMathLibrary.BreakBoxSphereBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad8030
	bool BooleanXOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanXOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7f60
	bool BooleanOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7e80
	bool BooleanNOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7da0
	bool BooleanNAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7cc0
	bool BooleanAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7be0
	char BMin(char A, char B); // Function Engine.KismetMathLibrary.BMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7b10
	char BMax(char A, char B); // Function Engine.KismetMathLibrary.BMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7a40
	double Atan2(double Y, double X); // Function Engine.KismetMathLibrary.Atan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad78d0
	double Atan(double A); // Function Engine.KismetMathLibrary.Atan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad79b0
	double Asin(double A); // Function Engine.KismetMathLibrary.Asin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7830
	int32_t And_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.And_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad7770
	int64_t And_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.And_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad76a0
	struct FVector Add_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Add_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad75c0
	struct FVector Add_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Add_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad74e0
	struct FVector Add_VectorFloat(struct FVector A, double B); // Function Engine.KismetMathLibrary.Add_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad7400
	struct FVector4 Add_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Add_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad72c0
	struct FVector2D Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Add_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad71f0
	struct FVector2D Add_Vector2DFloat(struct FVector2D A, double B); // Function Engine.KismetMathLibrary.Add_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad7120
	struct FTimespan Add_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad67e0
	struct FQuat Add_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Add_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad7030
	struct FMatrix Add_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Add_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad6db0
	struct FLinearColor Add_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Add_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad6cc0
	struct FIntPoint Add_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Add_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad6bf0
	struct FIntPoint Add_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad6b10
	int32_t Add_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad6a50
	int64_t Add_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Add_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad6980
	double Add_DoubleDouble(double A, double B); // Function Engine.KismetMathLibrary.Add_DoubleDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad68b0
	struct FDateTime Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad67e0
	struct FDateTime Add_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Add_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4ad67e0
	char Add_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Add_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad6720
	double Acos(double A); // Function Engine.KismetMathLibrary.Acos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad6680
	int64_t Abs_Int64(int64_t A); // Function Engine.KismetMathLibrary.Abs_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad6560
	int32_t Abs_Int(int32_t A); // Function Engine.KismetMathLibrary.Abs_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad65f0
	double Abs(double A); // Function Engine.KismetMathLibrary.Abs // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ad64d0
};

// Class Engine.KismetNodeHelperLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetNodeHelperLibrary : UBlueprintFunctionLibrary {

	void MarkBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.MarkBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b09750
	bool HasUnmarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b08b80
	bool HasMarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasMarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b08ab0
	char GetValidValue(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetValidValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b089e0
	int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b088a0
	int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b08640
	int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b08540
	char GetEnumeratorValueFromIndex(struct UEnum* Enum, char EnumeratorIndex); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b08470
	struct FString GetEnumeratorUserFriendlyName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b08360
	struct FName GetEnumeratorName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b08290
	void ClearBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.ClearBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b054c0
	void ClearAllBits(int32_t& Data); // Function Engine.KismetNodeHelperLibrary.ClearAllBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b05440
	bool BitIsMarked(int32_t Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.BitIsMarked // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b03bd0
};

// Class Engine.KismetRenderingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetRenderingLibrary : UBlueprintFunctionLibrary {

	void SetCastInsetShadowForAllAttachments(struct UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b0b3b0
	struct UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(struct UTextureRenderTarget2D* RenderTarget, struct FString Name, enum class TextureCompressionSettings CompressionSettings, enum class TextureMipGenSettings MipSettings); // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b0aa60
	void ReleaseRenderTarget2D(struct UTextureRenderTarget2D* TextureRenderTarget); // Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b0a9e0
	struct FColor ReadRenderTargetUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b0a890
	struct TArray<struct FLinearColor> ReadRenderTargetRawUVArea(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FBox2D Area, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUVArea // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b0a6b0
	struct FLinearColor ReadRenderTargetRawUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b0a4f0
	struct TArray<struct FLinearColor> ReadRenderTargetRawPixelArea(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t MinX, int32_t MinY, int32_t MaxX, int32_t MaxY, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixelArea // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b0a2a0
	struct FLinearColor ReadRenderTargetRawPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b0a0f0
	bool ReadRenderTargetRaw(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct TArray<struct FLinearColor>& OutLinearSamples, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRaw // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b09f80
	struct FColor ReadRenderTargetPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b09e30
	bool ReadRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct TArray<struct FColor>& OutSamples, bool bNormalize); // Function Engine.KismetRenderingLibrary.ReadRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b09cc0
	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b094d0
	struct UTexture2D* ImportFileAsTexture2D(struct UObject* WorldContextObject, struct FString Filename); // Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b08d40
	struct UTexture2D* ImportBufferAsTexture2D(struct UObject* WorldContextObject, struct TArray<char>& Buffer); // Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b08c50
	void ExportTexture2D(struct UObject* WorldContextObject, struct UTexture2D* Texture, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b07da0
	void ExportRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b07c30
	void EndDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b07840
	void DrawMaterialToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UMaterialInterface* Material); // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b07740
	struct UTextureRenderTargetVolume* CreateRenderTargetVolume(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTargetVolume // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b07400
	struct UTextureRenderTarget2DArray* CreateRenderTarget2DArray(struct UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2DArray // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b071f0
	struct UTextureRenderTarget2D* CreateRenderTarget2D(struct UObject* WorldContextObject, int32_t Width, int32_t Height, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b07020
	void ConvertRenderTargetToTexture2DEditorOnly(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* RenderTarget, struct UTexture2D* Texture); // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4b06f20
	void ClearRenderTarget2D(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FLinearColor ClearColor); // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b05590
	struct FMatrix CalculateProjectionMatrix(struct FMinimalViewInfo& MinimalViewInfo); // Function Engine.KismetRenderingLibrary.CalculateProjectionMatrix // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b052b0
	void BreakSkinWeightInfo(struct FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b03ca0
	void BeginDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UCanvas*& Canvas, struct FVector2D& Size, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b03a10
};

// Class Engine.KismetStringLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringLibrary : UBlueprintFunctionLibrary {

	struct FString TrimTrailing(struct FString SourceString); // Function Engine.KismetStringLibrary.TrimTrailing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0bbb0
	struct FString Trim(struct FString SourceString); // Function Engine.KismetStringLibrary.Trim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0bad0
	struct FString ToUpper(struct FString SourceString); // Function Engine.KismetStringLibrary.ToUpper // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0b9f0
	struct FString ToLower(struct FString SourceString); // Function Engine.KismetStringLibrary.ToLower // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0b910
	struct FString TimeSecondsToString(float InSeconds); // Function Engine.KismetStringLibrary.TimeSecondsToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0b840
	bool StartsWith(struct FString SourceString, struct FString InPrefix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.StartsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0b700
	bool Split(struct FString SourceString, struct FString InStr, struct FString& LeftS, struct FString& RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir); // Function Engine.KismetStringLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b0b4c0
	struct FString RightPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.RightPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0b290
	struct FString RightChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.RightChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0b170
	struct FString Right(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Right // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0b050
	struct FString Reverse(struct FString SourceString); // Function Engine.KismetStringLibrary.Reverse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0af70
	int32_t ReplaceInline(struct FString& SourceString, struct FString SearchText, struct FString ReplacementText, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.ReplaceInline // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b0add0
	struct FString Replace(struct FString SourceString, struct FString From, struct FString To, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.Replace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b0ac00
	struct TArray<struct FString> ParseIntoArray(struct FString SourceString, struct FString Delimiter, bool CullEmptyStrings); // Function Engine.KismetStringLibrary.ParseIntoArray // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b09b40
	bool NotEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b09960
	bool NotEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b09a50
	struct FString Mid(struct FString SourceString, int32_t Start, int32_t Count); // Function Engine.KismetStringLibrary.Mid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b08740
	bool MatchesWildcard(struct FString SourceString, struct FString Wildcard, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.MatchesWildcard // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b09820
	int32_t Len(struct FString S); // Function Engine.KismetStringLibrary.Len // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b09430
	struct FString LeftPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.LeftPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b09310
	struct FString LeftChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.LeftChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b091f0
	struct FString Left(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Left // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b090d0
	struct FString JoinStringArray(struct TArray<struct FString>& SourceArray, struct FString Separator); // Function Engine.KismetStringLibrary.JoinStringArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b08f60
	bool IsNumeric(struct FString SourceString); // Function Engine.KismetStringLibrary.IsNumeric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b08ec0
	bool IsEmpty(struct FString InString); // Function Engine.KismetStringLibrary.IsEmpty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b08e20
	struct FString GetSubstring(struct FString SourceString, int32_t StartIndex, int32_t Length); // Function Engine.KismetStringLibrary.GetSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b08740
	int32_t GetCharacterAsNumber(struct FString SourceString, int32_t Index); // Function Engine.KismetStringLibrary.GetCharacterAsNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b081b0
	struct TArray<struct FString> GetCharacterArrayFromString(struct FString SourceString); // Function Engine.KismetStringLibrary.GetCharacterArrayFromString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b080d0
	int32_t FindSubstring(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Function Engine.KismetStringLibrary.FindSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b07f10
	bool EqualEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b07a50
	bool EqualEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b07b40
	bool EndsWith(struct FString SourceString, struct FString InSuffix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.EndsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b07910
	int32_t CullArray(struct FString SourceString, struct TArray<struct FString>& inArray); // Function Engine.KismetStringLibrary.CullArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b07610
	struct FString Conv_VectorToString(struct FVector InVec); // Function Engine.KismetStringLibrary.Conv_VectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06e40
	struct FString Conv_Vector3fToString(struct FVector3f InVec); // Function Engine.KismetStringLibrary.Conv_Vector3fToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06d60
	struct FString Conv_Vector2dToString(struct FVector2D InVec); // Function Engine.KismetStringLibrary.Conv_Vector2dToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06c90
	struct FString Conv_TransformToString(struct FTransform& InTrans); // Function Engine.KismetStringLibrary.Conv_TransformToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06b40
	void Conv_StringToVector3f(struct FString InString, struct FVector3f& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector3f // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b068e0
	void Conv_StringToVector2D(struct FString InString, struct FVector2D& OutConvertedVector2D, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b067b0
	void Conv_StringToVector(struct FString InString, struct FVector& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06a10
	void Conv_StringToRotator(struct FString InString, struct FRotator& OutConvertedRotator, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06680
	struct FName Conv_StringToName(struct FString InString); // Function Engine.KismetStringLibrary.Conv_StringToName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b065d0
	int32_t Conv_StringToInt(struct FString InString); // Function Engine.KismetStringLibrary.Conv_StringToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b06530
	double Conv_StringToDouble(struct FString InString); // Function Engine.KismetStringLibrary.Conv_StringToDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b06490
	void Conv_StringToColor(struct FString InString, struct FLinearColor& OutConvertedColor, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06360
	struct FString Conv_RotatorToString(struct FRotator InRot); // Function Engine.KismetStringLibrary.Conv_RotatorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b06280
	struct FString Conv_ObjectToString(struct UObject* InObj); // Function Engine.KismetStringLibrary.Conv_ObjectToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b061b0
	struct FString Conv_NameToString(struct FName InName); // Function Engine.KismetStringLibrary.Conv_NameToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b060e0
	struct FString Conv_MatrixToString(struct FMatrix& InMatrix); // Function Engine.KismetStringLibrary.Conv_MatrixToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b05fe0
	struct FString Conv_IntVectorToString(struct FIntVector InIntVec); // Function Engine.KismetStringLibrary.Conv_IntVectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b05f00
	struct FString Conv_IntToString(int32_t inInt); // Function Engine.KismetStringLibrary.Conv_IntToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b05e30
	struct FString Conv_IntPointToString(struct FIntPoint InIntPoint); // Function Engine.KismetStringLibrary.Conv_IntPointToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b05d70
	struct FString Conv_Int64ToString(int64_t inInt); // Function Engine.KismetStringLibrary.Conv_Int64ToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b05ca0
	struct FString Conv_DoubleToString(double InDouble); // Function Engine.KismetStringLibrary.Conv_DoubleToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b05bd0
	struct FString Conv_ColorToString(struct FLinearColor InColor); // Function Engine.KismetStringLibrary.Conv_ColorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b05b00
	struct FString Conv_ByteToString(char InByte); // Function Engine.KismetStringLibrary.Conv_ByteToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b05a30
	struct FString Conv_BoolToString(bool InBool); // Function Engine.KismetStringLibrary.Conv_BoolToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b05960
	bool Contains(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd); // Function Engine.KismetStringLibrary.Contains // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b057e0
	struct FString Concat_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.Concat_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b056a0
	struct FString BuildString_Vector2d(struct FString AppendTo, struct FString Prefix, struct FVector2D InVector2D, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector2d // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b04ef0
	struct FString BuildString_Vector(struct FString AppendTo, struct FString Prefix, struct FVector InVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b050d0
	struct FString BuildString_Rotator(struct FString AppendTo, struct FString Prefix, struct FRotator InRot, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Rotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b04d10
	struct FString BuildString_Object(struct FString AppendTo, struct FString Prefix, struct UObject* InObj, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Object // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b04b40
	struct FString BuildString_Name(struct FString AppendTo, struct FString Prefix, struct FName InName, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Name // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b04970
	struct FString BuildString_IntVector(struct FString AppendTo, struct FString Prefix, struct FIntVector InIntVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_IntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b04790
	struct FString BuildString_Int(struct FString AppendTo, struct FString Prefix, int32_t inInt, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b045c0
	struct FString BuildString_Double(struct FString AppendTo, struct FString Prefix, double InDouble, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Double // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b043f0
	struct FString BuildString_Color(struct FString AppendTo, struct FString Prefix, struct FLinearColor InColor, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Color // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b04210
	struct FString BuildString_Bool(struct FString AppendTo, struct FString Prefix, bool InBool, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Bool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b04040
};

// Class Engine.KismetStringTableLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringTableLibrary : UBlueprintFunctionLibrary {

	bool IsRegisteredTableId(struct FName TableId); // Function Engine.KismetStringTableLibrary.IsRegisteredTableId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a260
	bool IsRegisteredTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a180
	struct FString GetTableNamespace(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetTableNamespace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19df0
	struct FString GetTableEntrySourceString(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19cd0
	struct FString GetTableEntryMetaData(struct FName TableId, struct FString Key, struct FName MetaDataId); // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19b60
	struct TArray<struct FName> GetRegisteredStringTables(); // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19760
	struct TArray<struct FName> GetMetaDataIdsFromStringTableEntry(struct FName TableId, struct FString Key); // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18910
	struct TArray<struct FString> GetKeysFromStringTable(struct FName TableId); // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18840
};

// Class Engine.KismetSystemLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetSystemLibrary : UBlueprintFunctionLibrary {

	void UnregisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1fce0
	void UnloadPrimaryAssetList(struct TArray<struct FPrimaryAssetId>& PrimaryAssetIdList); // Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b23ac0
	void UnloadPrimaryAsset(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.UnloadPrimaryAsset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b23a30
	void TransactObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.TransactObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b14e30
	void StackTrace(); // Function Engine.KismetSystemLibrary.StackTrace // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b23a10
	bool SphereTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b23540
	bool SphereTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b23090
	bool SphereTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b22be0
	bool SphereTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b22770
	bool SphereTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b22310
	bool SphereTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b21eb0
	bool SphereOverlapComponents(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.SphereOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b21c20
	bool SphereOverlapActors(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.SphereOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b21990
	void SnapshotObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.SnapshotObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b14e30
	void ShowPlatformSpecificLeaderboardScreen(struct FString CategoryName); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b21900
	void ShowPlatformSpecificAchievementsScreen(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b21880
	void ShowInterstitialAd(); // Function Engine.KismetSystemLibrary.ShowInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b21860
	void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Function Engine.KismetSystemLibrary.ShowAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b217a0
	void SetWindowTitle(struct FText& Title); // Function Engine.KismetSystemLibrary.SetWindowTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b216e0
	void SetVolumeButtonsHandledBySystem(bool bEnabled); // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b143b0
	void SetVectorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector& Value); // Function Engine.KismetSystemLibrary.SetVectorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b215d0
	void SetVector3fPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector3f& Value); // Function Engine.KismetSystemLibrary.SetVector3fPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b214c0
	void SetUserActivity(struct FUserActivity& UserActivity); // Function Engine.KismetSystemLibrary.SetUserActivity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b21420
	void SetTransformPropertyByName(struct UObject* Object, struct FName PropertyName, struct FTransform& Value); // Function Engine.KismetSystemLibrary.SetTransformPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b212a0
	void SetTextPropertyByName(struct UObject* Object, struct FName PropertyName, struct FText& Value); // Function Engine.KismetSystemLibrary.SetTextPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b21150
	void SetSuppressViewportTransitionMessage(struct UObject* WorldContextObject, bool bState); // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b21090
	void SetStructurePropertyByName(struct UObject* Object, struct FName PropertyName, struct FGenericStruct& Value); // Function Engine.KismetSystemLibrary.SetStructurePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b20140
	void SetStringPropertyByName(struct UObject* Object, struct FName PropertyName, struct FString Value); // Function Engine.KismetSystemLibrary.SetStringPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b20f70
	void SetSoftObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftObjectPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b20e20
	void SetSoftClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftClassPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b20cd0
	void SetRotatorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FRotator& Value); // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b20bc0
	void SetObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetObjectPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b20ac0
	void SetNamePropertyByName(struct UObject* Object, struct FName PropertyName, struct FName& Value); // Function Engine.KismetSystemLibrary.SetNamePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b209b0
	void SetLinearColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FLinearColor& Value); // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b208a0
	void SetIntPropertyByName(struct UObject* Object, struct FName PropertyName, int32_t Value); // Function Engine.KismetSystemLibrary.SetIntPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b20690
	void SetInterfacePropertyByName(struct UObject* Object, struct FName PropertyName, struct TScriptInterface<IInterface>& Value); // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b20790
	void SetInt64PropertyByName(struct UObject* Object, struct FName PropertyName, int64_t Value); // Function Engine.KismetSystemLibrary.SetInt64PropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b20590
	void SetGamepadsBlockDeviceFeedback(bool bBlock); // Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b143b0
	void SetFieldPathPropertyByName(struct UObject* Object, struct FName PropertyName, struct TFieldPath<FField>& Value); // Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b20460
	void SetDoublePropertyByName(struct UObject* Object, struct FName PropertyName, double Value); // Function Engine.KismetSystemLibrary.SetDoublePropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b20350
	void SetColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FColor& Value); // Function Engine.KismetSystemLibrary.SetColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b20240
	void SetCollisionProfileNameProperty(struct UObject* Object, struct FName PropertyName, struct FCollisionProfileName& Value); // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b20140
	void SetClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetClassPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b20040
	void SetBytePropertyByName(struct UObject* Object, struct FName PropertyName, char Value); // Function Engine.KismetSystemLibrary.SetBytePropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1ff40
	void SetBoolPropertyByName(struct UObject* Object, struct FName PropertyName, bool Value); // Function Engine.KismetSystemLibrary.SetBoolPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1fe40
	void RetriggerableDelay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.RetriggerableDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1fd00
	void ResetGamepadAssignmentToController(int32_t ControllerId); // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x215dc80
	void ResetGamepadAssignments(); // Function Engine.KismetSystemLibrary.ResetGamepadAssignments // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1fa7480
	void RegisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1fce0
	void QuitGame(struct UObject* WorldContextObject, struct APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions); // Function Engine.KismetSystemLibrary.QuitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1fb90
	void PrintWarning(struct FString InString); // Function Engine.KismetSystemLibrary.PrintWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1fb00
	void PrintText(struct UObject* WorldContextObject, struct FText InText, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration, struct FName Key); // Function Engine.KismetSystemLibrary.PrintText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b1f860
	void PrintString(struct UObject* WorldContextObject, struct FString InString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration, struct FName Key); // Function Engine.KismetSystemLibrary.PrintString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b1f610
	bool ParseParamValue(struct FString InString, struct FString InParam, struct FString& OutValue); // Function Engine.KismetSystemLibrary.ParseParamValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b1f4b0
	bool ParseParam(struct FString InString, struct FString InParam); // Function Engine.KismetSystemLibrary.ParseParam // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1f3c0
	void ParseCommandLine(struct FString InCmdLine, struct TArray<struct FString>& OutTokens, struct TArray<struct FString>& OutSwitches, struct TMap<struct FString, struct FString>& OutParams); // Function Engine.KismetSystemLibrary.ParseCommandLine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b1f150
	void OnAssetLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature // (Public|Delegate) // @ game+0x2552560
	void OnAssetClassLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature // (Public|Delegate) // @ game+0x2552560
	bool NotEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b1f000
	bool NotEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b1f000
	bool NotEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xdedab0
	bool NotEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xded9c0
	struct FString NormalizeFilename(struct FString InFilename); // Function Engine.KismetSystemLibrary.NormalizeFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1ef20
	void MoveComponentTo(struct USceneComponent* Component, struct FVector TargetRelativeLocation, struct FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.MoveComponentTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b1ec10
	struct FSoftObjectPath MakeSoftObjectPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftObjectPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b1eb20
	struct FSoftClassPath MakeSoftClassPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftClassPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b1ea60
	struct FText MakeLiteralText(struct FText Value); // Function Engine.KismetSystemLibrary.MakeLiteralText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e900
	struct FString MakeLiteralString(struct FString Value); // Function Engine.KismetSystemLibrary.MakeLiteralString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e7f0
	struct FName MakeLiteralName(struct FName Value); // Function Engine.KismetSystemLibrary.MakeLiteralName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e770
	int64_t MakeLiteralInt64(int64_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e670
	int32_t MakeLiteralInt(int32_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e6f0
	float MakeLiteralFloat(float Value); // Function Engine.KismetSystemLibrary.MakeLiteralFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e5f0
	double MakeLiteralDouble(double Value); // Function Engine.KismetSystemLibrary.MakeLiteralDouble // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e570
	char MakeLiteralByte(char Value); // Function Engine.KismetSystemLibrary.MakeLiteralByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1e4f0
	bool MakeLiteralBool(bool Value); // Function Engine.KismetSystemLibrary.MakeLiteralBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4ada950
	void LogString(struct FString InString, bool bPrintToLog); // Function Engine.KismetSystemLibrary.LogString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1e420
	void LoadInterstitialAd(int32_t AdIdIndex); // Function Engine.KismetSystemLibrary.LoadInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1e3a0
	struct UObject* LoadClassAsset_Blocking(struct TSoftClassPtr<UObject> AssetClass); // Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1e260
	void LoadAssetClass(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> AssetClass, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAssetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1dee0
	struct UObject* LoadAsset_Blocking(struct TSoftObjectPtr<UObject> Asset); // Function Engine.KismetSystemLibrary.LoadAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1e120
	void LoadAsset(struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> Asset, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1dca0
	bool LineTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b1d810
	bool LineTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b1d3a0
	bool LineTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b1cf20
	bool LineTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b1cae0
	bool LineTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b1c6c0
	bool LineTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b1c2a0
	void LaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.LaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1c210
	void K2_UnPauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1c150
	void K2_UnPauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1c0c0
	void K2_UnPauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_UnPauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1bfa0
	bool K2_TimerExistsHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1bed0
	bool K2_TimerExistsDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1be30
	bool K2_TimerExists(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_TimerExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1bd00
	struct FTimerHandle K2_SetTimerForNextTickDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_SetTimerForNextTickDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1bc50
	struct FTimerHandle K2_SetTimerForNextTick(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_SetTimerForNextTick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1bb30
	struct FTimerHandle K2_SetTimerDelegate(struct FDelegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1b980
	struct FTimerHandle K2_SetTimer(struct UObject* Object, struct FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1b720
	void K2_PauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1b660
	void K2_PauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1b5d0
	void K2_PauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_PauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1b4b0
	bool K2_IsValidTimerHandle(struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1b420
	bool K2_IsTimerPausedHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1b350
	bool K2_IsTimerPausedDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1b2b0
	bool K2_IsTimerPaused(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerPaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1b180
	bool K2_IsTimerActiveHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1b0b0
	bool K2_IsTimerActiveDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1b010
	bool K2_IsTimerActive(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerActive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1aee0
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b1ae40
	float K2_GetTimerRemainingTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1ad70
	float K2_GetTimerRemainingTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1acd0
	float K2_GetTimerRemainingTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1aba0
	float K2_GetTimerElapsedTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1aad0
	float K2_GetTimerElapsedTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1aa30
	float K2_GetTimerElapsedTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a900
	void K2_ClearTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1a840
	void K2_ClearTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1a7b0
	void K2_ClearTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_ClearTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1a690
	void K2_ClearAndInvalidateTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b1a5c0
	bool IsValidSoftObjectReference(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.IsValidSoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b1a4f0
	bool IsValidSoftClassReference(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.IsValidSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b1a4f0
	bool IsValidPrimaryAssetType(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xded930
	bool IsValidPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xded890
	bool IsValidClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.IsValidClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a440
	bool IsValid(struct UObject* Object); // Function Engine.KismetSystemLibrary.IsValid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a440
	bool IsUnattended(); // Function Engine.KismetSystemLibrary.IsUnattended // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a410
	bool IsStandalone(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsStandalone // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a380
	bool IsSplitScreen(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsSplitScreen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19ec0
	bool IsServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a2f0
	bool IsScreensaverEnabled(); // Function Engine.KismetSystemLibrary.IsScreensaverEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9fa540
	bool IsPackagedForDistribution(); // Function Engine.KismetSystemLibrary.IsPackagedForDistribution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fa8490
	bool IsLoggedIn(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.IsLoggedIn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a0f0
	bool IsInterstitialAdRequested(); // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1a0c0
	bool IsInterstitialAdAvailable(); // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b1a090
	bool IsDedicatedServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsDedicatedServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b1a000
	bool IsControllerAssignedToGamepad(int32_t ControllerId); // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19f70
	void HideAdBanner(); // Function Engine.KismetSystemLibrary.HideAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b19f50
	bool HasMultipleLocalPlayers(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.HasMultipleLocalPlayers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19ec0
	bool GetVolumeButtonsHandledBySystem(); // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1fa8490
	struct FString GetUniqueDeviceId(); // Function Engine.KismetSystemLibrary.GetUniqueDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x225aad0
	struct FString GetSystemPath(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetSystemPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19a90
	bool GetSupportedFullscreenResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b199e0
	struct TSoftObjectPtr<UObject> GetSoftObjectReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b19910
	struct TSoftClassPtr<UObject> GetSoftClassReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b19840
	int32_t GetRenderingMaterialQualityLevel(); // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19810
	int32_t GetRenderingDetailMode(); // Function Engine.KismetSystemLibrary.GetRenderingDetailMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b197e0
	struct FString GetProjectSavedDirectory(); // Function Engine.KismetSystemLibrary.GetProjectSavedDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b196e0
	struct FString GetProjectDirectory(); // Function Engine.KismetSystemLibrary.GetProjectDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b19660
	struct FString GetProjectContentDirectory(); // Function Engine.KismetSystemLibrary.GetProjectContentDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b195e0
	void GetPrimaryAssetsWithBundleState(struct TArray<struct FName>& RequiredBundles, struct TArray<struct FName>& ExcludedBundles, struct TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b193c0
	void GetPrimaryAssetIdList(struct FPrimaryAssetType PrimaryAssetType, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b192e0
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(struct TSoftObjectPtr<UObject> SoftObjectReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b19180
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(struct TSoftClassPtr<UObject> SoftClassReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b19020
	struct FPrimaryAssetId GetPrimaryAssetIdFromObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b18f80
	struct FPrimaryAssetId GetPrimaryAssetIdFromClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b18ee0
	struct TArray<struct FString> GetPreferredLanguages(); // Function Engine.KismetSystemLibrary.GetPreferredLanguages // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b18e60
	struct FString GetPlatformUserName(); // Function Engine.KismetSystemLibrary.GetPlatformUserName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18de0
	struct FString GetPlatformUserDir(); // Function Engine.KismetSystemLibrary.GetPlatformUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18d60
	struct FString GetPathName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPathName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18c90
	struct UObject* GetOuterObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetOuterObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18c00
	struct FString GetObjectName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetObjectName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18b30
	struct UObject* GetObjectFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b18a90
	int32_t GetMinYResolutionForUI(); // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18a60
	int32_t GetMinYResolutionFor3DView(); // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18a30
	struct FString GetLocalCurrencySymbol(); // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b18390
	struct FString GetLocalCurrencyCode(); // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b18390
	float GetGameTimeInSeconds(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4aa45e0
	struct FString GetGamepadControllerName(int32_t ControllerId); // Function Engine.KismetSystemLibrary.GetGamepadControllerName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18770
	struct UTexture2D* GetGamepadButtonGlyph(struct FString ButtonKey, int32_t ControllerIndex); // Function Engine.KismetSystemLibrary.GetGamepadButtonGlyph // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18690
	struct FString GetGameName(); // Function Engine.KismetSystemLibrary.GetGameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18610
	struct FString GetGameBundleId(); // Function Engine.KismetSystemLibrary.GetGameBundleId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18590
	int64_t GetFrameCount(); // Function Engine.KismetSystemLibrary.GetFrameCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18560
	struct FString GetEngineVersion(); // Function Engine.KismetSystemLibrary.GetEngineVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b184e0
	struct FString GetDisplayName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18410
	struct FString GetDeviceId(); // Function Engine.KismetSystemLibrary.GetDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18390
	struct FString GetDefaultLocale(); // Function Engine.KismetSystemLibrary.GetDefaultLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18310
	struct FString GetDefaultLanguage(); // Function Engine.KismetSystemLibrary.GetDefaultLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b18290
	bool GetCurrentBundleState(struct FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, struct TArray<struct FName>& OutBundles); // Function Engine.KismetSystemLibrary.GetCurrentBundleState // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b18140
	bool GetConvenientWindowedResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b18090
	int32_t GetConsoleVariableIntValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b17ff0
	float GetConsoleVariableFloatValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b17f50
	bool GetConsoleVariableBoolValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b17eb0
	void GetComponentBounds(struct USceneComponent* Component, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetSystemLibrary.GetComponentBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b17d40
	struct FString GetCommandLine(); // Function Engine.KismetSystemLibrary.GetCommandLine // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b17cc0
	struct UObject* GetClassFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b17c20
	struct FString GetClassDisplayName(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetClassDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b17b50
	struct FString GetBuildVersion(); // Function Engine.KismetSystemLibrary.GetBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b17ad0
	struct FString GetBuildConfiguration(); // Function Engine.KismetSystemLibrary.GetBuildConfiguration // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b17a50
	int32_t GetAdIDCount(); // Function Engine.KismetSystemLibrary.GetAdIDCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b17a20
	void GetActorListFromComponentList(struct TArray<struct UPrimitiveComponent*>& ComponentList, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& OutActorList); // Function Engine.KismetSystemLibrary.GetActorListFromComponentList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b178d0
	void GetActorBounds(struct AActor* Actor, struct FVector& Origin, struct FVector& BoxExtent); // Function Engine.KismetSystemLibrary.GetActorBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b177b0
	void ForceCloseAdBanner(); // Function Engine.KismetSystemLibrary.ForceCloseAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b17790
	void FlushPersistentDebugLines(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b14e30
	void FlushDebugStrings(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushDebugStrings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b14e30
	void ExecuteConsoleCommand(struct UObject* WorldContextObject, struct FString Command, struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b17670
	bool EqualEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b17520
	bool EqualEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b17520
	bool EqualEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xded610
	bool EqualEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xded520
	int32_t EndTransaction(); // Function Engine.KismetSystemLibrary.EndTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x9fa5a0
	void DrawDebugString(struct UObject* WorldContextObject, struct FVector TextLocation, struct FString Text, struct AActor* TestBaseActor, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b17320
	void DrawDebugSphere(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugSphere // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b170f0
	void DrawDebugPoint(struct UObject* WorldContextObject, struct FVector position, float Size, struct FLinearColor PointColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b16f40
	void DrawDebugPlane(struct UObject* WorldContextObject, struct FPlane& PlaneCoordinates, struct FVector Location, float Size, struct FLinearColor PlaneColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b16d50
	void DrawDebugLine(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b16b50
	void DrawDebugFrustum(struct UObject* WorldContextObject, struct FTransform& FrustumTransform, struct FLinearColor FrustumColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugFrustum // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b16940
	void DrawDebugFloatHistoryTransform(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FTransform& DrawTransform, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b166a0
	void DrawDebugFloatHistoryLocation(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FVector DrawLocation, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b16480
	void DrawDebugCylinder(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCylinder // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b16200
	void DrawDebugCoordinateSystem(struct UObject* WorldContextObject, struct FVector AxisLoc, struct FRotator AxisRot, float Scale, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b16010
	void DrawDebugConeInDegrees(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b15d00
	void DrawDebugCone(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCone // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b15d00
	void DrawDebugCircle(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis); // Function Engine.KismetSystemLibrary.DrawDebugCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b159d0
	void DrawDebugCapsule(struct UObject* WorldContextObject, struct FVector Center, float HalfHeight, float Radius, struct FRotator Rotation, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCapsule // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b15750
	void DrawDebugCamera(struct ACameraActor* CameraActor, struct FLinearColor CameraColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugCamera // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b15640
	void DrawDebugBox(struct UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b153e0
	void DrawDebugArrow(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugArrow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b151a0
	bool DoesImplementInterface(struct UObject* TestObject, struct UInterface* Interface); // Function Engine.KismetSystemLibrary.DoesImplementInterface // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b150d0
	void DelayUntilNextTick(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.DelayUntilNextTick // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b14ff0
	void Delay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.Delay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b14eb0
	void CreateCopyForUndoBuffer(struct UObject* ObjectToModify); // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b14e30
	struct FString ConvertToRelativePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToRelativePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b14d50
	struct FString ConvertToAbsolutePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToAbsolutePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b14c70
	struct TSoftObjectPtr<UObject> Conv_SoftObjPathToSoftObjRef(struct FSoftObjectPath& SoftObjectPath); // Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b14ac0
	struct FString Conv_SoftObjectReferenceToString(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b149b0
	struct UObject* Conv_SoftObjectReferenceToObject(struct TSoftObjectPtr<UObject>& SoftObject); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b14ba0
	struct FString Conv_SoftClassReferenceToString(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b149b0
	struct UObject* Conv_SoftClassReferenceToClass(struct TSoftClassPtr<UObject>& SoftClass); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b148d0
	struct TSoftClassPtr<UObject> Conv_SoftClassPathToSoftClassRef(struct FSoftClassPath& SoftClassPath); // Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b147f0
	struct FString Conv_PrimaryAssetTypeToString(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0xded450
	struct FString Conv_PrimaryAssetIdToString(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b14710
	struct TSoftObjectPtr<UObject> Conv_ObjectToSoftObjectReference(struct UObject* Object); // Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b14660
	struct UObject* Conv_ObjectToClass(struct UObject* Object, struct UObject* Class); // Function Engine.KismetSystemLibrary.Conv_ObjectToClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b14590
	struct UObject* Conv_InterfaceToObject(struct TScriptInterface<IInterface>& Interface); // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b144f0
	struct TSoftClassPtr<UObject> Conv_ClassToSoftClassReference(struct UObject*& Class); // Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b14430
	void ControlScreensaver(bool bAllowScreenSaver); // Function Engine.KismetSystemLibrary.ControlScreensaver // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b143b0
	bool ComponentOverlapComponents(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.ComponentOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b14100
	bool ComponentOverlapActors(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.ComponentOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b13e50
	void CollectGarbage(); // Function Engine.KismetSystemLibrary.CollectGarbage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b13e30
	bool CapsuleTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b13920
	bool CapsuleTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b13430
	bool CapsuleTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b12f30
	bool CapsuleTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b12a70
	bool CapsuleTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b125d0
	bool CapsuleTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b12120
	bool CapsuleOverlapComponents(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b11e50
	bool CapsuleOverlapActors(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.CapsuleOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b11b80
	bool CanLaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.CanLaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b11ae0
	void CancelTransaction(int32_t Index); // Function Engine.KismetSystemLibrary.CancelTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x215dc80
	void BreakSoftObjectPath(struct FSoftObjectPath InSoftObjectPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b11990
	void BreakSoftClassPath(struct FSoftClassPath InSoftClassPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftClassPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b11990
	bool BoxTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b11440
	bool BoxTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b10f10
	bool BoxTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b109e0
	bool BoxTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b104f0
	bool BoxTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b10010
	bool BoxTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b0fb30
	bool BoxOverlapComponents(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector Extent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.BoxOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b0f890
	bool BoxOverlapActors(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector BoxExtent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.BoxOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b0f5f0
	int32_t BeginTransaction(struct FString Context, struct FText Description, struct UObject* PrimaryObject); // Function Engine.KismetSystemLibrary.BeginTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b0f460
	struct FDebugFloatHistory AddFloatHistorySample(float Value, struct FDebugFloatHistory& FloatHistory); // Function Engine.KismetSystemLibrary.AddFloatHistorySample // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x4b0f300
};

// Class Engine.KismetTextLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetTextLibrary : UBlueprintFunctionLibrary {

	struct FText TextTrimTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b29970
	struct FText TextTrimPrecedingAndTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b29840
	struct FText TextTrimPreceding(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPreceding // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b29710
	struct FText TextToUpper(struct FText& InText); // Function Engine.KismetTextLibrary.TextToUpper // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b295e0
	struct FText TextToLower(struct FText& InText); // Function Engine.KismetTextLibrary.TextToLower // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b294b0
	bool TextIsTransient(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsTransient // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b293e0
	bool TextIsFromStringTable(struct FText& Text); // Function Engine.KismetTextLibrary.TextIsFromStringTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b29310
	bool TextIsEmpty(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b29240
	bool TextIsCultureInvariant(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsCultureInvariant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b29170
	struct FText TextFromStringTable(struct FName TableId, struct FString Key); // Function Engine.KismetTextLibrary.TextFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b29030
	bool StringTableIdAndKeyFromText(struct FText Text, struct FName& OutTableId, struct FString& OutKey); // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b28e80
	struct FText PolyglotDataToText(struct FPolyglotTextData& PolyglotData); // Function Engine.KismetTextLibrary.PolyglotDataToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b28c70
	bool NotEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b28b00
	bool NotEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b28990
	void IsPolyglotDataValid(struct FPolyglotTextData& PolyglotData, bool& IsValid, struct FText& ErrorMessage); // Function Engine.KismetTextLibrary.IsPolyglotDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b286f0
	struct FText GetEmptyText(); // Function Engine.KismetTextLibrary.GetEmptyText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b28650
	struct FText Format(struct FText InPattern, struct TArray<struct FFormatArgumentData> InArgs); // Function Engine.KismetTextLibrary.Format // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b28410
	bool FindTextInLocalizationTable(struct FString Namespace, struct FString Key, struct FText& OutText); // Function Engine.KismetTextLibrary.FindTextInLocalizationTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b28290
	bool EqualEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b28120
	bool EqualEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b27fb0
	struct FText Conv_VectorToText(struct FVector InVec); // Function Engine.KismetTextLibrary.Conv_VectorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b27eb0
	struct FText Conv_Vector2dToText(struct FVector2D InVec); // Function Engine.KismetTextLibrary.Conv_Vector2dToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b27dd0
	struct FText Conv_TransformToText(struct FTransform& InTrans); // Function Engine.KismetTextLibrary.Conv_TransformToText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b27c70
	struct FString Conv_TextToString(struct FText& InText); // Function Engine.KismetTextLibrary.Conv_TextToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x4b27b60
	struct FText Conv_StringToText(struct FString InString); // Function Engine.KismetTextLibrary.Conv_StringToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b27a60
	struct FText Conv_RotatorToText(struct FRotator InRot); // Function Engine.KismetTextLibrary.Conv_RotatorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b27960
	struct FText Conv_ObjectToText(struct UObject* InObj); // Function Engine.KismetTextLibrary.Conv_ObjectToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b27870
	struct FText Conv_NameToText(struct FName InName); // Function Engine.KismetTextLibrary.Conv_NameToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b27780
	struct FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_IntToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b27560
	struct FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_Int64ToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b27340
	struct FText Conv_FloatToText(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.Conv_FloatToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b27070
	struct FText Conv_DoubleToText(double InDouble, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.Conv_DoubleToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b26da0
	struct FText Conv_ColorToText(struct FLinearColor InColor); // Function Engine.KismetTextLibrary.Conv_ColorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b26cc0
	struct FText Conv_ByteToText(char Value); // Function Engine.KismetTextLibrary.Conv_ByteToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b26be0
	struct FText Conv_BoolToText(bool InBool); // Function Engine.KismetTextLibrary.Conv_BoolToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b26af0
	struct FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b267b0
	struct FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b264f0
	struct FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b26650
	struct FText AsTimespan_Timespan(struct FTimespan& InTimespan); // Function Engine.KismetTextLibrary.AsTimespan_Timespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b26a00
	struct FText AsTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b26910
	struct FText AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.AsPercent_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b26220
	struct FText AsDateTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b26040
	struct FText AsDate_DateTime(struct FDateTime& InDateTime); // Function Engine.KismetTextLibrary.AsDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x4b26130
	struct FText AsCurrencyBase(int32_t BaseValue, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrencyBase // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b258b0
	struct FText AsCurrency_Integer(int32_t Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Integer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b25d20
	struct FText AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b259f0
};

// Class Engine.Layer
// Size: 0x48 (Inherited: 0x28)
struct ULayer : UObject {
	struct FName LayerName; // 0x28(0x08)
	char bIsVisible : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FLayerActorStats> ActorStats; // 0x38(0x10)
};

// Class Engine.LevelPartitionInterface
// Size: 0x28 (Inherited: 0x28)
struct ULevelPartitionInterface : UInterface {
};

// Class Engine.ActorContainer
// Size: 0x78 (Inherited: 0x28)
struct UActorContainer : UObject {
	struct TMap<struct FName, struct AActor*> Actors; // 0x28(0x50)
};

// Class Engine.LevelActorContainer
// Size: 0x38 (Inherited: 0x28)
struct ULevelActorContainer : UObject {
	struct TArray<struct AActor*> Actors; // 0x28(0x10)
};

// Class Engine.LevelBounds
// Size: 0x288 (Inherited: 0x278)
struct ALevelBounds : AActor {
	struct UBoxComponent* BoxComponent; // 0x278(0x08)
	bool bAutoUpdateBounds; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
};

// Class Engine.LevelInstance
// Size: 0x2c8 (Inherited: 0x278)
struct ALevelInstance : AActor {
	struct TSoftObjectPtr<UWorld> CookedWorldAsset; // 0x278(0x28)
	char pad_2A0[0x28]; // 0x2a0(0x28)
};

// Class Engine.LevelInstanceComponent
// Size: 0x2b0 (Inherited: 0x2b0)
struct ULevelInstanceComponent : USceneComponent {
};

// Class Engine.LevelInstanceEditorInstanceActor
// Size: 0x278 (Inherited: 0x278)
struct ALevelInstanceEditorInstanceActor : AActor {
};

// Class Engine.World
// Size: 0x800 (Inherited: 0x28)
struct UWorld : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct ULevel* PersistentLevel; // 0x30(0x08)
	struct UNetDriver* NetDriver; // 0x38(0x08)
	struct ULineBatchComponent* LineBatcher; // 0x40(0x08)
	struct ULineBatchComponent* PersistentLineBatcher; // 0x48(0x08)
	struct ULineBatchComponent* ForegroundLineBatcher; // 0x50(0x08)
	struct AGameNetworkManager* NetworkManager; // 0x58(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x60(0x08)
	struct TArray<struct UObject*> ExtraReferencedObjects; // 0x68(0x10)
	struct TArray<struct UObject*> PerModuleDataObjects; // 0x78(0x10)
	struct TArray<struct ULevelStreaming*> StreamingLevels; // 0x88(0x10)
	struct FStreamingLevelsToConsider StreamingLevelsToConsider; // 0x98(0x28)
	struct FString StreamingLevelsPrefix; // 0xc0(0x10)
	struct ULevel* CurrentLevelPendingVisibility; // 0xd0(0x08)
	struct ULevel* CurrentLevelPendingInvisibility; // 0xd8(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0xe0(0x08)
	struct AParticleEventManager* MyParticleEventManager; // 0xe8(0x08)
	struct APhysicsVolume* DefaultPhysicsVolume; // 0xf0(0x08)
	char pad_F8[0x1e]; // 0xf8(0x1e)
	char pad_116_0 : 2; // 0x116(0x01)
	char bAreConstraintsDirty : 1; // 0x116(0x01)
	char pad_116_3 : 5; // 0x116(0x01)
	char pad_117[0x9]; // 0x117(0x09)
	struct UNavigationSystemBase* NavigationSystem; // 0x120(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x128(0x08)
	struct AGameStateBase* GameState; // 0x130(0x08)
	struct UAISystemBase* AISystem; // 0x138(0x08)
	struct UAvoidanceManager* AvoidanceManager; // 0x140(0x08)
	struct TArray<struct ULevel*> Levels; // 0x148(0x10)
	struct TArray<struct FLevelCollection> LevelCollections; // 0x158(0x10)
	char pad_168[0x28]; // 0x168(0x28)
	struct UGameInstance* OwningGameInstance; // 0x190(0x08)
	struct TArray<struct UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x198(0x10)
	struct UCanvas* CanvasForRenderingToTarget; // 0x1a8(0x08)
	struct UCanvas* CanvasForDrawMaterialToRenderTarget; // 0x1b0(0x08)
	char pad_1B8[0x70]; // 0x1b8(0x70)
	struct UPhysicsFieldComponent* PhysicsField; // 0x228(0x08)
	uint32_t LWILastAssignedUID; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct TSet<struct UActorComponent*> ComponentsThatNeedPreEndOfFrameSync; // 0x238(0x50)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate; // 0x288(0x10)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x298(0x10)
	char pad_2A8[0x388]; // 0x2a8(0x388)
	struct UWorldComposition* WorldComposition; // 0x630(0x08)
	char pad_638[0xa8]; // 0x638(0xa8)
	struct FWorldPSCPool PSCPool; // 0x6e0(0x58)
	char pad_738[0xc8]; // 0x738(0xc8)

	struct AWorldSettings* K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x4bcfcd0
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed // (Final|Native|Public) // @ game+0x4bcfcb0
};

// Class Engine.LevelStreaming
// Size: 0x180 (Inherited: 0x28)
struct ULevelStreaming : UObject {
	struct TSoftObjectPtr<UWorld> WorldAsset; // 0x28(0x28)
	int32_t StreamingPriority; // 0x50(0x04)
	struct FName PackageNameToLoad; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TArray<struct FName> LODPackageNames; // 0x60(0x10)
	char pad_70[0x10]; // 0x70(0x10)
	struct FTransform LevelTransform; // 0x80(0x60)
	bool bClientOnlyVisible; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t LevelLODIndex; // 0xe4(0x04)
	char pad_E8_0 : 3; // 0xe8(0x01)
	char bShouldBeVisible : 1; // 0xe8(0x01)
	char bShouldBeLoaded : 1; // 0xe8(0x01)
	char pad_E8_5 : 3; // 0xe8(0x01)
	char pad_E9[0x2]; // 0xe9(0x02)
	char bLocked : 1; // 0xeb(0x01)
	char bIsStatic : 1; // 0xeb(0x01)
	char bShouldBlockOnLoad : 1; // 0xeb(0x01)
	char bShouldBlockOnUnload : 1; // 0xeb(0x01)
	char bDisableDistanceStreaming : 1; // 0xeb(0x01)
	char bDrawOnLevelStatusMap : 1; // 0xeb(0x01)
	char pad_EB_6 : 2; // 0xeb(0x01)
	struct FLinearColor LevelColor; // 0xec(0x10)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TArray<struct ALevelStreamingVolume*> EditorStreamingVolumes; // 0x100(0x10)
	float MinTimeBetweenVolumeUnloadRequests; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct FMulticastInlineDelegate OnLevelLoaded; // 0x118(0x10)
	struct FMulticastInlineDelegate OnLevelUnloaded; // 0x128(0x10)
	struct FMulticastInlineDelegate OnLevelShown; // 0x138(0x10)
	struct FMulticastInlineDelegate OnLevelHidden; // 0x148(0x10)
	struct ULevel* LoadedLevel; // 0x158(0x08)
	struct ULevel* PendingUnloadLevel; // 0x160(0x08)
	char pad_168[0x18]; // 0x168(0x18)

	bool ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1a303d0
	void SetShouldBeVisible(bool bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2e0b0
	void SetShouldBeLoaded(bool bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded // (Native|Public|BlueprintCallable) // @ game+0x3fc24d0
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2df20
	void SetLevelLODIndex(int32_t LODIndex); // Function Engine.LevelStreaming.SetLevelLODIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d830
	void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval); // Function Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2d7a0
	bool IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c580
	bool IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c550
	bool IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c520
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c4b0
	struct ULevel* GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3956e10
	struct ALevelScriptActor* GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b2c440
	bool GetIsRequestingUnloadAndRemoval(); // Function Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b2c410
	struct ULevelStreaming* CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x4b2c330
};

// Class Engine.LevelStreamingAlwaysLoaded
// Size: 0x180 (Inherited: 0x180)
struct ULevelStreamingAlwaysLoaded : ULevelStreaming {
};

// Class Engine.LevelStreamingLevelInstanceEditor
// Size: 0x180 (Inherited: 0x180)
struct ULevelStreamingLevelInstanceEditor : ULevelStreamingAlwaysLoaded {
};

// Class Engine.LevelInstanceEditorObject
// Size: 0x28 (Inherited: 0x28)
struct ULevelInstanceEditorObject : UObject {
};

// Class Engine.LevelInstancePivot
// Size: 0x278 (Inherited: 0x278)
struct ALevelInstancePivot : AActor {
};

// Class Engine.LevelStreamingDynamic
// Size: 0x180 (Inherited: 0x180)
struct ULevelStreamingDynamic : ULevelStreaming {
	char bInitiallyLoaded : 1; // 0x178(0x01)
	char bInitiallyVisible : 1; // 0x178(0x01)

	struct ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride, struct ULevelStreamingDynamic* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b2c8e0
	struct ULevelStreamingDynamic* LoadLevelInstance(struct UObject* WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess, struct FString OptionalLevelNameOverride, struct ULevelStreamingDynamic* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Function Engine.LevelStreamingDynamic.LoadLevelInstance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b2c5b0
};

// Class Engine.LevelStreamingLevelInstance
// Size: 0x1a0 (Inherited: 0x180)
struct ULevelStreamingLevelInstance : ULevelStreamingDynamic {
	char pad_180[0x20]; // 0x180(0x20)
};

// Class Engine.LevelInstanceSubsystem
// Size: 0x170 (Inherited: 0x30)
struct ULevelInstanceSubsystem : UWorldSubsystem {
	char pad_30[0x140]; // 0x30(0x140)
};

// Class Engine.LevelScriptActor
// Size: 0x280 (Inherited: 0x278)
struct ALevelScriptActor : AActor {
	char bInputEnabled : 1; // 0x278(0x01)
	char pad_278_1 : 7; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)

	void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x2552560
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x4b2d200
	bool RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent // (Native|Public|BlueprintCallable) // @ game+0x4b2cca0
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x2552560
};

// Class Engine.LevelScriptBlueprint
// Size: 0xa0 (Inherited: 0xa0)
struct ULevelScriptBlueprint : UBlueprint {
};

// Class Engine.LevelStreamingPersistent
// Size: 0x180 (Inherited: 0x180)
struct ULevelStreamingPersistent : ULevelStreaming {
};

// Class Engine.LevelStreamingVolume
// Size: 0x2c8 (Inherited: 0x2b0)
struct ALevelStreamingVolume : AVolume {
	struct TArray<struct FName> StreamingLevelNames; // 0x2b0(0x10)
	char bEditorPreVisOnly : 1; // 0x2c0(0x01)
	char bDisabled : 1; // 0x2c0(0x01)
	char pad_2C0_2 : 6; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	enum class EStreamingVolumeUsage StreamingUsage; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
};

// Class Engine.LightmappedSurfaceCollection
// Size: 0x40 (Inherited: 0x28)
struct ULightmappedSurfaceCollection : UObject {
	struct UModel* SourceModel; // 0x28(0x08)
	struct TArray<int32_t> Surfaces; // 0x30(0x10)
};

// Class Engine.LightMapTexture2D
// Size: 0x2b0 (Inherited: 0x2b0)
struct ULightMapTexture2D : UTexture2D {
};

// Class Engine.LightMapVirtualTexture2D
// Size: 0x2c0 (Inherited: 0x2b0)
struct ULightMapVirtualTexture2D : UTexture2D {
	struct TArray<int8_t> TypeToLayer; // 0x2a8(0x10)
};

// Class Engine.LightmassCharacterIndirectDetailVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct ALightmassCharacterIndirectDetailVolume : AVolume {
};

// Class Engine.LightmassImportanceVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct ALightmassImportanceVolume : AVolume {
};

// Class Engine.LightmassPortal
// Size: 0x280 (Inherited: 0x278)
struct ALightmassPortal : AActor {
	struct ULightmassPortalComponent* PortalComponent; // 0x278(0x08)
};

// Class Engine.LightmassPortalComponent
// Size: 0x2c0 (Inherited: 0x2b0)
struct ULightmassPortalComponent : USceneComponent {
	struct UBoxComponent* PreviewBox; // 0x2b0(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)
};

// Class Engine.LightmassPrimitiveSettingsObject
// Size: 0x40 (Inherited: 0x28)
struct ULightmassPrimitiveSettingsObject : UObject {
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x28(0x18)
};

// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct ULightWeightInstanceBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	struct FActorInstanceHandle CreateNewLightWeightInstance(struct UObject* ActorClass, struct FTransform Transform, struct UDataLayer* Layer, struct UWorld* World); // Function Engine.LightWeightInstanceBlueprintFunctionLibrary.CreateNewLightWeightInstance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4b310e0
	struct FActorInstanceHandle ConvertActorToLightWeightInstance(struct AActor* Actor); // Function Engine.LightWeightInstanceBlueprintFunctionLibrary.ConvertActorToLightWeightInstance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b31040
};

// Class Engine.ActorInstanceHandleInterface
// Size: 0x48 (Inherited: 0x28)
struct UActorInstanceHandleInterface : UObject {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Engine.LightWeightInstanceManager
// Size: 0x318 (Inherited: 0x278)
struct ALightWeightInstanceManager : AActor {
	char pad_278[0x10]; // 0x278(0x10)
	struct AActor* RepresentedClass; // 0x288(0x08)
	struct AActor* AcceptedClass; // 0x290(0x08)
	struct TArray<struct FTransform> InstanceTransforms; // 0x298(0x10)
	char pad_2A8[0x50]; // 0x2a8(0x50)
	struct TArray<int32_t> FreeIndices; // 0x2f8(0x10)
	struct TArray<bool> ValidIndices; // 0x308(0x10)

	void OnRep_Transforms(); // Function Engine.LightWeightInstanceManager.OnRep_Transforms // (Native|Protected) // @ game+0xae9450
};

// Class Engine.LightWeightInstanceStaticMeshManager
// Size: 0x380 (Inherited: 0x318)
struct ALightWeightInstanceStaticMeshManager : ALightWeightInstanceManager {
	char pad_318[0x8]; // 0x318(0x08)
	struct TSoftObjectPtr<UStaticMesh> StaticMesh; // 0x320(0x28)
	struct UHierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent; // 0x348(0x08)
	struct TArray<int32_t> RenderingIndicesToDataIndices; // 0x350(0x10)
	struct TArray<int32_t> DataIndicesToRenderingIndices; // 0x360(0x10)
	char pad_370[0x10]; // 0x370(0x10)

	void OnRep_StaticMesh(); // Function Engine.LightWeightInstanceStaticMeshManager.OnRep_StaticMesh // (Final|Native|Protected) // @ game+0x4b314b0
};

// Class Engine.LineBatchComponent
// Size: 0x580 (Inherited: 0x540)
struct ULineBatchComponent : UPrimitiveComponent {
	char pad_540[0x40]; // 0x540(0x40)
};

// Class Engine.LocalLightComponent
// Size: 0x410 (Inherited: 0x3f0)
struct ULocalLightComponent : ULightComponent {
	enum class ELightUnits IntensityUnits; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	float Radius; // 0x3f4(0x04)
	float AttenuationRadius; // 0x3f8(0x04)
	struct FLightmassPointLightSettings LightmassSettings; // 0x3fc(0x0c)
	char pad_408[0x8]; // 0x408(0x08)

	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits // (Final|Native|Public|BlueprintCallable) // @ game+0x4b31930
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x4b315f0
	float GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4b313a0
};

// Class Engine.LODActor
// Size: 0x300 (Inherited: 0x278)
struct ALODActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x278(0x08)
	struct TMap<struct FHLODInstancingKey, struct UInstancedStaticMeshComponent*> InstancedStaticMeshComponents; // 0x280(0x50)
	struct UHLODProxy* Proxy; // 0x2d0(0x08)
	struct FName Key; // 0x2d8(0x08)
	float LODDrawDistance; // 0x2e0(0x04)
	int32_t LODLevel; // 0x2e4(0x04)
	struct TArray<struct AActor*> SubActors; // 0x2e8(0x10)
	char CachedNumHLODLevels; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
};

// Class Engine.LODSyncComponent
// Size: 0x148 (Inherited: 0xb0)
struct ULODSyncComponent : UActorComponent {
	int32_t NumLODs; // 0xb0(0x04)
	int32_t ForcedLOD; // 0xb4(0x04)
	int32_t MinLOD; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct FComponentSync> ComponentsToSync; // 0xc0(0x10)
	struct TMap<struct FName, struct FLODMappingData> CustomLODMapping; // 0xd0(0x50)
	int32_t CurrentLOD; // 0x120(0x04)
	int32_t CurrentNumLODs; // 0x124(0x04)
	struct TArray<struct UPrimitiveComponent*> DriveComponents; // 0x128(0x10)
	struct TArray<struct UPrimitiveComponent*> SubComponents; // 0x138(0x10)

	struct FString GetLODSyncDebugText(); // Function Engine.LODSyncComponent.GetLODSyncDebugText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b312e0
};

// Class Engine.LODSyncInterface
// Size: 0x28 (Inherited: 0x28)
struct ULODSyncInterface : UInterface {
};

// Class Engine.MapBuildDataRegistry
// Size: 0x238 (Inherited: 0x28)
struct UMapBuildDataRegistry : UObject {
	enum class ELightingBuildQuality LevelLightingQuality; // 0x28(0x01)
	char pad_29[0x20f]; // 0x29(0x20f)
};

// Class Engine.Material
// Size: 0x2c8 (Inherited: 0x98)
struct UMaterial : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0x98(0x08)
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0xa0(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0xa8(0x40)
	struct FColorMaterialInput BaseColor; // 0xe8(0x14)
	struct FScalarMaterialInput Metallic; // 0xfc(0x14)
	struct FScalarMaterialInput Specular; // 0x110(0x14)
	struct FScalarMaterialInput Roughness; // 0x124(0x14)
	struct FScalarMaterialInput Anisotropy; // 0x138(0x14)
	struct FVectorMaterialInput Normal; // 0x14c(0x14)
	struct FVectorMaterialInput Tangent; // 0x160(0x14)
	struct FColorMaterialInput EmissiveColor; // 0x174(0x14)
	enum class EMaterialDomain MaterialDomain; // 0x188(0x01)
	enum class EBlendMode BlendMode; // 0x189(0x01)
	enum class EDecalBlendMode DecalBlendMode; // 0x18a(0x01)
	enum class EMaterialDecalResponse MaterialDecalResponse; // 0x18b(0x01)
	enum class EMaterialShadingModel ShadingModel; // 0x18c(0x01)
	char bCastDynamicShadowAsMasked : 1; // 0x18d(0x01)
	char pad_18D_1 : 7; // 0x18d(0x01)
	struct FMaterialShadingModelField ShadingModels; // 0x18e(0x02)
	float OpacityMaskClipValue; // 0x190(0x04)
	struct FVectorMaterialInput WorldPositionOffset; // 0x194(0x14)
	struct FScalarMaterialInput AmbientOcclusion; // 0x1a8(0x14)
	struct FScalarMaterialInput Refraction; // 0x1bc(0x14)
	struct FMaterialAttributesInput MaterialAttributes; // 0x1d0(0x18)
	struct FScalarMaterialInput PixelDepthOffset; // 0x1e8(0x14)
	struct FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x1fc(0x14)
	struct FStrataMaterialInput FrontMaterial; // 0x210(0x14)
	char bEnableSeparateTranslucency : 1; // 0x224(0x01)
	char bEnableResponsiveAA : 1; // 0x224(0x01)
	char bScreenSpaceReflections : 1; // 0x224(0x01)
	char bContactShadows : 1; // 0x224(0x01)
	char TwoSided : 1; // 0x224(0x01)
	char DitheredLODTransition : 1; // 0x224(0x01)
	char DitherOpacityMask : 1; // 0x224(0x01)
	char bAllowNegativeEmissiveColor : 1; // 0x224(0x01)
	enum class EMaterialTranslucencyPass TranslucencyPass; // 0x225(0x01)
	enum class ETranslucencyLightingMode TranslucencyLightingMode; // 0x226(0x01)
	char bEnableMobileSeparateTranslucency : 1; // 0x227(0x01)
	char pad_227_1 : 7; // 0x227(0x01)
	int32_t NumCustomizedUVs; // 0x228(0x04)
	float TranslucencyDirectionalLightingIntensity; // 0x22c(0x04)
	float TranslucentShadowDensityScale; // 0x230(0x04)
	float TranslucentSelfShadowDensityScale; // 0x234(0x04)
	float TranslucentSelfShadowSecondDensityScale; // 0x238(0x04)
	float TranslucentSelfShadowSecondOpacity; // 0x23c(0x04)
	float TranslucentBackscatteringExponent; // 0x240(0x04)
	struct FLinearColor TranslucentMultipleScatteringExtinction; // 0x244(0x10)
	float TranslucentShadowStartOffset; // 0x254(0x04)
	char bDisableDepthTest : 1; // 0x258(0x01)
	char bWriteOnlyAlpha : 1; // 0x258(0x01)
	char bGenerateSphericalParticleNormals : 1; // 0x258(0x01)
	char bTangentSpaceNormal : 1; // 0x258(0x01)
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x258(0x01)
	char bUsedAsSpecialEngineMaterial : 1; // 0x258(0x01)
	char bUsedWithSkeletalMesh : 1; // 0x258(0x01)
	char bUsedWithEditorCompositing : 1; // 0x258(0x01)
	char bUsedWithParticleSprites : 1; // 0x259(0x01)
	char bUsedWithBeamTrails : 1; // 0x259(0x01)
	char bUsedWithMeshParticles : 1; // 0x259(0x01)
	char bUsedWithNiagaraSprites : 1; // 0x259(0x01)
	char bUsedWithNiagaraRibbons : 1; // 0x259(0x01)
	char bUsedWithNiagaraMeshParticles : 1; // 0x259(0x01)
	char bUsedWithGeometryCache : 1; // 0x259(0x01)
	char bUsedWithStaticLighting : 1; // 0x259(0x01)
	char bUsedWithMorphTargets : 1; // 0x25a(0x01)
	char bUsedWithSplineMeshes : 1; // 0x25a(0x01)
	char bUsedWithInstancedStaticMeshes : 1; // 0x25a(0x01)
	char bUsedWithGeometryCollections : 1; // 0x25a(0x01)
	char bUsesDistortion : 1; // 0x25a(0x01)
	char bUsedWithClothing : 1; // 0x25a(0x01)
	char pad_25A_6 : 2; // 0x25a(0x01)
	char pad_25B[0x1]; // 0x25b(0x01)
	char bUsedWithWater : 1; // 0x25c(0x01)
	char bUsedWithHairStrands : 1; // 0x25c(0x01)
	char bUsedWithLidarPointCloud : 1; // 0x25c(0x01)
	char bUsedWithVirtualHeightfieldMesh : 1; // 0x25c(0x01)
	char bUsedWithNanite : 1; // 0x25c(0x01)
	char pad_25C_5 : 3; // 0x25c(0x01)
	char pad_25D[0x3]; // 0x25d(0x03)
	char bUsedWithUI : 1; // 0x260(0x01)
	char bAutomaticallySetUsageInEditor : 1; // 0x260(0x01)
	char bFullyRough : 1; // 0x260(0x01)
	char bUseFullPrecision : 1; // 0x260(0x01)
	char pad_260_4 : 4; // 0x260(0x01)
	enum class EMaterialFloatPrecisionMode FloatPrecisionMode; // 0x261(0x01)
	char bUseLightmapDirectionality : 1; // 0x262(0x01)
	char bMobileEnableHighQualityBRDF : 1; // 0x262(0x01)
	char bUseAlphaToCoverage : 1; // 0x262(0x01)
	char pad_262_3 : 5; // 0x262(0x01)
	char pad_263[0x1]; // 0x263(0x01)
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x264(0x01)
	char pad_264_1 : 7; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	char bUseHQForwardReflections : 1; // 0x268(0x01)
	char bForwardBlendsSkyLightCubemaps : 1; // 0x268(0x01)
	char bUsePlanarForwardReflections : 1; // 0x268(0x01)
	char bNormalCurvatureToRoughness : 1; // 0x268(0x01)
	char AllowTranslucentCustomDepthWrites : 1; // 0x268(0x01)
	char Wireframe : 1; // 0x268(0x01)
	char pad_268_6 : 2; // 0x268(0x01)
	enum class EMaterialShadingRate ShadingRate; // 0x269(0x01)
	char bCanMaskedBeAssumedOpaque : 1; // 0x26a(0x01)
	char bIsMasked : 1; // 0x26a(0x01)
	char bIsPreviewMaterial : 1; // 0x26a(0x01)
	char bIsFunctionPreviewMaterial : 1; // 0x26a(0x01)
	char bUseMaterialAttributes : 1; // 0x26a(0x01)
	char bEnableExecWire : 1; // 0x26a(0x01)
	char bEnableNewHLSLGenerator : 1; // 0x26a(0x01)
	char bCastRayTracedShadows : 1; // 0x26a(0x01)
	char bUseTranslucencyVertexFog : 1; // 0x26b(0x01)
	char bApplyCloudFogging : 1; // 0x26b(0x01)
	char bIsSky : 1; // 0x26b(0x01)
	char bComputeFogPerPixel : 1; // 0x26b(0x01)
	char bOutputTranslucentVelocity : 1; // 0x26b(0x01)
	char bAllowDevelopmentShaderCompile : 1; // 0x26b(0x01)
	char bIsMaterialEditorStatsMaterial : 1; // 0x26b(0x01)
	char pad_26B_7 : 1; // 0x26b(0x01)
	enum class EBlendableLocation BlendableLocation; // 0x26c(0x01)
	char BlendableOutputAlpha : 1; // 0x26d(0x01)
	char bEnableStencilTest : 1; // 0x26d(0x01)
	char pad_26D_2 : 6; // 0x26d(0x01)
	enum class EMaterialStencilCompare StencilCompare; // 0x26e(0x01)
	char StencilRefValue; // 0x26f(0x01)
	enum class ERefractionMode RefractionMode; // 0x270(0x01)
	char pad_271[0x3]; // 0x271(0x03)
	int32_t BlendablePriority; // 0x274(0x04)
	char bIsBlendable : 1; // 0x278(0x01)
	char pad_278_1 : 7; // 0x278(0x01)
	char pad_279[0x3]; // 0x279(0x03)
	uint32_t UsageFlagWarnings; // 0x27c(0x04)
	float RefractionDepthBias; // 0x280(0x04)
	struct FGuid StateId; // 0x284(0x10)
	char pad_294[0x34]; // 0x294(0x34)
};

// Class Engine.MaterialBillboardComponent
// Size: 0x550 (Inherited: 0x540)
struct UMaterialBillboardComponent : UPrimitiveComponent {
	struct TArray<struct FMaterialSpriteElement> Elements; // 0x540(0x10)

	void SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b34df0
	void AddElement(struct UMaterialInterface* Material, struct UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat* DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement // (Final|Native|Public|BlueprintCallable) // @ game+0x4b34c00
};

// Class Engine.MaterialExpressionAbs
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionAbs : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionAbsorptionMediumMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput TransmittanceColor; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionActorPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionActorPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionAdd
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionAdd : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// Size: 0x88 (Inherited: 0x80)
struct UMaterialExpressionAntialiasedTextureMask : UMaterialExpressionTextureSampleParameter2D {
	float Threshold; // 0x80(0x04)
	enum class ETextureColorChannel Channel; // 0x84(0x01)
	char pad_85[0x3]; // 0x85(0x03)
};

// Class Engine.MaterialExpressionAppendVector
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionAppendVector : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
};

// Class Engine.MaterialExpressionArccosine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArccosine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionArccosineFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArccosineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionArcsine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArcsine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionArcsineFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArcsineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionArctangent
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArctangent : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionArctangent2
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionArctangent2 : UMaterialExpression {
	struct FExpressionInput Y; // 0x40(0x14)
	struct FExpressionInput X; // 0x54(0x14)
};

// Class Engine.MaterialExpressionArctangent2Fast
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionArctangent2Fast : UMaterialExpression {
	struct FExpressionInput Y; // 0x40(0x14)
	struct FExpressionInput X; // 0x54(0x14)
};

// Class Engine.MaterialExpressionArctangentFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArctangentFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionAtmosphericFogColor
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericFogColor : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionAtmosphericLightColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericLightColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionAtmosphericLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBentNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionBinaryOp
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionBinaryOp : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionLess
// Size: 0x70 (Inherited: 0x70)
struct UMaterialExpressionLess : UMaterialExpressionBinaryOp {
};

// Class Engine.MaterialExpressionBlackBody
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBlackBody : UMaterialExpression {
	struct FExpressionInput Temp; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionBlendMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput A; // 0x40(0x18)
	struct FMaterialAttributesInput B; // 0x58(0x18)
	struct FExpressionInput Alpha; // 0x70(0x14)
	enum class EMaterialAttributeBlend PixelAttributeBlendType; // 0x84(0x01)
	enum class EMaterialAttributeBlend VertexAttributeBlendType; // 0x85(0x01)
	char pad_86[0x2]; // 0x86(0x02)
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBreakMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0x40(0x18)
};

// Class Engine.MaterialExpressionBumpOffset
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionBumpOffset : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x40(0x14)
	struct FExpressionInput Height; // 0x54(0x14)
	struct FExpressionInput HeightRatioInput; // 0x68(0x14)
	float HeightRatio; // 0x7c(0x04)
	float ReferencePlane; // 0x80(0x04)
	uint32_t ConstCoordinate; // 0x84(0x04)
};

// Class Engine.MaterialExpressionCameraPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCameraPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCameraVectorWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCameraVectorWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCeil
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionCeil : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionParameter
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionParameter : UMaterialExpression {
	struct FName ParameterName; // 0x40(0x08)
	struct FGuid ExpressionGuid; // 0x48(0x10)
};

// Class Engine.MaterialExpressionVectorParameter
// Size: 0x70 (Inherited: 0x58)
struct UMaterialExpressionVectorParameter : UMaterialExpressionParameter {
	struct FLinearColor DefaultValue; // 0x58(0x10)
	bool bUseCustomPrimitiveData; // 0x68(0x01)
	char PrimitiveDataIndex; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)
};

// Class Engine.MaterialExpressionChannelMaskParameter
// Size: 0x78 (Inherited: 0x70)
struct UMaterialExpressionChannelMaskParameter : UMaterialExpressionVectorParameter {
	enum class EChannelMaskParameterColor MaskChannel; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.MaterialExpressionClamp
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionClamp : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	struct FExpressionInput Min; // 0x54(0x14)
	struct FExpressionInput Max; // 0x68(0x14)
	enum class EClampMode ClampMode; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	float MinDefault; // 0x80(0x04)
	float MaxDefault; // 0x84(0x04)
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionClearCoatNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionCloudSampleAttribute
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCloudSampleAttribute : UMaterialExpression {
};

// Class Engine.MaterialExpressionCollectionParameter
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionCollectionParameter : UMaterialExpression {
	struct UMaterialParameterCollection* Collection; // 0x40(0x08)
	struct FName ParameterName; // 0x48(0x08)
	struct FGuid ParameterId; // 0x50(0x10)
};

// Class Engine.MaterialExpressionComment
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionComment : UMaterialExpression {
	int32_t SizeX; // 0x40(0x04)
	int32_t SizeY; // 0x44(0x04)
	struct FString Text; // 0x48(0x10)
	struct FLinearColor CommentColor; // 0x58(0x10)
	int32_t FontSize; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionComponentMask
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionComponentMask : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char R : 1; // 0x54(0x01)
	char G : 1; // 0x54(0x01)
	char B : 1; // 0x54(0x01)
	char A : 1; // 0x54(0x01)
	char pad_54_4 : 4; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionComposite
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionComposite : UMaterialExpression {
	struct FString SubgraphName; // 0x40(0x10)
	struct UMaterialExpressionPinBase* InputExpressions; // 0x50(0x08)
	struct UMaterialExpressionPinBase* OutputExpressions; // 0x58(0x08)
};

// Class Engine.MaterialExpressionConstant
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionConstant : UMaterialExpression {
	float R; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.MaterialExpressionConstant2Vector
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionConstant2Vector : UMaterialExpression {
	float R; // 0x40(0x04)
	float G; // 0x44(0x04)
};

// Class Engine.MaterialExpressionConstant3Vector
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionConstant3Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0x40(0x10)
};

// Class Engine.MaterialExpressionConstant4Vector
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionConstant4Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0x40(0x10)
};

// Class Engine.MaterialExpressionConstantBiasScale
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionConstantBiasScale : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	float Bias; // 0x54(0x04)
	float Scale; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.MaterialExpressionCosine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionCosine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	float Period; // 0x54(0x04)
};

// Class Engine.MaterialExpressionCrossProduct
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionCrossProduct : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
};

// Class Engine.MaterialExpressionScalarParameter
// Size: 0x60 (Inherited: 0x58)
struct UMaterialExpressionScalarParameter : UMaterialExpressionParameter {
	float DefaultValue; // 0x58(0x04)
	bool bUseCustomPrimitiveData; // 0x5c(0x01)
	char PrimitiveDataIndex; // 0x5d(0x01)
	char pad_5E[0x2]; // 0x5e(0x02)
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// Size: 0x88 (Inherited: 0x60)
struct UMaterialExpressionCurveAtlasRowParameter : UMaterialExpressionScalarParameter {
	struct UCurveLinearColor* Curve; // 0x60(0x08)
	struct UCurveLinearColorAtlas* Atlas; // 0x68(0x08)
	struct FExpressionInput InputTime; // 0x70(0x14)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class Engine.MaterialExpressionCustom
// Size: 0xa8 (Inherited: 0x40)
struct UMaterialExpressionCustom : UMaterialExpression {
	struct FString Code; // 0x40(0x10)
	enum class ECustomMaterialOutputType OutputType; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FString Description; // 0x58(0x10)
	struct TArray<struct FCustomInput> Inputs; // 0x68(0x10)
	struct TArray<struct FCustomOutput> AdditionalOutputs; // 0x78(0x10)
	struct TArray<struct FCustomDefine> AdditionalDefines; // 0x88(0x10)
	struct TArray<struct FString> IncludeFilePaths; // 0x98(0x10)
};

// Class Engine.MaterialExpressionDBufferTexture
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDBufferTexture : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x40(0x14)
	enum class EDBufferTextureId DBufferTextureId; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionDDX
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDDX : UMaterialExpression {
	struct FExpressionInput Value; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionDDY
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDDY : UMaterialExpression {
	struct FExpressionInput Value; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionDecalDerivative
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDecalDerivative : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDecalLifetimeOpacity : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalMipmapLevel
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionDecalMipmapLevel : UMaterialExpression {
	struct FExpressionInput TextureSize; // 0x40(0x14)
	float ConstWidth; // 0x54(0x04)
	float ConstHeight; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.MaterialExpressionDeltaTime
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDeltaTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionDepthFade
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionDepthFade : UMaterialExpression {
	struct FExpressionInput InOpacity; // 0x40(0x14)
	struct FExpressionInput FadeDistance; // 0x54(0x14)
	float OpacityDefault; // 0x68(0x04)
	float FadeDistanceDefault; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDepthOfFieldFunction : UMaterialExpression {
	enum class EDepthOfFieldFunctionValue FunctionValue; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput Depth; // 0x44(0x14)
};

// Class Engine.MaterialExpressionDeriveNormalZ
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDeriveNormalZ : UMaterialExpression {
	struct FExpressionInput InXY; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionDesaturation
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionDesaturation : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	struct FExpressionInput Fraction; // 0x54(0x14)
	struct FLinearColor LuminanceFactors; // 0x68(0x10)
};

// Class Engine.MaterialExpressionDistance
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDistance : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
};

// Class Engine.MaterialExpressionDistanceCullFade
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDistanceCullFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionDistanceFieldGradient
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDistanceFieldGradient : UMaterialExpression {
	struct FExpressionInput position; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDistanceFieldsRenderingSwitch : UMaterialExpression {
	struct FExpressionInput No; // 0x40(0x14)
	struct FExpressionInput Yes; // 0x54(0x14)
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDistanceToNearestSurface : UMaterialExpression {
	struct FExpressionInput position; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionDivide
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionDivide : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionDotProduct
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDotProduct : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
};

// Class Engine.MaterialExpressionDoubleVectorParameter
// Size: 0x80 (Inherited: 0x58)
struct UMaterialExpressionDoubleVectorParameter : UMaterialExpressionParameter {
	char pad_58[0x8]; // 0x58(0x08)
	struct FVector4d DefaultValue; // 0x60(0x20)
};

// Class Engine.MaterialExpressionDynamicParameter
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDynamicParameter : UMaterialExpression {
	struct TArray<struct FString> ParamNames; // 0x40(0x10)
	struct FLinearColor DefaultValue; // 0x50(0x10)
	uint32_t ParameterIndex; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionExecBegin
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionExecBegin : UMaterialExpression {
	struct FExpressionExecOutput Exec; // 0x40(0x08)
};

// Class Engine.MaterialExpressionExecEnd
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionExecEnd : UMaterialExpression {
};

// Class Engine.MaterialExpressionEyeAdaptation
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionEyeAdaptation : UMaterialExpression {
};

// Class Engine.MaterialExpressionEyeAdaptationInverse
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionEyeAdaptationInverse : UMaterialExpression {
	struct FExpressionInput LightValueInput; // 0x40(0x14)
	struct FExpressionInput AlphaInput; // 0x54(0x14)
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionFeatureLevelSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionFloor
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionFloor : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionFmod
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionFmod : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
};

// Class Engine.MaterialExpressionFontSample
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionFontSample : UMaterialExpression {
	struct UFont* Font; // 0x40(0x08)
	int32_t FontTexturePage; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.MaterialExpressionFontSampleParameter
// Size: 0x70 (Inherited: 0x50)
struct UMaterialExpressionFontSampleParameter : UMaterialExpressionFontSample {
	struct FName ParameterName; // 0x50(0x08)
	struct FGuid ExpressionGuid; // 0x58(0x10)
	struct FName Group; // 0x68(0x08)
};

// Class Engine.MaterialExpressionForLoop
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionForLoop : UMaterialExpression {
	struct FExpressionExecOutput LoopBody; // 0x40(0x08)
	struct FExpressionExecOutput Completed; // 0x48(0x08)
	struct FExpressionInput StartIndex; // 0x50(0x14)
	struct FExpressionInput EndIndex; // 0x64(0x14)
	struct FExpressionInput IndexStep; // 0x78(0x14)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.MaterialExpressionFrac
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionFrac : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionFresnel
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionFresnel : UMaterialExpression {
	struct FExpressionInput ExponentIn; // 0x40(0x14)
	float Exponent; // 0x54(0x04)
	struct FExpressionInput BaseReflectFractionIn; // 0x58(0x14)
	float BaseReflectFraction; // 0x6c(0x04)
	struct FExpressionInput Normal; // 0x70(0x14)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class Engine.MaterialExpressionFunctionInput
// Size: 0xd0 (Inherited: 0x40)
struct UMaterialExpressionFunctionInput : UMaterialExpression {
	struct FExpressionInput Preview; // 0x40(0x14)
	struct FName InputName; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FString Description; // 0x60(0x10)
	struct FGuid ID; // 0x70(0x10)
	enum class EFunctionInputType InputType; // 0x80(0x01)
	char pad_81[0xf]; // 0x81(0x0f)
	struct FVector4 PreviewValue; // 0x90(0x20)
	char bUsePreviewValueAsDefault : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t SortPriority; // 0xb4(0x04)
	char bCompilingFunctionPreview : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x17]; // 0xb9(0x17)
};

// Class Engine.MaterialExpressionFunctionOutput
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionFunctionOutput : UMaterialExpression {
	struct FName OutputName; // 0x40(0x08)
	struct FString Description; // 0x48(0x10)
	int32_t SortPriority; // 0x58(0x04)
	struct FExpressionInput A; // 0x5c(0x14)
	char bLastPreviewed : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FGuid ID; // 0x74(0x10)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class Engine.MaterialExpressionGenericConstant
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionGenericConstant : UMaterialExpression {
};

// Class Engine.MaterialExpressionConstantDouble
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionConstantDouble : UMaterialExpressionGenericConstant {
	double Value; // 0x40(0x08)
};

// Class Engine.MaterialExpressionGetLocal
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionGetLocal : UMaterialExpression {
	struct FName LocalName; // 0x40(0x08)
};

// Class Engine.MaterialExpressionGetMaterialAttributes
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionGetMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0x40(0x18)
	struct TArray<struct FGuid> AttributeGetTypes; // 0x58(0x10)
};

// Class Engine.MaterialExpressionGIReplace
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionGIReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x14)
	struct FExpressionInput StaticIndirect; // 0x54(0x14)
	struct FExpressionInput DynamicIndirect; // 0x68(0x14)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class Engine.MaterialExpressionHairAttributes
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionHairAttributes : UMaterialExpression {
	char bUseTangentSpace : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionHairColor
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionHairColor : UMaterialExpression {
	struct FExpressionInput Melanin; // 0x40(0x14)
	struct FExpressionInput Redness; // 0x54(0x14)
	struct FExpressionInput DyeColor; // 0x68(0x14)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class Engine.MaterialExpressionIf
// Size: 0xb0 (Inherited: 0x40)
struct UMaterialExpressionIf : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	struct FExpressionInput AGreaterThanB; // 0x68(0x14)
	struct FExpressionInput AEqualsB; // 0x7c(0x14)
	struct FExpressionInput ALessThanB; // 0x90(0x14)
	float EqualsThreshold; // 0xa4(0x04)
	float ConstB; // 0xa8(0x04)
	float ConstAEqualsB; // 0xac(0x04)
};

// Class Engine.MaterialExpressionIfThenElse
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionIfThenElse : UMaterialExpression {
	struct FExpressionExecOutput Then; // 0x40(0x08)
	struct FExpressionExecOutput Else; // 0x48(0x08)
	struct FExpressionInput Condition; // 0x50(0x14)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionInverseLinearInterpolate
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionInverseLinearInterpolate : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	struct FExpressionInput Value; // 0x68(0x14)
	float ConstA; // 0x7c(0x04)
	float ConstB; // 0x80(0x04)
	float ConstValue; // 0x84(0x04)
	bool bClampResult; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.MaterialExpressionLightmapUVs
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionLightmapUVs : UMaterialExpression {
};

// Class Engine.MaterialExpressionLightmassReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionLightmassReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0x40(0x14)
	struct FExpressionInput Lightmass; // 0x54(0x14)
};

// Class Engine.MaterialExpressionLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionLinearInterpolate
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionLinearInterpolate : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	struct FExpressionInput Alpha; // 0x68(0x14)
	float ConstA; // 0x7c(0x04)
	float ConstB; // 0x80(0x04)
	float ConstAlpha; // 0x84(0x04)
};

// Class Engine.MaterialExpressionLogarithm10
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionLogarithm10 : UMaterialExpression {
	struct FExpressionInput X; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionLogarithm2
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionLogarithm2 : UMaterialExpression {
	struct FExpressionInput X; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// Size: 0x248 (Inherited: 0x40)
struct UMaterialExpressionMakeMaterialAttributes : UMaterialExpression {
	struct FExpressionInput BaseColor; // 0x40(0x14)
	struct FExpressionInput Metallic; // 0x54(0x14)
	struct FExpressionInput Specular; // 0x68(0x14)
	struct FExpressionInput Roughness; // 0x7c(0x14)
	struct FExpressionInput Anisotropy; // 0x90(0x14)
	struct FExpressionInput EmissiveColor; // 0xa4(0x14)
	struct FExpressionInput Opacity; // 0xb8(0x14)
	struct FExpressionInput OpacityMask; // 0xcc(0x14)
	struct FExpressionInput Normal; // 0xe0(0x14)
	struct FExpressionInput Tangent; // 0xf4(0x14)
	struct FExpressionInput WorldPositionOffset; // 0x108(0x14)
	struct FExpressionInput SubsurfaceColor; // 0x11c(0x14)
	struct FExpressionInput ClearCoat; // 0x130(0x14)
	struct FExpressionInput ClearCoatRoughness; // 0x144(0x14)
	struct FExpressionInput AmbientOcclusion; // 0x158(0x14)
	struct FExpressionInput Refraction; // 0x16c(0x14)
	struct FExpressionInput CustomizedUVs[0x8]; // 0x180(0xa0)
	struct FExpressionInput PixelDepthOffset; // 0x220(0x14)
	struct FExpressionInput ShadingModel; // 0x234(0x14)
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionMapARPassthroughCameraUV : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// Size: 0xb0 (Inherited: 0x40)
struct UMaterialExpressionMaterialAttributeLayers : UMaterialExpression {
	struct FMaterialAttributesInput Input; // 0x40(0x18)
	struct FMaterialLayersFunctions DefaultLayers; // 0x58(0x20)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> LayerCallers; // 0x78(0x10)
	int32_t NumActiveLayerCallers; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> BlendCallers; // 0x90(0x10)
	int32_t NumActiveBlendCallers; // 0xa0(0x04)
	bool bIsLayerGraphBuilt; // 0xa4(0x01)
	char pad_A5[0xb]; // 0xa5(0x0b)
};

// Class Engine.MaterialExpressionMaterialFunctionCall
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionMaterialFunctionCall : UMaterialExpression {
	struct UMaterialFunctionInterface* MaterialFunction; // 0x40(0x08)
	struct FMaterialParameterInfo FunctionParameterInfo; // 0x48(0x10)
};

// Class Engine.MaterialExpressionMaterialLayerOutput
// Size: 0x88 (Inherited: 0x88)
struct UMaterialExpressionMaterialLayerOutput : UMaterialExpressionFunctionOutput {
};

// Class Engine.MaterialExpressionMaterialProxyReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionMaterialProxyReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0x40(0x14)
	struct FExpressionInput MaterialProxy; // 0x54(0x14)
};

// Class Engine.MaterialExpressionMax
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMax : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionMin
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMin : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionMultiply
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMultiply : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionRerouteBase
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionRerouteBase : UMaterialExpression {
};

// Class Engine.MaterialExpressionNamedRerouteBase
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionNamedRerouteBase : UMaterialExpressionRerouteBase {
};

// Class Engine.MaterialExpressionNamedRerouteDeclaration
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionNamedRerouteDeclaration : UMaterialExpressionNamedRerouteBase {
	struct FExpressionInput Input; // 0x40(0x14)
	struct FName Name; // 0x54(0x08)
	struct FGuid VariableGuid; // 0x5c(0x10)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionNamedRerouteUsage
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionNamedRerouteUsage : UMaterialExpressionNamedRerouteBase {
	struct UMaterialExpressionNamedRerouteDeclaration* Declaration; // 0x40(0x08)
	struct FGuid DeclarationGuid; // 0x48(0x10)
};

// Class Engine.MaterialExpressionNoise
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionNoise : UMaterialExpression {
	struct FExpressionInput position; // 0x40(0x14)
	struct FExpressionInput FilterWidth; // 0x54(0x14)
	float Scale; // 0x68(0x04)
	int32_t Quality; // 0x6c(0x04)
	enum class ENoiseFunction NoiseFunction; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	char bTurbulence : 1; // 0x74(0x01)
	char pad_74_1 : 7; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	int32_t Levels; // 0x78(0x04)
	float OutputMin; // 0x7c(0x04)
	float OutputMax; // 0x80(0x04)
	float LevelScale; // 0x84(0x04)
	char bTiling : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	uint32_t RepeatSize; // 0x8c(0x04)
};

// Class Engine.MaterialExpressionNormalize
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionNormalize : UMaterialExpression {
	struct FExpressionInput VectorInput; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionObjectBounds
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectOrientation
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectOrientation : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectRadius
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionOneMinus
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionOneMinus : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionPanner
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionPanner : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x40(0x14)
	struct FExpressionInput Time; // 0x54(0x14)
	struct FExpressionInput Speed; // 0x68(0x14)
	float SpeedX; // 0x7c(0x04)
	float SpeedY; // 0x80(0x04)
	uint32_t ConstCoordinate; // 0x84(0x04)
	bool bFractionalPart; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.MaterialExpressionParticleColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleDirection
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleDirection : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMacroUV
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleMacroUV : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleMotionBlurFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticlePositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticlePositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRadius
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRandom
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRelativeTime
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRelativeTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSpeed
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSpeed : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSubUV
// Size: 0x68 (Inherited: 0x60)
struct UMaterialExpressionParticleSubUV : UMaterialExpressionTextureSample {
	char bBlend : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.MaterialExpressionParticleSubUVProperties
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSubUVProperties : UMaterialExpression {
};

// Class Engine.MaterialExpressionPathTracingQualitySwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionPathTracingQualitySwitch : UMaterialExpression {
	struct FExpressionInput Normal; // 0x40(0x14)
	struct FExpressionInput PathTraced; // 0x54(0x14)
};

// Class Engine.MaterialExpressionPerInstanceCustomData
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceCustomData : UMaterialExpression {
	struct FExpressionInput DefaultValue; // 0x40(0x14)
	float ConstDefaultValue; // 0x54(0x04)
	uint32_t DataIndex; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceCustomData3Vector : UMaterialExpression {
	struct FExpressionInput DefaultValue; // 0x40(0x14)
	struct FLinearColor ConstDefaultValue; // 0x54(0x10)
	uint32_t DataIndex; // 0x64(0x04)
};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceFadeAmount : UMaterialExpression {
};

// Class Engine.MaterialExpressionPerInstanceRandom
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionPinBase
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionPinBase : UMaterialExpression {
	struct TArray<struct FCompositeReroute> ReroutePins; // 0x40(0x10)
	enum class EEdGraphPinDirection PinDirection; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.MaterialExpressionPixelDepth
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPixelDepth : UMaterialExpression {
};

// Class Engine.MaterialExpressionPixelNormalWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPixelNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionPower
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionPower : UMaterialExpression {
	struct FExpressionInput Base; // 0x40(0x14)
	struct FExpressionInput Exponent; // 0x54(0x14)
	float ConstExponent; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionPrecomputedAOMask
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPrecomputedAOMask : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedLocalBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedNormal
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedNormal : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedPosition
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionPreviousFrameSwitch : UMaterialExpression {
	struct FExpressionInput CurrentFrame; // 0x40(0x14)
	struct FExpressionInput PreviousFrame; // 0x54(0x14)
};

// Class Engine.MaterialExpressionQualitySwitch
// Size: 0xa8 (Inherited: 0x40)
struct UMaterialExpressionQualitySwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x14)
	struct FExpressionInput Inputs[0x4]; // 0x54(0x50)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionRayTracingQualitySwitch : UMaterialExpression {
	struct FExpressionInput Normal; // 0x40(0x14)
	struct FExpressionInput RayTraced; // 0x54(0x14)
};

// Class Engine.MaterialExpressionReflectionCapturePassSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionReflectionCapturePassSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x14)
	struct FExpressionInput Reflection; // 0x54(0x14)
};

// Class Engine.MaterialExpressionReflectionVectorWS
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionReflectionVectorWS : UMaterialExpression {
	struct FExpressionInput CustomWorldNormal; // 0x40(0x14)
	char bNormalizeCustomWorldNormal : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionReroute
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionReroute : UMaterialExpressionRerouteBase {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionRotateAboutAxis
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionRotateAboutAxis : UMaterialExpression {
	struct FExpressionInput NormalizedRotationAxis; // 0x40(0x14)
	struct FExpressionInput RotationAngle; // 0x54(0x14)
	struct FExpressionInput PivotPoint; // 0x68(0x14)
	struct FExpressionInput position; // 0x7c(0x14)
	float Period; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.MaterialExpressionRotator
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionRotator : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x40(0x14)
	struct FExpressionInput Time; // 0x54(0x14)
	float CenterX; // 0x68(0x04)
	float CenterY; // 0x6c(0x04)
	float Speed; // 0x70(0x04)
	uint32_t ConstCoordinate; // 0x74(0x04)
};

// Class Engine.MaterialExpressionRound
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionRound : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// Size: 0xd0 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput BaseColor; // 0x40(0x14)
	struct FExpressionInput Specular; // 0x54(0x14)
	struct FExpressionInput Roughness; // 0x68(0x14)
	struct FExpressionInput Normal; // 0x7c(0x14)
	struct FExpressionInput WorldHeight; // 0x90(0x14)
	struct FExpressionInput Opacity; // 0xa4(0x14)
	struct FExpressionInput Mask; // 0xb8(0x14)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x14)
	struct FExpressionInput VirtualTextureOutput; // 0x54(0x14)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureSample : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x40(0x14)
	struct FExpressionInput WorldPosition; // 0x54(0x14)
	struct FExpressionInput MipValue; // 0x68(0x14)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct URuntimeVirtualTexture* VirtualTexture; // 0x80(0x08)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x88(0x01)
	bool bSinglePhysicalSpace; // 0x89(0x01)
	bool bAdaptive; // 0x8a(0x01)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode; // 0x8b(0x01)
	enum class ERuntimeVirtualTextureTextureAddressMode TextureAddressMode; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// Size: 0xb0 (Inherited: 0x90)
struct UMaterialExpressionRuntimeVirtualTextureSampleParameter : UMaterialExpressionRuntimeVirtualTextureSample {
	struct FName ParameterName; // 0x90(0x08)
	struct FGuid ExpressionGuid; // 0x98(0x10)
	struct FName Group; // 0xa8(0x08)
};

// Class Engine.MaterialExpressionSamplePhysicsVectorField
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSamplePhysicsVectorField : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x40(0x14)
	enum class EFieldVectorType FieldTarget; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionSamplePhysicsScalarField
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSamplePhysicsScalarField : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x40(0x14)
	enum class EFieldScalarType FieldTarget; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionSamplePhysicsIntegerField
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSamplePhysicsIntegerField : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x40(0x14)
	enum class EFieldIntegerType FieldTarget; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionSaturate
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSaturate : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionSceneColor
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionSceneColor : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput Input; // 0x44(0x14)
	struct FExpressionInput OffsetFraction; // 0x58(0x14)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FVector2D ConstInput; // 0x70(0x10)
};

// Class Engine.MaterialExpressionSceneDepth
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionSceneDepth : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput Input; // 0x44(0x14)
	struct FExpressionInput Coordinates; // 0x58(0x14)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FVector2D ConstInput; // 0x70(0x10)
};

// Class Engine.MaterialExpressionSceneDepthWithoutWater
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionSceneDepthWithoutWater : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput Input; // 0x44(0x14)
	struct FVector2D ConstInput; // 0x58(0x10)
	float FallbackDepth; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionSceneTexelSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSceneTexelSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionSceneTexture
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSceneTexture : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x40(0x14)
	enum class ESceneTextureId SceneTextureId; // 0x54(0x01)
	bool bFiltered; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
};

// Class Engine.MaterialExpressionScreenPosition
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionScreenPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionSetLocal
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionSetLocal : UMaterialExpression {
	struct FExpressionExecOutput Exec; // 0x40(0x08)
	struct FExpressionInput Value; // 0x48(0x14)
	struct FName LocalName; // 0x5c(0x08)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionSetMaterialAttributes
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionSetMaterialAttributes : UMaterialExpression {
	struct TArray<struct FExpressionInput> Inputs; // 0x40(0x10)
	struct TArray<struct FGuid> AttributeSetTypes; // 0x50(0x10)
};

// Class Engine.MaterialExpressionShaderStageSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionShaderStageSwitch : UMaterialExpression {
	struct FExpressionInput PixelShader; // 0x40(0x14)
	struct FExpressionInput VertexShader; // 0x54(0x14)
};

// Class Engine.MaterialExpressionShadingModel
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionShadingModel : UMaterialExpression {
	enum class EMaterialShadingModel ShadingModel; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionShadingPathSwitch
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionShadingPathSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x14)
	struct FExpressionInput Inputs[0x3]; // 0x54(0x3c)
};

// Class Engine.MaterialExpressionShadowReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionShadowReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x14)
	struct FExpressionInput Shadow; // 0x54(0x14)
};

// Class Engine.MaterialExpressionSign
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSign : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionSine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	float Period; // 0x54(0x04)
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionSingleLayerWaterMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput ScatteringCoefficients; // 0x40(0x14)
	struct FExpressionInput AbsorptionCoefficients; // 0x54(0x14)
	struct FExpressionInput PhaseG; // 0x68(0x14)
	struct FExpressionInput ColorScaleBehindWater; // 0x7c(0x14)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightDirection : UMaterialExpression {
	int32_t LightIndex; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightIlluminance : UMaterialExpression {
	int32_t LightIndex; // 0x40(0x04)
	struct FExpressionInput WorldPosition; // 0x44(0x14)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightDiskLuminance : UMaterialExpression {
	int32_t LightIndex; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereAerialPerspective : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereViewLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSkyLightEnvMapSample
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionSkyLightEnvMapSample : UMaterialExpression {
	struct FExpressionInput Direction; // 0x40(0x14)
	struct FExpressionInput Roughness; // 0x54(0x14)
};

// Class Engine.MaterialExpressionSmoothStep
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionSmoothStep : UMaterialExpression {
	struct FExpressionInput Min; // 0x40(0x14)
	struct FExpressionInput Max; // 0x54(0x14)
	struct FExpressionInput Value; // 0x68(0x14)
	float ConstMin; // 0x7c(0x04)
	float ConstMax; // 0x80(0x04)
	float ConstValue; // 0x84(0x04)
};

// Class Engine.MaterialExpressionSobol
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionSobol : UMaterialExpression {
	struct FExpressionInput Cell; // 0x40(0x14)
	struct FExpressionInput Index; // 0x54(0x14)
	struct FExpressionInput Seed; // 0x68(0x14)
	uint32_t ConstIndex; // 0x7c(0x04)
	struct FVector2D ConstSeed; // 0x80(0x10)
};

// Class Engine.MaterialExpressionSpeedTree
// Size: 0xa0 (Inherited: 0x40)
struct UMaterialExpressionSpeedTree : UMaterialExpression {
	struct FExpressionInput GeometryInput; // 0x40(0x14)
	struct FExpressionInput WindInput; // 0x54(0x14)
	struct FExpressionInput LODInput; // 0x68(0x14)
	struct FExpressionInput ExtraBendWS; // 0x7c(0x14)
	enum class ESpeedTreeGeometryType GeometryType; // 0x90(0x01)
	enum class ESpeedTreeWindType WindType; // 0x91(0x01)
	enum class ESpeedTreeLODType LODType; // 0x92(0x01)
	char pad_93[0x1]; // 0x93(0x01)
	float BillboardThreshold; // 0x94(0x04)
	bool bAccurateWindVelocities; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Engine.MaterialExpressionSphereMask
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionSphereMask : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	struct FExpressionInput Radius; // 0x68(0x14)
	struct FExpressionInput Hardness; // 0x7c(0x14)
	float AttenuationRadius; // 0x90(0x04)
	float HardnessPercent; // 0x94(0x04)
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSphericalParticleOpacity : UMaterialExpression {
	struct FExpressionInput Density; // 0x40(0x14)
	float ConstantDensity; // 0x54(0x04)
};

// Class Engine.MaterialExpressionSquareRoot
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSquareRoot : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionStaticBool
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionStaticBool : UMaterialExpression {
	char Value : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionStaticBoolParameter
// Size: 0x60 (Inherited: 0x58)
struct UMaterialExpressionStaticBoolParameter : UMaterialExpressionParameter {
	char DefaultValue : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// Size: 0x60 (Inherited: 0x58)
struct UMaterialExpressionStaticComponentMaskParameter : UMaterialExpressionParameter {
	char DefaultR : 1; // 0x58(0x01)
	char DefaultG : 1; // 0x58(0x01)
	char DefaultB : 1; // 0x58(0x01)
	char DefaultA : 1; // 0x58(0x01)
	char pad_58_4 : 4; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.MaterialExpressionStaticSwitch
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionStaticSwitch : UMaterialExpression {
	char DefaultValue : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput A; // 0x44(0x14)
	struct FExpressionInput B; // 0x58(0x14)
	struct FExpressionInput Value; // 0x6c(0x14)
};

// Class Engine.MaterialExpressionStaticSwitchParameter
// Size: 0x60 (Inherited: 0x60)
struct UMaterialExpressionStaticSwitchParameter : UMaterialExpressionStaticBoolParameter {
};

// Class Engine.MaterialExpressionStep
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionStep : UMaterialExpression {
	struct FExpressionInput Y; // 0x40(0x14)
	struct FExpressionInput X; // 0x54(0x14)
	float ConstY; // 0x68(0x04)
	float ConstX; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionStrataBSDF
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionStrataBSDF : UMaterialExpression {
};

// Class Engine.MaterialExpressionStrataLegacyConversion
// Size: 0x1e0 (Inherited: 0x40)
struct UMaterialExpressionStrataLegacyConversion : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0x40(0x14)
	struct FExpressionInput Metallic; // 0x54(0x14)
	struct FExpressionInput Specular; // 0x68(0x14)
	struct FExpressionInput Roughness; // 0x7c(0x14)
	struct FExpressionInput Anisotropy; // 0x90(0x14)
	struct FExpressionInput EmissiveColor; // 0xa4(0x14)
	struct FExpressionInput Normal; // 0xb8(0x14)
	struct FExpressionInput Tangent; // 0xcc(0x14)
	struct FExpressionInput SubsurfaceColor; // 0xe0(0x14)
	struct FExpressionInput ClearCoat; // 0xf4(0x14)
	struct FExpressionInput ClearCoatRoughness; // 0x108(0x14)
	struct FExpressionInput Opacity; // 0x11c(0x14)
	struct FExpressionInput TransmittanceColor; // 0x130(0x14)
	struct FExpressionInput WaterScatteringCoefficients; // 0x144(0x14)
	struct FExpressionInput WaterAbsorptionCoefficients; // 0x158(0x14)
	struct FExpressionInput WaterPhaseG; // 0x16c(0x14)
	struct FExpressionInput ColorScaleBehindWater; // 0x180(0x14)
	struct FExpressionInput ClearCoatNormal; // 0x194(0x14)
	struct FExpressionInput ShadingModel; // 0x1a8(0x14)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x1c0(0x08)
	struct FStrataMaterialInfo ConvertedStrataMaterialInfo; // 0x1c8(0x18)
};

// Class Engine.MaterialExpressionStrataSlabBSDF
// Size: 0x1d0 (Inherited: 0x40)
struct UMaterialExpressionStrataSlabBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0x40(0x14)
	struct FExpressionInput EdgeColor; // 0x54(0x14)
	struct FExpressionInput Metallic; // 0x68(0x14)
	struct FExpressionInput Specular; // 0x7c(0x14)
	struct FExpressionInput DiffuseAlbedo; // 0x90(0x14)
	struct FExpressionInput F0; // 0xa4(0x14)
	struct FExpressionInput F90; // 0xb8(0x14)
	struct FExpressionInput Roughness; // 0xcc(0x14)
	struct FExpressionInput Anisotropy; // 0xe0(0x14)
	struct FExpressionInput Normal; // 0xf4(0x14)
	struct FExpressionInput Tangent; // 0x108(0x14)
	struct FExpressionInput SSSDMFP; // 0x11c(0x14)
	struct FExpressionInput SSSDMFPScale; // 0x130(0x14)
	struct FExpressionInput EmissiveColor; // 0x144(0x14)
	struct FExpressionInput Haziness; // 0x158(0x14)
	struct FExpressionInput ThinFilmThickness; // 0x16c(0x14)
	struct FExpressionInput Thickness; // 0x180(0x14)
	struct FExpressionInput FuzzAmount; // 0x194(0x14)
	struct FExpressionInput FuzzColor; // 0x1a8(0x14)
	char pad_1BC[0x4]; // 0x1bc(0x04)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x1c0(0x08)
	char bUseMetalness : 1; // 0x1c8(0x01)
	char pad_1C8_1 : 7; // 0x1c8(0x01)
	char pad_1C9[0x7]; // 0x1c9(0x07)
};

// Class Engine.MaterialExpressionStrataVolumetricFogCloudBSDF
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionStrataVolumetricFogCloudBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Albedo; // 0x40(0x14)
	struct FExpressionInput Extinction; // 0x54(0x14)
	struct FExpressionInput EmissiveColor; // 0x68(0x14)
	struct FExpressionInput AmbientOcclusion; // 0x7c(0x14)
};

// Class Engine.MaterialExpressionStrataUnlitBSDF
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionStrataUnlitBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput EmissiveColor; // 0x40(0x14)
	struct FExpressionInput TransmittanceColor; // 0x54(0x14)
};

// Class Engine.MaterialExpressionStrataHairBSDF
// Size: 0xd0 (Inherited: 0x40)
struct UMaterialExpressionStrataHairBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0x40(0x14)
	struct FExpressionInput Scatter; // 0x54(0x14)
	struct FExpressionInput Specular; // 0x68(0x14)
	struct FExpressionInput Roughness; // 0x7c(0x14)
	struct FExpressionInput Backlit; // 0x90(0x14)
	struct FExpressionInput Tangent; // 0xa4(0x14)
	struct FExpressionInput EmissiveColor; // 0xb8(0x14)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Engine.MaterialExpressionStrataSingleLayerWaterBSDF
// Size: 0x120 (Inherited: 0x40)
struct UMaterialExpressionStrataSingleLayerWaterBSDF : UMaterialExpressionStrataBSDF {
	struct FExpressionInput BaseColor; // 0x40(0x14)
	struct FExpressionInput Metallic; // 0x54(0x14)
	struct FExpressionInput Specular; // 0x68(0x14)
	struct FExpressionInput Roughness; // 0x7c(0x14)
	struct FExpressionInput Normal; // 0x90(0x14)
	struct FExpressionInput EmissiveColor; // 0xa4(0x14)
	struct FExpressionInput TopMaterialOpacity; // 0xb8(0x14)
	struct FExpressionInput WaterAlbedo; // 0xcc(0x14)
	struct FExpressionInput WaterExtinction; // 0xe0(0x14)
	struct FExpressionInput WaterPhaseG; // 0xf4(0x14)
	struct FExpressionInput ColorScaleBehindWater; // 0x108(0x14)
	char pad_11C[0x4]; // 0x11c(0x04)
};

// Class Engine.MaterialExpressionStrataHorizontalMixing
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionStrataHorizontalMixing : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Background; // 0x40(0x14)
	struct FExpressionInput Foreground; // 0x54(0x14)
	struct FExpressionInput Mix; // 0x68(0x14)
	char bUseParameterBlending : 1; // 0x7c(0x01)
	char pad_7C_1 : 7; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
};

// Class Engine.MaterialExpressionStrataVerticalLayering
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionStrataVerticalLayering : UMaterialExpressionStrataBSDF {
	struct FExpressionInput Top; // 0x40(0x14)
	struct FExpressionInput Base; // 0x54(0x14)
	char bUseParameterBlending : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.MaterialExpressionStrataAdd
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionStrataAdd : UMaterialExpressionStrataBSDF {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	char bUseParameterBlending : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.MaterialExpressionStrataWeight
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionStrataWeight : UMaterialExpressionStrataBSDF {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput Weight; // 0x54(0x14)
};

// Class Engine.MaterialExpressionStrataTransmittanceToMFP
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionStrataTransmittanceToMFP : UMaterialExpressionStrataBSDF {
	struct FExpressionInput TransmittanceColor; // 0x40(0x14)
	struct FExpressionInput Thickness; // 0x54(0x14)
};

// Class Engine.MaterialExpressionSubtract
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionSubtract : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x14)
	struct FExpressionInput B; // 0x54(0x14)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionTangent
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTangent : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	float Period; // 0x54(0x04)
};

// Class Engine.MaterialExpressionTangentOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTangentOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionTemporalSobol
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionTemporalSobol : UMaterialExpression {
	struct FExpressionInput Index; // 0x40(0x14)
	struct FExpressionInput Seed; // 0x54(0x14)
	uint32_t ConstIndex; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FVector2D ConstSeed; // 0x70(0x10)
};

// Class Engine.MaterialExpressionTextureCoordinate
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionTextureCoordinate : UMaterialExpression {
	int32_t CoordinateIndex; // 0x40(0x04)
	float UTiling; // 0x44(0x04)
	float VTiling; // 0x48(0x04)
	char UnMirrorU : 1; // 0x4c(0x01)
	char UnMirrorV : 1; // 0x4c(0x01)
	char pad_4C_2 : 6; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.MaterialExpressionTextureObject
// Size: 0x48 (Inherited: 0x48)
struct UMaterialExpressionTextureObject : UMaterialExpressionTextureBase {
};

// Class Engine.MaterialExpressionTextureObjectParameter
// Size: 0x80 (Inherited: 0x80)
struct UMaterialExpressionTextureObjectParameter : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureProperty
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTextureProperty : UMaterialExpression {
	struct FExpressionInput TextureObject; // 0x40(0x14)
	enum class EMaterialExposedTextureProperty Property; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// Size: 0x80 (Inherited: 0x80)
struct UMaterialExpressionTextureSampleParameter2DArray : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// Size: 0x80 (Inherited: 0x80)
struct UMaterialExpressionTextureSampleParameterCube : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
// Size: 0x80 (Inherited: 0x80)
struct UMaterialExpressionTextureSampleParameterCubeArray : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// Size: 0x88 (Inherited: 0x80)
struct UMaterialExpressionTextureSampleParameterSubUV : UMaterialExpressionTextureSampleParameter2D {
	char bBlend : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// Size: 0x80 (Inherited: 0x80)
struct UMaterialExpressionTextureSampleParameterVolume : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionThinTranslucentMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput TransmittanceColor; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionTime
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionTime : UMaterialExpression {
	char bIgnorePause : 1; // 0x40(0x01)
	char bOverride_Period : 1; // 0x40(0x01)
	char pad_40_2 : 6; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float Period; // 0x44(0x04)
};

// Class Engine.MaterialExpressionTransform
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTransform : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	enum class EMaterialVectorCoordTransformSource TransformSourceType; // 0x54(0x01)
	enum class EMaterialVectorCoordTransform TransformType; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
};

// Class Engine.MaterialExpressionTransformPosition
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTransformPosition : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	enum class EMaterialPositionTransformSource TransformSourceType; // 0x54(0x01)
	enum class EMaterialPositionTransformSource TransformType; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
};

// Class Engine.MaterialExpressionTruncate
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTruncate : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.MaterialExpressionTwoSidedSign
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionTwoSidedSign : UMaterialExpression {
};

// Class Engine.MaterialExpressionVectorNoise
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionVectorNoise : UMaterialExpression {
	struct FExpressionInput position; // 0x40(0x14)
	enum class EVectorNoiseFunction NoiseFunction; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t Quality; // 0x58(0x04)
	char bTiling : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	uint32_t TileSize; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionVertexColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexInterpolator
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionVertexInterpolator : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x14)
	char pad_54[0xc]; // 0x54(0x0c)
};

// Class Engine.MaterialExpressionVertexNormalWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexTangentWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexTangentWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionViewProperty
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionViewProperty : UMaterialExpression {
	enum class EMaterialExposedViewProperty Property; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionViewSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionViewSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionVirtualTextureFeatureSwitch : UMaterialExpression {
	struct FExpressionInput No; // 0x40(0x14)
	struct FExpressionInput Yes; // 0x54(0x14)
};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVolumetricAdvancedMaterialInput : UMaterialExpression {
};

// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
// Size: 0xf0 (Inherited: 0x40)
struct UMaterialExpressionVolumetricAdvancedMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput PhaseG; // 0x40(0x14)
	struct FExpressionInput PhaseG2; // 0x54(0x14)
	struct FExpressionInput PhaseBlend; // 0x68(0x14)
	struct FExpressionInput MultiScatteringContribution; // 0x7c(0x14)
	struct FExpressionInput MultiScatteringOcclusion; // 0x90(0x14)
	struct FExpressionInput MultiScatteringEccentricity; // 0xa4(0x14)
	struct FExpressionInput ConservativeDensity; // 0xb8(0x14)
	float ConstPhaseG; // 0xcc(0x04)
	float ConstPhaseG2; // 0xd0(0x04)
	float ConstPhaseBlend; // 0xd4(0x04)
	bool PerSamplePhaseEvaluation; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	uint32_t MultiScatteringApproximationOctaveCount; // 0xdc(0x04)
	float ConstMultiScatteringContribution; // 0xe0(0x04)
	float ConstMultiScatteringOcclusion; // 0xe4(0x04)
	float ConstMultiScatteringEccentricity; // 0xe8(0x04)
	bool bGroundContribution; // 0xec(0x01)
	bool bGrayScaleMaterial; // 0xed(0x01)
	bool bRayMarchVolumeShadow; // 0xee(0x01)
	char pad_EF[0x1]; // 0xef(0x01)
};

// Class Engine.MaterialExpressionWhileLoop
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionWhileLoop : UMaterialExpression {
	struct FExpressionExecOutput LoopBody; // 0x40(0x08)
	struct FExpressionExecOutput Completed; // 0x48(0x08)
	struct FExpressionInput Condition; // 0x50(0x14)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionWorldPosition
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionWorldPosition : UMaterialExpression {
	enum class EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialFunctionInterface
// Size: 0x40 (Inherited: 0x28)
struct UMaterialFunctionInterface : UObject {
	struct FGuid StateId; // 0x28(0x10)
	enum class EMaterialFunctionUsage MaterialFunctionUsage; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.MaterialFunction
// Size: 0x58 (Inherited: 0x40)
struct UMaterialFunction : UMaterialFunctionInterface {
	struct FString Description; // 0x40(0x10)
	char bExposeToLibrary : 1; // 0x50(0x01)
	char bPrefixParameterNames : 1; // 0x50(0x01)
	char pad_50_2 : 6; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.MaterialFunctionInstance
// Size: 0xd0 (Inherited: 0x40)
struct UMaterialFunctionInstance : UMaterialFunctionInterface {
	struct UMaterialFunctionInterface* Parent; // 0x40(0x08)
	struct UMaterialFunctionInterface* Base; // 0x48(0x08)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0x50(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x60(0x10)
	struct TArray<struct FDoubleVectorParameterValue> DoubleVectorParameterValues; // 0x70(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x80(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x90(0x10)
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameterValues; // 0xa0(0x10)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xb0(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xc0(0x10)
};

// Class Engine.MaterialFunctionMaterialLayer
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayer : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerInstance
// Size: 0xd0 (Inherited: 0xd0)
struct UMaterialFunctionMaterialLayerInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialFunctionMaterialLayerBlend
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayerBlend : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// Size: 0xd0 (Inherited: 0xd0)
struct UMaterialFunctionMaterialLayerBlendInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialInstanceActor
// Size: 0x288 (Inherited: 0x278)
struct AMaterialInstanceActor : AActor {
	struct TArray<struct AActor*> TargetActors; // 0x278(0x10)
};

// Class Engine.MaterialInstanceDynamic
// Size: 0x248 (Inherited: 0x1f8)
struct UMaterialInstanceDynamic : UMaterialInstance {
	char pad_1F8[0x50]; // 0x1f8(0x50)

	void SetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b46190
	void SetVectorParameterValue(struct FName ParameterName, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b460c0
	void SetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b45fd0
	void SetTextureParameterValue(struct FName ParameterName, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b45f00
	void SetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b45e10
	void SetScalarParameterValue(struct FName ParameterName, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b45d40
	void SetRuntimeVirtualTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct URuntimeVirtualTexture* Value); // Function Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b45c50
	void SetRuntimeVirtualTextureParameterValue(struct FName ParameterName, struct URuntimeVirtualTexture* Value); // Function Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b45b80
	void SetDoubleVectorParameterValue(struct FName ParameterName, struct FVector Value); // Function Engine.MaterialInstanceDynamic.SetDoubleVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b458e0
	void K2_InterpolateMaterialInstanceParams(struct UMaterialInstance* SourceA, struct UMaterialInstance* SourceB, float Alpha); // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams // (Final|Native|Public|BlueprintCallable) // @ game+0x4b457c0
	struct FLinearColor K2_GetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b45710
	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b45670
	struct UTexture* K2_GetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b455c0
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b45520
	float K2_GetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b45470
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x4b453d0
	void K2_CopyMaterialInstanceParameters(struct UMaterialInterface* Source, bool bQuickParametersOnly); // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x4b45300
	void CopyParameterOverrides(struct UMaterialInstance* MaterialInstance); // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x4b45020
	void CopyInterpParameters(struct UMaterialInstance* Source); // Function Engine.MaterialInstanceDynamic.CopyInterpParameters // (Final|Native|Public) // @ game+0x4b44f90
};

// Class Engine.MaterialParameterCollection
// Size: 0x70 (Inherited: 0x28)
struct UMaterialParameterCollection : UObject {
	struct FGuid StateId; // 0x28(0x10)
	struct TArray<struct FCollectionScalarParameter> ScalarParameters; // 0x38(0x10)
	struct TArray<struct FCollectionVectorParameter> VectorParameters; // 0x48(0x10)
	char pad_58[0x18]; // 0x58(0x18)

	struct TArray<struct FName> GetVectorParameterNames(); // Function Engine.MaterialParameterCollection.GetVectorParameterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x4b49d80
	struct FLinearColor GetVectorParameterDefaultValue(struct FName ParameterName, bool& bParameterFound); // Function Engine.MaterialParameterCollection.GetVectorParameterDefaultValue // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b49ca0
	struct TArray<struct FName> GetScalarParameterNames(); // Function Engine.MaterialParameterCollection.GetScalarParameterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x4b49c20
	float GetScalarParameterDefaultValue(struct FName ParameterName, bool& bParameterFound); // Function Engine.MaterialParameterCollection.GetScalarParameterDefaultValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b49b40
};

// Class Engine.MaterialParameterCollectionInstance
// Size: 0x120 (Inherited: 0x28)
struct UMaterialParameterCollectionInstance : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UMaterialParameterCollection* Collection; // 0x30(0x08)
	char pad_38[0xe8]; // 0x38(0xe8)
};

// Class Engine.MatineeActor
// Size: 0x320 (Inherited: 0x278)
struct AMatineeActor : AActor {
	struct UInterpData* MatineeData; // 0x278(0x08)
	struct FName MatineeControllerName; // 0x280(0x08)
	float PlayRate; // 0x288(0x04)
	char bPlayOnLevelLoad : 1; // 0x28c(0x01)
	char bForceStartPos : 1; // 0x28c(0x01)
	char pad_28C_2 : 6; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	float ForceStartPosition; // 0x290(0x04)
	char bLooping : 1; // 0x294(0x01)
	char bRewindOnPlay : 1; // 0x294(0x01)
	char bNoResetOnRewind : 1; // 0x294(0x01)
	char bRewindIfAlreadyPlaying : 1; // 0x294(0x01)
	char bDisableRadioFilter : 1; // 0x294(0x01)
	char bClientSideOnly : 1; // 0x294(0x01)
	char bSkipUpdateIfNotVisible : 1; // 0x294(0x01)
	char bIsSkippable : 1; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	int32_t PreferredSplitScreenNum; // 0x298(0x04)
	char bDisableMovementInput : 1; // 0x29c(0x01)
	char bDisableLookAtInput : 1; // 0x29c(0x01)
	char bHidePlayer : 1; // 0x29c(0x01)
	char bHideHud : 1; // 0x29c(0x01)
	char pad_29C_4 : 4; // 0x29c(0x01)
	char pad_29D[0x3]; // 0x29d(0x03)
	struct TArray<struct FInterpGroupActorInfo> GroupActorInfos; // 0x2a0(0x10)
	char bShouldShowGore : 1; // 0x2b0(0x01)
	char pad_2B0_1 : 7; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)
	struct TArray<struct UInterpGroupInst*> GroupInst; // 0x2b8(0x10)
	struct TArray<struct FCameraCutInfo> CameraCuts; // 0x2c8(0x10)
	char bIsPlaying : 1; // 0x2d8(0x01)
	char bReversePlayback : 1; // 0x2d8(0x01)
	char bPaused : 1; // 0x2d8(0x01)
	char bPendingStop : 1; // 0x2d8(0x01)
	char pad_2D8_4 : 4; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	float InterpPosition; // 0x2dc(0x04)
	char pad_2E0[0x4]; // 0x2e0(0x04)
	char ReplicationForceIsPlaying; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	struct FMulticastInlineDelegate OnPlay; // 0x2e8(0x10)
	struct FMulticastInlineDelegate OnStop; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnPause; // 0x308(0x10)
	char pad_318[0x8]; // 0x318(0x08)

	void Stop(); // Function Engine.MatineeActor.Stop // (Native|Public|BlueprintCallable) // @ game+0x4b4a250
	void SetPosition(float NewPosition, bool bJump); // Function Engine.MatineeActor.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x4b49fc0
	void SetLoopingState(bool bNewLooping); // Function Engine.MatineeActor.SetLoopingState // (Native|Public|BlueprintCallable) // @ game+0x1cd92e0
	void Reverse(); // Function Engine.MatineeActor.Reverse // (Native|Public|BlueprintCallable) // @ game+0xae5290
	void Play(); // Function Engine.MatineeActor.Play // (Native|Public|BlueprintCallable) // @ game+0x106d600
	void Pause(); // Function Engine.MatineeActor.Pause // (Native|Public|BlueprintCallable) // @ game+0xae5270
	void EnableGroupByName(struct FString GroupName, bool bEnable); // Function Engine.MatineeActor.EnableGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x4b49870
	void ChangePlaybackDirection(); // Function Engine.MatineeActor.ChangePlaybackDirection // (Native|Public|BlueprintCallable) // @ game+0x19b39a0
};

// Class Engine.MatineeActorCameraAnim
// Size: 0x328 (Inherited: 0x320)
struct AMatineeActorCameraAnim : AMatineeActor {
	struct UCameraAnim* CameraAnim; // 0x320(0x08)
};

// Class Engine.MatineeAnimInterface
// Size: 0x28 (Inherited: 0x28)
struct UMatineeAnimInterface : UInterface {
};

// Class Engine.MatineeInterface
// Size: 0x28 (Inherited: 0x28)
struct UMatineeInterface : UInterface {
};

// Class Engine.MeshDeformer
// Size: 0x28 (Inherited: 0x28)
struct UMeshDeformer : UObject {
};

// Class Engine.MeshDeformerInstance
// Size: 0x28 (Inherited: 0x28)
struct UMeshDeformerInstance : UObject {
};

// Class Engine.MeshMergeCullingVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct AMeshMergeCullingVolume : AVolume {
};

// Class Engine.MeshSimplificationSettings
// Size: 0x48 (Inherited: 0x38)
struct UMeshSimplificationSettings : UDeveloperSettings {
	struct FName MeshReductionModuleName; // 0x38(0x08)
	bool bMeshReductionBackwardCompatible; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MeshVertexPainterKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMeshVertexPainterKismetLibrary : UBlueprintFunctionLibrary {

	void RemovePaintedVertices(struct UStaticMeshComponent* StaticMeshComponent); // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b4de20
	void PaintVerticesSingleColor(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& FillColor, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b4dc70
	void PaintVerticesLerpAlongAxis(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& StartColor, struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b4dab0
};

// Class Engine.MicroTransactionBase
// Size: 0x68 (Inherited: 0x38)
struct UMicroTransactionBase : UPlatformInterfaceBase {
	struct TArray<struct FPurchaseInfo> AvailableProducts; // 0x38(0x10)
	struct FString LastError; // 0x48(0x10)
	struct FString LastErrorSolution; // 0x58(0x10)
};

// Class Engine.MirrorDataTable
// Size: 0x1a0 (Inherited: 0xb0)
struct UMirrorDataTable : UDataTable {
	struct TArray<struct FMirrorFindReplaceExpression> MirrorFindReplaceExpressions; // 0xb0(0x10)
	enum class EAxis MirrorAxis; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
	struct USkeleton* Skeleton; // 0xc8(0x08)
	char pad_D0[0xd0]; // 0xd0(0xd0)
};

// Class Engine.ModelComponent
// Size: 0x580 (Inherited: 0x540)
struct UModelComponent : UPrimitiveComponent {
	char pad_540[0x18]; // 0x540(0x18)
	struct UBodySetup* ModelBodySetup; // 0x558(0x08)
	char pad_560[0x20]; // 0x560(0x20)
};

// Class Engine.MorphTarget
// Size: 0x40 (Inherited: 0x28)
struct UMorphTarget : UObject {
	struct USkeletalMesh* BaseSkelMesh; // 0x28(0x08)
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.NavAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavAgentInterface : UInterface {
};

// Class Engine.NavAreaBase
// Size: 0x30 (Inherited: 0x28)
struct UNavAreaBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.NavCollisionBase
// Size: 0x70 (Inherited: 0x28)
struct UNavCollisionBase : UObject {
	char bIsDynamicObstacle : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x47]; // 0x29(0x47)
};

// Class Engine.NavEdgeProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavEdgeProviderInterface : UInterface {
};

// Class Engine.NavigationDataChunk
// Size: 0x30 (Inherited: 0x28)
struct UNavigationDataChunk : UObject {
	struct FName NavigationDataName; // 0x28(0x08)
};

// Class Engine.NavigationDataChunkActor
// Size: 0x2c0 (Inherited: 0x278)
struct ANavigationDataChunkActor : APartitionActor {
	struct TArray<struct UNavigationDataChunk*> NavDataChunks; // 0x278(0x10)
	struct FBox DataChunkActorBounds; // 0x288(0x38)
};

// Class Engine.NavigationDataInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavigationDataInterface : UInterface {
};

// Class Engine.NavigationSystemBase
// Size: 0x28 (Inherited: 0x28)
struct UNavigationSystemBase : UObject {
};

// Class Engine.NavigationSystemConfig
// Size: 0x50 (Inherited: 0x28)
struct UNavigationSystemConfig : UObject {
	struct FSoftClassPath NavigationSystemClass; // 0x28(0x18)
	struct FNavAgentSelector SupportedAgentsMask; // 0x40(0x04)
	struct FName DefaultAgentName; // 0x44(0x08)
	char bIsOverriden : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.NullNavSysConfig
// Size: 0x50 (Inherited: 0x50)
struct UNullNavSysConfig : UNavigationSystemConfig {
};

// Class Engine.NavLinkDefinition
// Size: 0x50 (Inherited: 0x28)
struct UNavLinkDefinition : UObject {
	struct TArray<struct FNavigationLink> Links; // 0x28(0x10)
	struct TArray<struct FNavigationSegmentLink> SegmentLinks; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
};

// Class Engine.NavPathObserverInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavPathObserverInterface : UInterface {
};

// Class Engine.NavRelevantInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavRelevantInterface : UInterface {
};

// Class Engine.SimulatedClientNetConnection
// Size: 0x3240 (Inherited: 0x3240)
struct USimulatedClientNetConnection : UNetConnection {
};

// Class Engine.NetFaultConfig
// Size: 0x88 (Inherited: 0x88)
struct UNetFaultConfig : UEscalationManagerConfig {
};

// Class Engine.NetPushModelHelpers
// Size: 0x28 (Inherited: 0x28)
struct UNetPushModelHelpers : UBlueprintFunctionLibrary {

	void MarkPropertyDirtyFromRepIndex(struct UObject* Object, int32_t RepIndex, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b511b0
	void MarkPropertyDirty(struct UObject* Object, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b510f0
};

// Class Engine.NetworkPredictionInterface
// Size: 0x28 (Inherited: 0x28)
struct UNetworkPredictionInterface : UInterface {
};

// Class Engine.NetworkSettings
// Size: 0x58 (Inherited: 0x38)
struct UNetworkSettings : UDeveloperSettings {
	char bVerifyPeer : 1; // 0x38(0x01)
	char bEnableMultiplayerWorldOriginRebasing : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t MaxRepArraySize; // 0x3c(0x04)
	int32_t MaxRepArrayMemory; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x48(0x10)
};

// Class Engine.NodeMappingContainer
// Size: 0x168 (Inherited: 0x28)
struct UNodeMappingContainer : UObject {
	struct TMap<struct FName, struct FNodeItem> SourceItems; // 0x28(0x50)
	struct TMap<struct FName, struct FNodeItem> TargetItems; // 0x78(0x50)
	struct TMap<struct FName, struct FName> SourceToTarget; // 0xc8(0x50)
	struct TSoftObjectPtr<UObject> SourceAsset; // 0x118(0x28)
	struct TSoftObjectPtr<UObject> TargetAsset; // 0x140(0x28)
};

// Class Engine.NodeMappingProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNodeMappingProviderInterface : UInterface {
};

// Class Engine.Note
// Size: 0x278 (Inherited: 0x278)
struct ANote : AActor {
};

// Class Engine.ObjectElementAssetDataInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementAssetDataInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectElementCounterInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementCounterInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectElementObjectInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementObjectInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct UObjectElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ObjectLibrary
// Size: 0xa8 (Inherited: 0x28)
struct UObjectLibrary : UObject {
	ClassPtrProperty ObjectBaseClass; // 0x28(0x08)
	bool bHasBlueprintClasses; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct UObject*> Objects; // 0x38(0x10)
	struct TArray<struct TWeakObjectPtr<struct UObject>> WeakObjects; // 0x48(0x10)
	bool bUseWeakReferences; // 0x58(0x01)
	bool bIsFullyLoaded; // 0x59(0x01)
	char pad_5A[0x4e]; // 0x5a(0x4e)
};

// Class Engine.ObjectReferencer
// Size: 0x38 (Inherited: 0x28)
struct UObjectReferencer : UObject {
	struct TArray<struct UObject*> ReferencedObjects; // 0x28(0x10)
};

// Class Engine.ObjectTraceWorldSubsystem
// Size: 0x40 (Inherited: 0x30)
struct UObjectTraceWorldSubsystem : UWorldSubsystem {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.PackageMapClient
// Size: 0x408 (Inherited: 0xe0)
struct UPackageMapClient : UPackageMap {
	char pad_E0[0x328]; // 0xe0(0x328)
};

// Class Engine.PackedLevelActor
// Size: 0x2c8 (Inherited: 0x2c8)
struct APackedLevelActor : ALevelInstance {
};

// Class Engine.PainCausingVolume
// Size: 0x2e8 (Inherited: 0x2c0)
struct APainCausingVolume : APhysicsVolume {
	char bPainCausing : 1; // 0x2c0(0x01)
	char pad_2C0_1 : 7; // 0x2c0(0x01)
	char pad_2C1[0x3]; // 0x2c1(0x03)
	float DamagePerSec; // 0x2c4(0x04)
	struct UDamageType* DamageType; // 0x2c8(0x08)
	float PainInterval; // 0x2d0(0x04)
	char bEntryPain : 1; // 0x2d4(0x01)
	char BACKUP_bPainCausing : 1; // 0x2d4(0x01)
	char pad_2D4_2 : 6; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	struct AController* DamageInstigator; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class Engine.ParticleEmitter
// Size: 0x1c0 (Inherited: 0x28)
struct UParticleEmitter : UObject {
	struct FName EmitterName; // 0x28(0x08)
	int32_t SubUVDataOffset; // 0x30(0x04)
	enum class EEmitterRenderMode EmitterRenderMode; // 0x34(0x01)
	enum class EParticleSignificanceLevel SignificanceLevel; // 0x35(0x01)
	char pad_36[0x1]; // 0x36(0x01)
	char bUseLegacySpawningBehavior : 1; // 0x37(0x01)
	char pad_37_1 : 3; // 0x37(0x01)
	char ConvertedModules : 1; // 0x37(0x01)
	char bIsSoloing : 1; // 0x37(0x01)
	char bCookedOut : 1; // 0x37(0x01)
	char bDisabledLODsKeepEmitterAlive : 1; // 0x37(0x01)
	char bDisableWhenInsignficant : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct UParticleLODLevel*> LODLevels; // 0x40(0x10)
	int32_t PeakActiveParticles; // 0x50(0x04)
	int32_t InitialAllocationCount; // 0x54(0x04)
	float QualityLevelSpawnRateScale; // 0x58(0x04)
	uint32_t DetailModeBitmask; // 0x5c(0x04)
	char pad_60[0x160]; // 0x60(0x160)
};

// Class Engine.ParticleEventManager
// Size: 0x278 (Inherited: 0x278)
struct AParticleEventManager : AActor {
};

// Class Engine.ParticleLODLevel
// Size: 0xb8 (Inherited: 0x28)
struct UParticleLODLevel : UObject {
	int32_t Level; // 0x28(0x04)
	char bEnabled : 1; // 0x2c(0x01)
	char pad_2C_1 : 7; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	struct UParticleModuleRequired* RequiredModule; // 0x30(0x08)
	struct TArray<struct UParticleModule*> Modules; // 0x38(0x10)
	struct UParticleModuleTypeDataBase* TypeDataModule; // 0x48(0x08)
	struct UParticleModuleSpawn* SpawnModule; // 0x50(0x08)
	struct UParticleModuleEventGenerator* EventGenerator; // 0x58(0x08)
	struct TArray<struct UParticleModuleSpawnBase*> SpawningModules; // 0x60(0x10)
	struct TArray<struct UParticleModule*> SpawnModules; // 0x70(0x10)
	struct TArray<struct UParticleModule*> UpdateModules; // 0x80(0x10)
	struct TArray<struct UParticleModuleOrbit*> OrbitModules; // 0x90(0x10)
	struct TArray<struct UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xa0(0x10)
	char ConvertedModules : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t PeakActiveParticles; // 0xb4(0x04)
};

// Class Engine.ParticleSystem
// Size: 0x158 (Inherited: 0x30)
struct UParticleSystem : UFXSystemAsset {
	float UpdateTime_FPS; // 0x30(0x04)
	float UpdateTime_Delta; // 0x34(0x04)
	float WarmupTime; // 0x38(0x04)
	float WarmupTickRate; // 0x3c(0x04)
	struct TArray<struct UParticleEmitter*> Emitters; // 0x40(0x10)
	struct UParticleSystemComponent* PreviewComponent; // 0x50(0x08)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x58(0x08)
	float LODDistanceCheckTime; // 0x60(0x04)
	float MacroUVRadius; // 0x64(0x04)
	struct TArray<float> LODDistances; // 0x68(0x10)
	struct TArray<struct FParticleSystemLOD> LODSettings; // 0x78(0x10)
	struct FBox FixedRelativeBoundingBox; // 0x88(0x38)
	float SecondsBeforeInactive; // 0xc0(0x04)
	float Delay; // 0xc4(0x04)
	float DelayLow; // 0xc8(0x04)
	char bOrientZAxisTowardCamera : 1; // 0xcc(0x01)
	char bUseFixedRelativeBoundingBox : 1; // 0xcc(0x01)
	char bShouldResetPeakCounts : 1; // 0xcc(0x01)
	char bHasPhysics : 1; // 0xcc(0x01)
	char bUseRealtimeThumbnail : 1; // 0xcc(0x01)
	char ThumbnailImageOutOfDate : 1; // 0xcc(0x01)
	char pad_CC_6 : 2; // 0xcc(0x01)
	char bUseDelayRange : 1; // 0xcd(0x01)
	char bAllowManagedTicking : 1; // 0xcd(0x01)
	char bAutoDeactivate : 1; // 0xcd(0x01)
	char bRegenerateLODDuplicate : 1; // 0xcd(0x01)
	char pad_CD_4 : 4; // 0xcd(0x01)
	enum class EParticleSystemUpdateMode SystemUpdateMode; // 0xce(0x01)
	enum class ParticleSystemLODMethod LODMethod; // 0xcf(0x01)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction; // 0xd0(0x01)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xd1(0x01)
	char pad_D2[0x1]; // 0xd2(0x01)
	enum class EParticleSignificanceLevel MaxSignificanceLevel; // 0xd3(0x01)
	uint32_t MinTimeBetweenTicks; // 0xd4(0x04)
	float InsignificanceDelay; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct FVector MacroUVPosition; // 0xe0(0x18)
	struct FBox CustomOcclusionBounds; // 0xf8(0x38)
	struct TArray<struct FLODSoloTrack> SoloTracking; // 0x130(0x10)
	struct TArray<struct FNamedEmitterMaterial> NamedMaterialSlots; // 0x140(0x10)
	char pad_150[0x8]; // 0x150(0x08)

	bool ContainsEmitterType(struct UObject* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType // (Final|Native|Public|BlueprintCallable) // @ game+0x4b5ce00
};

// Class Engine.ParticleModule
// Size: 0x30 (Inherited: 0x28)
struct UParticleModule : UObject {
	char bSpawnModule : 1; // 0x28(0x01)
	char bUpdateModule : 1; // 0x28(0x01)
	char bFinalUpdateModule : 1; // 0x28(0x01)
	char bUpdateForGPUEmitter : 1; // 0x28(0x01)
	char bCurvesAsColor : 1; // 0x28(0x01)
	char b3DDrawMode : 1; // 0x28(0x01)
	char bSupported3DDrawMode : 1; // 0x28(0x01)
	char bEnabled : 1; // 0x28(0x01)
	char bEditable : 1; // 0x29(0x01)
	char LODDuplicate : 1; // 0x29(0x01)
	char bSupportsRandomSeed : 1; // 0x29(0x01)
	char bRequiresLoopingNotification : 1; // 0x29(0x01)
	char pad_29_4 : 4; // 0x29(0x01)
	char LODValidity; // 0x2a(0x01)
	char pad_2B[0x5]; // 0x2b(0x05)
};

// Class Engine.ParticleModuleAccelerationBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleAccelerationBase : UParticleModule {
	char bAlwaysInWorldSpace : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleAcceleration
// Size: 0xa0 (Inherited: 0x38)
struct UParticleModuleAcceleration : UParticleModuleAccelerationBase {
	struct FRawDistributionVector Acceleration; // 0x38(0x60)
	char bApplyOwnerScale : 1; // 0x98(0x01)
	char pad_98_1 : 7; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Engine.ParticleModuleAccelerationConstant
// Size: 0x50 (Inherited: 0x38)
struct UParticleModuleAccelerationConstant : UParticleModuleAccelerationBase {
	struct FVector Acceleration; // 0x38(0x18)
};

// Class Engine.ParticleModuleAccelerationDrag
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDrag : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragCoefficient; // 0x38(0x08)
	struct FRawDistributionFloat DragCoefficientRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDragScaleOverLife : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragScale; // 0x38(0x08)
	struct FRawDistributionFloat DragScaleRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationOverLifetime
// Size: 0x98 (Inherited: 0x38)
struct UParticleModuleAccelerationOverLifetime : UParticleModuleAccelerationBase {
	struct FRawDistributionVector AccelOverLife; // 0x38(0x60)
};

// Class Engine.ParticleModuleAttractorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleAttractorBase : UParticleModule {
};

// Class Engine.ParticleModuleAttractorLine
// Size: 0xc0 (Inherited: 0x30)
struct UParticleModuleAttractorLine : UParticleModuleAttractorBase {
	struct FVector EndPoint0; // 0x30(0x18)
	struct FVector EndPoint1; // 0x48(0x18)
	struct FRawDistributionFloat Range; // 0x60(0x30)
	struct FRawDistributionFloat Strength; // 0x90(0x30)
};

// Class Engine.ParticleModuleAttractorParticle
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleAttractorParticle : UParticleModuleAttractorBase {
	struct FName EmitterName; // 0x30(0x08)
	struct FRawDistributionFloat Range; // 0x38(0x30)
	char bStrengthByDistance : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct FRawDistributionFloat Strength; // 0x70(0x30)
	char bAffectBaseVelocity : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	enum class EAttractorParticleSelectionMethod SelectionMethod; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	char bRenewSource : 1; // 0xa8(0x01)
	char bInheritSourceVel : 1; // 0xa8(0x01)
	char pad_A8_2 : 6; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	int32_t LastSelIndex; // 0xac(0x04)
};

// Class Engine.ParticleModuleAttractorPoint
// Size: 0xf8 (Inherited: 0x30)
struct UParticleModuleAttractorPoint : UParticleModuleAttractorBase {
	struct FRawDistributionVector position; // 0x30(0x60)
	struct FRawDistributionFloat Range; // 0x90(0x30)
	struct FRawDistributionFloat Strength; // 0xc0(0x30)
	char StrengthByDistance : 1; // 0xf0(0x01)
	char bAffectBaseVelocity : 1; // 0xf0(0x01)
	char bOverrideVelocity : 1; // 0xf0(0x01)
	char bUseWorldSpacePosition : 1; // 0xf0(0x01)
	char Positive_X : 1; // 0xf0(0x01)
	char Positive_Y : 1; // 0xf0(0x01)
	char Positive_Z : 1; // 0xf0(0x01)
	char Negative_X : 1; // 0xf0(0x01)
	char Negative_Y : 1; // 0xf1(0x01)
	char Negative_Z : 1; // 0xf1(0x01)
	char pad_F1_2 : 6; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)
};

// Class Engine.ParticleModuleAttractorPointGravity
// Size: 0x88 (Inherited: 0x30)
struct UParticleModuleAttractorPointGravity : UParticleModuleAttractorBase {
	struct FVector position; // 0x30(0x18)
	float Radius; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UDistributionFloat* Strength; // 0x50(0x08)
	struct FRawDistributionFloat StrengthRaw; // 0x58(0x30)
};

// Class Engine.ParticleModuleBeamBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleBeamBase : UParticleModule {
};

// Class Engine.ParticleModuleBeamModifier
// Size: 0x138 (Inherited: 0x30)
struct UParticleModuleBeamModifier : UParticleModuleBeamBase {
	enum class BeamModifierType ModifierType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FBeamModifierOptions PositionOptions; // 0x34(0x04)
	struct FRawDistributionVector position; // 0x38(0x60)
	struct FBeamModifierOptions TangentOptions; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FRawDistributionVector Tangent; // 0xa0(0x60)
	char bAbsoluteTangent : 1; // 0x100(0x01)
	char pad_100_1 : 7; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	struct FBeamModifierOptions StrengthOptions; // 0x104(0x04)
	struct FRawDistributionFloat Strength; // 0x108(0x30)
};

// Class Engine.ParticleModuleBeamNoise
// Size: 0x1c0 (Inherited: 0x30)
struct UParticleModuleBeamNoise : UParticleModuleBeamBase {
	char bLowFreq_Enabled : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t Frequency; // 0x34(0x04)
	int32_t Frequency_LowRange; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRawDistributionVector NoiseRange; // 0x40(0x60)
	struct FRawDistributionFloat NoiseRangeScale; // 0xa0(0x30)
	char bNRScaleEmitterTime : 1; // 0xd0(0x01)
	char pad_D0_1 : 7; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct FRawDistributionVector NoiseSpeed; // 0xd8(0x60)
	char bSmooth : 1; // 0x138(0x01)
	char pad_138_1 : 7; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	float NoiseLockRadius; // 0x13c(0x04)
	char bNoiseLock : 1; // 0x140(0x01)
	char bOscillate : 1; // 0x140(0x01)
	char pad_140_2 : 6; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	float NoiseLockTime; // 0x144(0x04)
	float NoiseTension; // 0x148(0x04)
	char bUseNoiseTangents : 1; // 0x14c(0x01)
	char pad_14C_1 : 7; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	struct FRawDistributionFloat NoiseTangentStrength; // 0x150(0x30)
	int32_t NoiseTessellation; // 0x180(0x04)
	char bTargetNoise : 1; // 0x184(0x01)
	char pad_184_1 : 7; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	float FrequencyDistance; // 0x188(0x04)
	char bApplyNoiseScale : 1; // 0x18c(0x01)
	char pad_18C_1 : 7; // 0x18c(0x01)
	char pad_18D[0x3]; // 0x18d(0x03)
	struct FRawDistributionFloat NoiseScale; // 0x190(0x30)
};

// Class Engine.ParticleModuleBeamSource
// Size: 0x148 (Inherited: 0x30)
struct UParticleModuleBeamSource : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod SourceMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName SourceName; // 0x34(0x08)
	char bSourceAbsolute : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct FRawDistributionVector Source; // 0x40(0x60)
	char bLockSource : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	enum class Beam2SourceTargetTangentMethod SourceTangentMethod; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FRawDistributionVector SourceTangent; // 0xa8(0x60)
	char bLockSourceTangent : 1; // 0x108(0x01)
	char pad_108_1 : 7; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct FRawDistributionFloat SourceStrength; // 0x110(0x30)
	char bLockSourceStength : 1; // 0x140(0x01)
	char pad_140_1 : 7; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
};

// Class Engine.ParticleModuleBeamTarget
// Size: 0x150 (Inherited: 0x30)
struct UParticleModuleBeamTarget : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod TargetMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName TargetName; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRawDistributionVector Target; // 0x40(0x60)
	char bTargetAbsolute : 1; // 0xa0(0x01)
	char bLockTarget : 1; // 0xa0(0x01)
	char pad_A0_2 : 6; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	enum class Beam2SourceTargetTangentMethod TargetTangentMethod; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FRawDistributionVector TargetTangent; // 0xa8(0x60)
	char bLockTargetTangent : 1; // 0x108(0x01)
	char pad_108_1 : 7; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct FRawDistributionFloat TargetStrength; // 0x110(0x30)
	char bLockTargetStength : 1; // 0x140(0x01)
	char pad_140_1 : 7; // 0x140(0x01)
	char pad_141[0x3]; // 0x141(0x03)
	float LockRadius; // 0x144(0x04)
	char pad_148[0x8]; // 0x148(0x08)
};

// Class Engine.ParticleModuleCameraBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCameraBase : UParticleModule {
};

// Class Engine.ParticleModuleCameraOffset
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleCameraOffset : UParticleModuleCameraBase {
	struct FRawDistributionFloat CameraOffset; // 0x30(0x30)
	char bSpawnTimeOnly : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.ParticleModuleCollisionBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCollisionBase : UParticleModule {
};

// Class Engine.ParticleModuleCollision
// Size: 0x1c0 (Inherited: 0x30)
struct UParticleModuleCollision : UParticleModuleCollisionBase {
	struct FRawDistributionVector DampingFactor; // 0x30(0x60)
	struct FRawDistributionVector DampingFactorRotation; // 0x90(0x60)
	struct FRawDistributionFloat MaxCollisions; // 0xf0(0x30)
	enum class EParticleCollisionComplete CollisionCompletionOption; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
	struct TArray<enum class EObjectTypeQuery> CollisionTypes; // 0x128(0x10)
	char pad_138[0x8]; // 0x138(0x08)
	char bApplyPhysics : 1; // 0x140(0x01)
	char bIgnoreTriggerVolumes : 1; // 0x140(0x01)
	char pad_140_2 : 6; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct FRawDistributionFloat ParticleMass; // 0x148(0x30)
	float DirScalar; // 0x178(0x04)
	char bPawnsDoNotDecrementCount : 1; // 0x17c(0x01)
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x17c(0x01)
	char pad_17C_2 : 6; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	float VerticalFudgeFactor; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct FRawDistributionFloat DelayAmount; // 0x188(0x30)
	char bDropDetail : 1; // 0x1b8(0x01)
	char bCollideOnlyIfVisible : 1; // 0x1b8(0x01)
	char bIgnoreSourceActor : 1; // 0x1b8(0x01)
	char pad_1B8_3 : 5; // 0x1b8(0x01)
	char pad_1B9[0x3]; // 0x1b9(0x03)
	float MaxCollisionDistance; // 0x1bc(0x04)
};

// Class Engine.ParticleModuleCollisionGPU
// Size: 0xa8 (Inherited: 0x30)
struct UParticleModuleCollisionGPU : UParticleModuleCollisionBase {
	struct FRawDistributionFloat Resilience; // 0x30(0x30)
	struct FRawDistributionFloat ResilienceScaleOverLife; // 0x60(0x30)
	float Friction; // 0x90(0x04)
	float RandomSpread; // 0x94(0x04)
	float RandomDistribution; // 0x98(0x04)
	float RadiusScale; // 0x9c(0x04)
	float RadiusBias; // 0xa0(0x04)
	enum class EParticleCollisionResponse Response; // 0xa4(0x01)
	enum class EParticleCollisionMode CollisionMode; // 0xa5(0x01)
	char pad_A6[0x2]; // 0xa6(0x02)
};

// Class Engine.ParticleModuleColorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleColorBase : UParticleModule {
};

// Class Engine.ParticleModuleColor
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleColor : UParticleModuleColorBase {
	struct FRawDistributionVector StartColor; // 0x30(0x60)
	struct FRawDistributionFloat StartAlpha; // 0x90(0x30)
	char bClampAlpha : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.ParticleModuleColorOverLife
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleColorOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorOverLife; // 0x30(0x60)
	struct FRawDistributionFloat AlphaOverLife; // 0x90(0x30)
	char bClampAlpha : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.ParticleModuleColorScaleOverLife
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleColorScaleOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorScaleOverLife; // 0x30(0x60)
	struct FRawDistributionFloat AlphaScaleOverLife; // 0x90(0x30)
	char bEmitterTime : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.ParticleModuleColor_Seeded
// Size: 0xe8 (Inherited: 0xc8)
struct UParticleModuleColor_Seeded : UParticleModuleColor {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xc8(0x20)
};

// Class Engine.ParticleModuleEventBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleEventBase : UParticleModule {
};

// Class Engine.ParticleModuleEventGenerator
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleEventGenerator : UParticleModuleEventBase {
	struct TArray<struct FParticleEvent_GenerateInfo> Events; // 0x30(0x10)
};

// Class Engine.ParticleModuleEventReceiverBase
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleEventReceiverBase : UParticleModuleEventBase {
	enum class EParticleEventType EventGeneratorType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName EventName; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.ParticleModuleEventReceiverKillParticles
// Size: 0x48 (Inherited: 0x40)
struct UParticleModuleEventReceiverKillParticles : UParticleModuleEventReceiverBase {
	char bStopSpawning : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.ParticleModuleEventReceiverSpawn
// Size: 0xf0 (Inherited: 0x40)
struct UParticleModuleEventReceiverSpawn : UParticleModuleEventReceiverBase {
	struct FRawDistributionFloat SpawnCount; // 0x40(0x30)
	char bUseParticleTime : 1; // 0x70(0x01)
	char bUsePSysLocation : 1; // 0x70(0x01)
	char bInheritVelocity : 1; // 0x70(0x01)
	char pad_70_3 : 5; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FRawDistributionVector InheritVelocityScale; // 0x78(0x60)
	struct TArray<struct UPhysicalMaterial*> PhysicalMaterials; // 0xd8(0x10)
	char bBanPhysicalMaterials : 1; // 0xe8(0x01)
	char pad_E8_1 : 7; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class Engine.ParticleModuleEventSendToGame
// Size: 0x28 (Inherited: 0x28)
struct UParticleModuleEventSendToGame : UObject {
};

// Class Engine.ParticleModuleKillBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleKillBase : UParticleModule {
};

// Class Engine.ParticleModuleKillBox
// Size: 0xf8 (Inherited: 0x30)
struct UParticleModuleKillBox : UParticleModuleKillBase {
	struct FRawDistributionVector LowerLeftCorner; // 0x30(0x60)
	struct FRawDistributionVector UpperRightCorner; // 0x90(0x60)
	char bAbsolute : 1; // 0xf0(0x01)
	char bKillInside : 1; // 0xf0(0x01)
	char bAxisAlignedAndFixedSize : 1; // 0xf0(0x01)
	char pad_F0_3 : 5; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class Engine.ParticleModuleKillHeight
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleKillHeight : UParticleModuleKillBase {
	struct FRawDistributionFloat Height; // 0x30(0x30)
	char bAbsolute : 1; // 0x60(0x01)
	char bFloor : 1; // 0x60(0x01)
	char bApplyPSysScale : 1; // 0x60(0x01)
	char pad_60_3 : 5; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.ParticleModuleLifetimeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLifetimeBase : UParticleModule {
};

// Class Engine.ParticleModuleLifetime
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleLifetime : UParticleModuleLifetimeBase {
	struct FRawDistributionFloat LifeTime; // 0x30(0x30)
};

// Class Engine.ParticleModuleLifetime_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleLifetime_Seeded : UParticleModuleLifetime {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x20)
};

// Class Engine.ParticleModuleLightBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLightBase : UParticleModule {
};

// Class Engine.ParticleModuleLight
// Size: 0x138 (Inherited: 0x30)
struct UParticleModuleLight : UParticleModuleLightBase {
	bool bUseInverseSquaredFalloff; // 0x30(0x01)
	bool bAffectsTranslucency; // 0x31(0x01)
	bool bPreviewLightRadius; // 0x32(0x01)
	char pad_33[0x1]; // 0x33(0x01)
	float SpawnFraction; // 0x34(0x04)
	struct FRawDistributionVector ColorScaleOverLife; // 0x38(0x60)
	struct FRawDistributionFloat BrightnessOverLife; // 0x98(0x30)
	struct FRawDistributionFloat RadiusScale; // 0xc8(0x30)
	struct FRawDistributionFloat LightExponent; // 0xf8(0x30)
	struct FLightingChannels LightingChannels; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float VolumetricScatteringIntensity; // 0x12c(0x04)
	bool bHighQualityLights; // 0x130(0x01)
	bool bShadowCastingLights; // 0x131(0x01)
	char pad_132[0x6]; // 0x132(0x06)
};

// Class Engine.ParticleModuleLight_Seeded
// Size: 0x158 (Inherited: 0x138)
struct UParticleModuleLight_Seeded : UParticleModuleLight {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x138(0x20)
};

// Class Engine.ParticleModuleLocationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLocationBase : UParticleModule {
};

// Class Engine.ParticleModuleLocation
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleLocation : UParticleModuleLocationBase {
	struct FRawDistributionVector StartLocation; // 0x30(0x60)
	float DistributeOverNPoints; // 0x90(0x04)
	float DistributeThreshold; // 0x94(0x04)
};

// Class Engine.ParticleModuleLocationBoneSocket
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleLocationBoneSocket : UParticleModuleLocationBase {
	enum class ELocationBoneSocketSource SourceType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FVector UniversalOffset; // 0x38(0x18)
	struct TArray<struct FLocationBoneSocketInfo> SourceLocations; // 0x50(0x10)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	char bUpdatePositionEachFrame : 1; // 0x64(0x01)
	char bOrientMeshEmitters : 1; // 0x64(0x01)
	char bInheritBoneVelocity : 1; // 0x64(0x01)
	char pad_64_3 : 5; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	float InheritVelocityScale; // 0x68(0x04)
	struct FName SkelMeshActorParamName; // 0x6c(0x08)
	int32_t NumPreSelectedIndices; // 0x74(0x04)
	char pad_78[0x8]; // 0x78(0x08)
};

// Class Engine.ParticleModuleLocationDirect
// Size: 0x1b0 (Inherited: 0x30)
struct UParticleModuleLocationDirect : UParticleModuleLocationBase {
	struct FRawDistributionVector Location; // 0x30(0x60)
	struct FRawDistributionVector LocationOffset; // 0x90(0x60)
	struct FRawDistributionVector ScaleFactor; // 0xf0(0x60)
	struct FRawDistributionVector Direction; // 0x150(0x60)
};

// Class Engine.ParticleModuleLocationEmitter
// Size: 0x50 (Inherited: 0x30)
struct UParticleModuleLocationEmitter : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x30(0x08)
	enum class ELocationEmitterSelectionMethod SelectionMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	char InheritSourceVelocity : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	float InheritSourceVelocityScale; // 0x40(0x04)
	char bInheritSourceRotation : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float InheritSourceRotationScale; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.ParticleModuleLocationEmitterDirect
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleLocationEmitterDirect : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x30(0x08)
};

// Class Engine.ParticleModuleLocationPrimitiveBase
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveBase : UParticleModuleLocationBase {
	char Positive_X : 1; // 0x30(0x01)
	char Positive_Y : 1; // 0x30(0x01)
	char Positive_Z : 1; // 0x30(0x01)
	char Negative_X : 1; // 0x30(0x01)
	char Negative_Y : 1; // 0x30(0x01)
	char Negative_Z : 1; // 0x30(0x01)
	char SurfaceOnly : 1; // 0x30(0x01)
	char Velocity : 1; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FRawDistributionFloat VelocityScale; // 0x38(0x30)
	struct FRawDistributionVector StartLocation; // 0x68(0x60)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// Size: 0x138 (Inherited: 0xc8)
struct UParticleModuleLocationPrimitiveCylinder : UParticleModuleLocationPrimitiveBase {
	char RadialVelocity : 1; // 0xc8(0x01)
	char pad_C8_1 : 7; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct FRawDistributionFloat StartRadius; // 0xd0(0x30)
	struct FRawDistributionFloat StartHeight; // 0x100(0x30)
	enum class CylinderHeightAxis HeightAxis; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// Size: 0x158 (Inherited: 0x138)
struct UParticleModuleLocationPrimitiveCylinder_Seeded : UParticleModuleLocationPrimitiveCylinder {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x138(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// Size: 0xf8 (Inherited: 0xc8)
struct UParticleModuleLocationPrimitiveSphere : UParticleModuleLocationPrimitiveBase {
	struct FRawDistributionFloat StartRadius; // 0xc8(0x30)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// Size: 0x118 (Inherited: 0xf8)
struct UParticleModuleLocationPrimitiveSphere_Seeded : UParticleModuleLocationPrimitiveSphere {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xf8(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// Size: 0x120 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveTriangle : UParticleModuleLocationBase {
	struct FRawDistributionVector StartOffset; // 0x30(0x60)
	struct FRawDistributionFloat Height; // 0x90(0x30)
	struct FRawDistributionFloat Angle; // 0xc0(0x30)
	struct FRawDistributionFloat Thickness; // 0xf0(0x30)
};

// Class Engine.ParticleModuleLocationSkelVertSurface
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleLocationSkelVertSurface : UParticleModuleLocationBase {
	enum class ELocationSkelVertSurfaceSource SourceType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FVector UniversalOffset; // 0x38(0x18)
	char bUpdatePositionEachFrame : 1; // 0x50(0x01)
	char bOrientMeshEmitters : 1; // 0x50(0x01)
	char bInheritBoneVelocity : 1; // 0x50(0x01)
	char pad_50_3 : 5; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float InheritVelocityScale; // 0x54(0x04)
	struct FName SkelMeshActorParamName; // 0x58(0x08)
	struct TArray<struct FName> ValidAssociatedBones; // 0x60(0x10)
	char bEnforceNormalCheck : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FVector NormalToCompare; // 0x78(0x18)
	float NormalCheckToleranceDegrees; // 0x90(0x04)
	float NormalCheckTolerance; // 0x94(0x04)
	struct TArray<int32_t> ValidMaterialIndices; // 0x98(0x10)
	char bInheritVertexColor : 1; // 0xa8(0x01)
	char bInheritUV : 1; // 0xa8(0x01)
	char pad_A8_2 : 6; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	uint32_t InheritUVChannel; // 0xac(0x04)
};

// Class Engine.ParticleModuleLocationWorldOffset
// Size: 0x98 (Inherited: 0x98)
struct UParticleModuleLocationWorldOffset : UParticleModuleLocation {
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// Size: 0xb8 (Inherited: 0x98)
struct UParticleModuleLocationWorldOffset_Seeded : UParticleModuleLocationWorldOffset {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x20)
};

// Class Engine.ParticleModuleLocation_Seeded
// Size: 0xb8 (Inherited: 0x98)
struct UParticleModuleLocation_Seeded : UParticleModuleLocation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x20)
};

// Class Engine.ParticleModuleMaterialBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleMaterialBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshMaterial
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleMeshMaterial : UParticleModuleMaterialBase {
	struct TArray<struct UMaterialInterface*> MeshMaterials; // 0x30(0x10)
};

// Class Engine.ParticleModuleRotationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotation
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleMeshRotation : UParticleModuleRotationBase {
	struct FRawDistributionVector StartRotation; // 0x30(0x60)
	char bInheritParent : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleRotationRateBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationRateBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotationRate
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleMeshRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionVector StartRotationRate; // 0x30(0x60)
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector LifeMultiplier; // 0x30(0x60)
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateOverLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector RotRate; // 0x30(0x60)
	char bScaleRotRate : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// Size: 0xb0 (Inherited: 0x90)
struct UParticleModuleMeshRotationRate_Seeded : UParticleModuleMeshRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x20)
};

// Class Engine.ParticleModuleMeshRotation_Seeded
// Size: 0xb8 (Inherited: 0x98)
struct UParticleModuleMeshRotation_Seeded : UParticleModuleMeshRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x20)
};

// Class Engine.ParticleModuleOrbitBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrbitBase : UParticleModule {
	char bUseEmitterTime : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleOrbit
// Size: 0x178 (Inherited: 0x38)
struct UParticleModuleOrbit : UParticleModuleOrbitBase {
	enum class EOrbitChainMode ChainMode; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FRawDistributionVector OffsetAmount; // 0x40(0x60)
	struct FOrbitOptions OffsetOptions; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct FRawDistributionVector RotationAmount; // 0xa8(0x60)
	struct FOrbitOptions RotationOptions; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct FRawDistributionVector RotationRateAmount; // 0x110(0x60)
	struct FOrbitOptions RotationRateOptions; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
};

// Class Engine.ParticleModuleOrientationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleOrientationBase : UParticleModule {
};

// Class Engine.ParticleModuleOrientationAxisLock
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrientationAxisLock : UParticleModuleOrientationBase {
	enum class EParticleAxisLock LockAxisFlags; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleParameterBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleParameterBase : UParticleModule {
};

// Class Engine.ParticleModuleParameterDynamic
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleParameterDynamic : UParticleModuleParameterBase {
	struct TArray<struct FEmitterDynamicParameter> DynamicParams; // 0x30(0x10)
	int32_t UpdateFlags; // 0x40(0x04)
	char bUsesVelocity : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// Size: 0x68 (Inherited: 0x48)
struct UParticleModuleParameterDynamic_Seeded : UParticleModuleParameterDynamic {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x48(0x20)
};

// Class Engine.ParticleModulePivotOffset
// Size: 0x40 (Inherited: 0x30)
struct UParticleModulePivotOffset : UParticleModuleLocationBase {
	struct FVector2D PivotOffset; // 0x30(0x10)
};

// Class Engine.ParticleModuleRequired
// Size: 0x178 (Inherited: 0x30)
struct UParticleModuleRequired : UParticleModule {
	struct UMaterialInterface* Material; // 0x30(0x08)
	float MinFacingCameraBlendDistance; // 0x38(0x04)
	float MaxFacingCameraBlendDistance; // 0x3c(0x04)
	struct FVector EmitterOrigin; // 0x40(0x18)
	struct FRotator EmitterRotation; // 0x58(0x18)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x70(0x01)
	char bUseLocalSpace : 1; // 0x71(0x01)
	char bKillOnDeactivate : 1; // 0x71(0x01)
	char bKillOnCompleted : 1; // 0x71(0x01)
	char pad_71_3 : 5; // 0x71(0x01)
	enum class EParticleSortMode SortMode; // 0x72(0x01)
	char bUseLegacyEmitterTime : 1; // 0x73(0x01)
	char bRemoveHMDRoll : 1; // 0x73(0x01)
	char bSupportLargeWorldCoordinates : 1; // 0x73(0x01)
	char bEmitterDurationUseRange : 1; // 0x73(0x01)
	char pad_73_4 : 4; // 0x73(0x01)
	float EmitterDuration; // 0x74(0x04)
	struct FRawDistributionFloat SpawnRate; // 0x78(0x30)
	struct TArray<struct FParticleBurst> BurstList; // 0xa8(0x10)
	float EmitterDelay; // 0xb8(0x04)
	float EmitterDelayLow; // 0xbc(0x04)
	char bDelayFirstLoopOnly : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	enum class EParticleSubUVInterpMethod InterpolationMethod; // 0xc1(0x01)
	char bScaleUV : 1; // 0xc2(0x01)
	char bEmitterDelayUseRange : 1; // 0xc2(0x01)
	char pad_C2_2 : 6; // 0xc2(0x01)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xc3(0x01)
	char bOverrideSystemMacroUV : 1; // 0xc4(0x01)
	char bUseMaxDrawCount : 1; // 0xc4(0x01)
	char pad_C4_2 : 6; // 0xc4(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0xc5(0x01)
	enum class EEmitterNormalsMode EmitterNormalsMode; // 0xc6(0x01)
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0xc7(0x01)
	char pad_C7_1 : 7; // 0xc7(0x01)
	int32_t SubImages_Horizontal; // 0xc8(0x04)
	int32_t SubImages_Vertical; // 0xcc(0x04)
	float RandomImageTime; // 0xd0(0x04)
	int32_t RandomImageChanges; // 0xd4(0x04)
	struct FVector MacroUVPosition; // 0xd8(0x18)
	float MacroUVRadius; // 0xf0(0x04)
	enum class EParticleUVFlipMode UVFlippingMode; // 0xf4(0x01)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0xf5(0x01)
	char bDurationRecalcEachLoop : 1; // 0xf6(0x01)
	char pad_F6_1 : 7; // 0xf6(0x01)
	char pad_F7[0x1]; // 0xf7(0x01)
	struct FVector NormalsSphereCenter; // 0xf8(0x18)
	float AlphaThreshold; // 0x110(0x04)
	int32_t EmitterLoops; // 0x114(0x04)
	struct UTexture2D* CutoutTexture; // 0x118(0x08)
	int32_t MaxDrawCount; // 0x120(0x04)
	float EmitterDurationLow; // 0x124(0x04)
	struct FVector NormalsCylinderDirection; // 0x128(0x18)
	struct TArray<struct FName> NamedMaterialOverrides; // 0x140(0x10)
	char pad_150[0x28]; // 0x150(0x28)
};

// Class Engine.ParticleModuleRotation
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotation : UParticleModuleRotationBase {
	struct FRawDistributionFloat StartRotation; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationOverLifetime
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleRotationOverLifetime : UParticleModuleRotationBase {
	struct FRawDistributionFloat RotationOverLife; // 0x30(0x30)
	char Scale : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.ParticleModuleRotationRate
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat StartRotationRate; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat LifeMultiplier; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationRate_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleRotationRate_Seeded : UParticleModuleRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x20)
};

// Class Engine.ParticleModuleRotation_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleRotation_Seeded : UParticleModuleRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x20)
};

// Class Engine.ParticleModuleSizeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSizeBase : UParticleModule {
};

// Class Engine.ParticleModuleSize
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleSize : UParticleModuleSizeBase {
	struct FRawDistributionVector StartSize; // 0x30(0x60)
};

// Class Engine.ParticleModuleSizeMultiplyLife
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleSizeMultiplyLife : UParticleModuleSizeBase {
	struct FRawDistributionVector LifeMultiplier; // 0x30(0x60)
	char MultiplyX : 1; // 0x90(0x01)
	char MultiplyY : 1; // 0x90(0x01)
	char MultiplyZ : 1; // 0x90(0x01)
	char pad_90_3 : 5; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleSizeScale
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleSizeScale : UParticleModuleSizeBase {
	struct FRawDistributionVector SizeScale; // 0x30(0x60)
	char EnableX : 1; // 0x90(0x01)
	char EnableY : 1; // 0x90(0x01)
	char EnableZ : 1; // 0x90(0x01)
	char pad_90_3 : 5; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Engine.ParticleModuleSizeScaleBySpeed
// Size: 0x50 (Inherited: 0x30)
struct UParticleModuleSizeScaleBySpeed : UParticleModuleSizeBase {
	struct FVector2D SpeedScale; // 0x30(0x10)
	struct FVector2D MaxScale; // 0x40(0x10)
};

// Class Engine.ParticleModuleSize_Seeded
// Size: 0xb0 (Inherited: 0x90)
struct UParticleModuleSize_Seeded : UParticleModuleSize {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x20)
};

// Class Engine.ParticleModuleSourceMovement
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleSourceMovement : UParticleModuleLocationBase {
	struct FRawDistributionVector SourceMovementScale; // 0x30(0x60)
};

// Class Engine.ParticleModuleSpawnBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleSpawnBase : UParticleModule {
	char bProcessSpawnRate : 1; // 0x30(0x01)
	char bProcessBurstList : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleSpawn
// Size: 0xe8 (Inherited: 0x38)
struct UParticleModuleSpawn : UParticleModuleSpawnBase {
	struct FRawDistributionFloat Rate; // 0x38(0x30)
	struct FRawDistributionFloat RateScale; // 0x68(0x30)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct TArray<struct FParticleBurst> BurstList; // 0xa0(0x10)
	struct FRawDistributionFloat BurstScale; // 0xb0(0x30)
	char bApplyGlobalSpawnRateScale : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class Engine.ParticleModuleSpawnPerUnit
// Size: 0x78 (Inherited: 0x38)
struct UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase {
	float UnitScalar; // 0x38(0x04)
	float MovementTolerance; // 0x3c(0x04)
	struct FRawDistributionFloat SpawnPerUnit; // 0x40(0x30)
	float MaxFrameDistance; // 0x70(0x04)
	char bIgnoreSpawnRateWhenMoving : 1; // 0x74(0x01)
	char bIgnoreMovementAlongX : 1; // 0x74(0x01)
	char bIgnoreMovementAlongY : 1; // 0x74(0x01)
	char bIgnoreMovementAlongZ : 1; // 0x74(0x01)
	char pad_74_4 : 4; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
};

// Class Engine.ParticleModuleSubUVBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSubUVBase : UParticleModule {
};

// Class Engine.ParticleModuleSubUV
// Size: 0x70 (Inherited: 0x30)
struct UParticleModuleSubUV : UParticleModuleSubUVBase {
	struct USubUVAnimation* Animation; // 0x30(0x08)
	struct FRawDistributionFloat SubImageIndex; // 0x38(0x30)
	char bUseRealTime : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.ParticleModuleSubUVMovie
// Size: 0xb0 (Inherited: 0x70)
struct UParticleModuleSubUVMovie : UParticleModuleSubUV {
	char bUseEmitterTime : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FRawDistributionFloat FrameRate; // 0x78(0x30)
	int32_t StartingFrame; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.ParticleModuleTrailBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTrailBase : UParticleModule {
};

// Class Engine.ParticleModuleTrailSource
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleTrailSource : UParticleModuleTrailBase {
	enum class ETrail2SourceMethod SourceMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName SourceName; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRawDistributionFloat SourceStrength; // 0x40(0x30)
	char bLockSourceStength : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	int32_t SourceOffsetCount; // 0x74(0x04)
	struct TArray<struct FVector> SourceOffsetDefaults; // 0x78(0x10)
	enum class EParticleSourceSelectionMethod SelectionMethod; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	char bInheritRotation : 1; // 0x8c(0x01)
	char pad_8C_1 : 7; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
};

// Class Engine.ParticleModuleTypeDataBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTypeDataBase : UParticleModule {
};

// Class Engine.ParticleModuleTypeDataAnimTrail
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleTypeDataAnimTrail : UParticleModuleTypeDataBase {
	char bDeadTrailsOnDeactivate : 1; // 0x30(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x30(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float TilingDistance; // 0x34(0x04)
	float DistanceTessellationStepSize; // 0x38(0x04)
	float TangentTessellationStepSize; // 0x3c(0x04)
	float WidthTessellationStepSize; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleTypeDataBeam2
// Size: 0x150 (Inherited: 0x30)
struct UParticleModuleTypeDataBeam2 : UParticleModuleTypeDataBase {
	enum class EBeam2Method BeamMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t TextureTile; // 0x34(0x04)
	float TextureTileDistance; // 0x38(0x04)
	int32_t Sheets; // 0x3c(0x04)
	int32_t MaxBeamCount; // 0x40(0x04)
	float Speed; // 0x44(0x04)
	int32_t InterpolationPoints; // 0x48(0x04)
	char bAlwaysOn : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	int32_t UpVectorStepSize; // 0x50(0x04)
	struct FName BranchParentName; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FRawDistributionFloat Distance; // 0x60(0x30)
	enum class EBeamTaperMethod TaperMethod; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct FRawDistributionFloat TaperFactor; // 0x98(0x30)
	struct FRawDistributionFloat TaperScale; // 0xc8(0x30)
	char RenderGeometry : 1; // 0xf8(0x01)
	char RenderDirectLine : 1; // 0xf8(0x01)
	char RenderLines : 1; // 0xf8(0x01)
	char RenderTessellation : 1; // 0xf8(0x01)
	char pad_F8_4 : 4; // 0xf8(0x01)
	char pad_F9[0x57]; // 0xf9(0x57)
};

// Class Engine.ParticleModuleTypeDataGpu
// Size: 0x5d0 (Inherited: 0x30)
struct UParticleModuleTypeDataGpu : UParticleModuleTypeDataBase {
	struct FGPUSpriteEmitterInfo EmitterInfo; // 0x30(0x350)
	struct FGPUSpriteResourceData ResourceData; // 0x380(0x240)
	float CameraMotionBlurAmount; // 0x5c0(0x04)
	char bClearExistingParticlesOnInit : 1; // 0x5c4(0x01)
	char pad_5C4_1 : 7; // 0x5c4(0x01)
	char pad_5C5[0xb]; // 0x5c5(0x0b)
};

// Class Engine.ParticleModuleTypeDataMesh
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleTypeDataMesh : UParticleModuleTypeDataBase {
	struct UStaticMesh* Mesh; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
	float LODSizeScale; // 0x40(0x04)
	char bUseStaticMeshLODs : 1; // 0x44(0x01)
	char CastShadows : 1; // 0x44(0x01)
	char DoCollisions : 1; // 0x44(0x01)
	char pad_44_3 : 5; // 0x44(0x01)
	enum class EMeshScreenAlignment MeshAlignment; // 0x45(0x01)
	char bOverrideMaterial : 1; // 0x46(0x01)
	char bOverrideDefaultMotionBlurSettings : 1; // 0x46(0x01)
	char bEnableMotionBlur : 1; // 0x46(0x01)
	char pad_46_3 : 5; // 0x46(0x01)
	char pad_47[0x1]; // 0x47(0x01)
	struct FRawDistributionVector RollPitchYawRange; // 0x48(0x60)
	enum class EParticleAxisLock AxisLockOption; // 0xa8(0x01)
	char bCameraFacing : 1; // 0xa9(0x01)
	char pad_A9_1 : 7; // 0xa9(0x01)
	enum class EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0xaa(0x01)
	enum class EMeshCameraFacingOptions CameraFacingOption; // 0xab(0x01)
	char bApplyParticleRotationAsSpin : 1; // 0xac(0x01)
	char bFaceCameraDirectionRatherThanPosition : 1; // 0xac(0x01)
	char bCollisionsConsiderPartilceSize : 1; // 0xac(0x01)
	char pad_AC_3 : 5; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
};

// Class Engine.ParticleModuleTypeDataRibbon
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleTypeDataRibbon : UParticleModuleTypeDataBase {
	int32_t MaxTessellationBetweenParticles; // 0x30(0x04)
	int32_t SheetsPerTrail; // 0x34(0x04)
	int32_t MaxTrailCount; // 0x38(0x04)
	int32_t MaxParticleInTrailCount; // 0x3c(0x04)
	char bDeadTrailsOnDeactivate : 1; // 0x40(0x01)
	char bDeadTrailsOnSourceLoss : 1; // 0x40(0x01)
	char bClipSourceSegement : 1; // 0x40(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x40(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x40(0x01)
	char bSpawnInitialParticle : 1; // 0x40(0x01)
	char pad_40_6 : 2; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	enum class ETrailsRenderAxisOption RenderAxis; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float TangentSpawningScalar; // 0x48(0x04)
	char bRenderGeometry : 1; // 0x4c(0x01)
	char bRenderSpawnPoints : 1; // 0x4c(0x01)
	char bRenderTangents : 1; // 0x4c(0x01)
	char bRenderTessellation : 1; // 0x4c(0x01)
	char pad_4C_4 : 4; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float TilingDistance; // 0x50(0x04)
	float DistanceTessellationStepSize; // 0x54(0x04)
	char bEnableTangentDiffInterpScale : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float TangentTessellationScalar; // 0x5c(0x04)
};

// Class Engine.ParticleModuleVectorFieldBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleVectorFieldBase : UParticleModule {
};

// Class Engine.ParticleModuleVectorFieldGlobal
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleVectorFieldGlobal : UParticleModuleVectorFieldBase {
	char bOverrideGlobalVectorFieldTightness : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float GlobalVectorFieldScale; // 0x34(0x04)
	float GlobalVectorFieldTightness; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.ParticleModuleVectorFieldLocal
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleVectorFieldLocal : UParticleModuleVectorFieldBase {
	struct UVectorField* VectorField; // 0x30(0x08)
	struct FVector RelativeTranslation; // 0x38(0x18)
	struct FRotator RelativeRotation; // 0x50(0x18)
	struct FVector RelativeScale3D; // 0x68(0x18)
	float Intensity; // 0x80(0x04)
	float Tightness; // 0x84(0x04)
	char bIgnoreComponentTransform : 1; // 0x88(0x01)
	char bTileX : 1; // 0x88(0x01)
	char bTileY : 1; // 0x88(0x01)
	char bTileZ : 1; // 0x88(0x01)
	char bUseFixDT : 1; // 0x88(0x01)
	char pad_88_5 : 3; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.ParticleModuleVectorFieldRotation
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotation : UParticleModuleVectorFieldBase {
	struct FVector MinInitialRotation; // 0x30(0x18)
	struct FVector MaxInitialRotation; // 0x48(0x18)
};

// Class Engine.ParticleModuleVectorFieldRotationRate
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotationRate : UParticleModuleVectorFieldBase {
	struct FVector RotationRate; // 0x30(0x18)
};

// Class Engine.ParticleModuleVectorFieldScale
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScale : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScale; // 0x30(0x08)
	struct FRawDistributionFloat VectorFieldScaleRaw; // 0x38(0x30)
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScaleOverLife : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScaleOverLife; // 0x30(0x08)
	struct FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x38(0x30)
};

// Class Engine.ParticleModuleVelocityBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleVelocityBase : UParticleModule {
	char bInWorldSpace : 1; // 0x30(0x01)
	char bApplyOwnerScale : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleVelocity
// Size: 0xc8 (Inherited: 0x38)
struct UParticleModuleVelocity : UParticleModuleVelocityBase {
	struct FRawDistributionVector StartVelocity; // 0x38(0x60)
	struct FRawDistributionFloat StartVelocityRadial; // 0x98(0x30)
};

// Class Engine.ParticleModuleVelocityCone
// Size: 0xb0 (Inherited: 0x38)
struct UParticleModuleVelocityCone : UParticleModuleVelocityBase {
	struct FRawDistributionFloat Angle; // 0x38(0x30)
	struct FRawDistributionFloat Velocity; // 0x68(0x30)
	struct FVector Direction; // 0x98(0x18)
};

// Class Engine.ParticleModuleVelocityInheritParent
// Size: 0x98 (Inherited: 0x38)
struct UParticleModuleVelocityInheritParent : UParticleModuleVelocityBase {
	struct FRawDistributionVector Scale; // 0x38(0x60)
};

// Class Engine.ParticleModuleVelocityOverLifetime
// Size: 0xa0 (Inherited: 0x38)
struct UParticleModuleVelocityOverLifetime : UParticleModuleVelocityBase {
	struct FRawDistributionVector VelOverLife; // 0x38(0x60)
	char Absolute : 1; // 0x98(0x01)
	char pad_98_1 : 7; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Engine.ParticleModuleVelocity_Seeded
// Size: 0xe8 (Inherited: 0xc8)
struct UParticleModuleVelocity_Seeded : UParticleModuleVelocity {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xc8(0x20)
};

// Class Engine.ParticleSpriteEmitter
// Size: 0x1c0 (Inherited: 0x1c0)
struct UParticleSpriteEmitter : UParticleEmitter {
};

// Class Engine.ParticleSystemComponent
// Size: 0x850 (Inherited: 0x540)
struct UParticleSystemComponent : UFXSystemComponent {
	struct UParticleSystem* Template; // 0x540(0x08)
	struct TArray<struct UMaterialInterface*> EmitterMaterials; // 0x548(0x10)
	struct TArray<struct USkeletalMeshComponent*> SkelMeshComponents; // 0x558(0x10)
	char pad_568[0x1]; // 0x568(0x01)
	char bResetOnDetach : 1; // 0x569(0x01)
	char bUpdateOnDedicatedServer : 1; // 0x569(0x01)
	char pad_569_2 : 2; // 0x569(0x01)
	char bAllowRecycling : 1; // 0x569(0x01)
	char bAutoManageAttachment : 1; // 0x569(0x01)
	char bAutoAttachWeldSimulatedBodies : 1; // 0x569(0x01)
	char pad_569_7 : 1; // 0x569(0x01)
	char pad_56A_0 : 1; // 0x56a(0x01)
	char bWarmingUp : 1; // 0x56a(0x01)
	char bOverrideLODMethod : 1; // 0x56a(0x01)
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x56a(0x01)
	char pad_56A_4 : 4; // 0x56a(0x01)
	char pad_56B[0xa]; // 0x56b(0x0a)
	enum class ParticleSystemLODMethod LODMethod; // 0x575(0x01)
	enum class EParticleSignificanceLevel RequiredSignificance; // 0x576(0x01)
	char pad_577[0x1]; // 0x577(0x01)
	struct TArray<struct FParticleSysParam> InstanceParameters; // 0x578(0x10)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x588(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x598(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x5b8(0x10)
	bool bOldPositionValid; // 0x5c8(0x01)
	char pad_5C9[0x7]; // 0x5c9(0x07)
	struct FVector OldPosition; // 0x5d0(0x18)
	struct FVector PartSysVelocity; // 0x5e8(0x18)
	float WarmupTime; // 0x600(0x04)
	float WarmupTickRate; // 0x604(0x04)
	char pad_608[0x4]; // 0x608(0x04)
	float SecondsBeforeInactive; // 0x60c(0x04)
	char pad_610[0x4]; // 0x610(0x04)
	float MaxTimeBeforeForceUpdateTransform; // 0x614(0x04)
	char pad_618[0x20]; // 0x618(0x20)
	struct TArray<struct UParticleSystemReplay*> ReplayClips; // 0x638(0x10)
	char pad_648[0x8]; // 0x648(0x08)
	float CustomTimeDilation; // 0x650(0x04)
	char pad_654[0x54]; // 0x654(0x54)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x6a8(0x08)
	struct FName AutoAttachSocketName; // 0x6b0(0x08)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x6b8(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x6b9(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x6ba(0x01)
	char pad_6BB[0x55]; // 0x6bb(0x55)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x710(0x10)
	char pad_720[0x130]; // 0x720(0x130)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData // (Final|Native|Public|BlueprintCallable) // @ game+0x4b5eb20
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x4b5ea90
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x4b5e9c0
	void SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5e460
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength // (Native|Public|BlueprintCallable) // @ game+0x4b5e350
	void SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5e220
	void SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5e0f0
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength // (Native|Public|BlueprintCallable) // @ game+0x4b5dfe0
	void SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5deb0
	void SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5ddd0
	void SetAutoAttachParams(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachLocation LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams // (Final|Native|Public|BlueprintCallable) // @ game+0x4b5db00
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d9e0
	struct UMaterialInterface* GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d940
	bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d7f0
	bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d6d0
	bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d5b0
	bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d490
	bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d370
	bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d250
	bool GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b5d160
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b5cf90
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x4b5cf70
	struct UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface* SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x4b5cea0
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x4b5cca0
};

// Class Engine.ParticleSystemReplay
// Size: 0x40 (Inherited: 0x28)
struct UParticleSystemReplay : UObject {
	int32_t ClipIDNumber; // 0x28(0x04)
	char pad_2C[0x14]; // 0x2c(0x14)
};

// Class Engine.PathFollowingAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UPathFollowingAgentInterface : UInterface {
};

// Class Engine.PawnNoiseEmitterComponent
// Size: 0xe8 (Inherited: 0xb0)
struct UPawnNoiseEmitterComponent : UActorComponent {
	char bAIPerceptionSystemCompatibilityMode : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FVector LastRemoteNoisePosition; // 0xb8(0x18)
	float NoiseLifetime; // 0xd0(0x04)
	float LastRemoteNoiseVolume; // 0xd4(0x04)
	float LastRemoteNoiseTime; // 0xd8(0x04)
	float LastLocalNoiseVolume; // 0xdc(0x04)
	float LastLocalNoiseTime; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	void MakeNoise(struct AActor* NoiseMaker, float Loudness, struct FVector& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise // (BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b62360
};

// Class Engine.PhysicalAnimationComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UPhysicalAnimationComponent : UActorComponent {
	float StrengthMultiplyer; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0xb8(0x08)
	char pad_C0[0x30]; // 0xc0(0x30)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer // (Final|Native|Public|BlueprintCallable) // @ game+0x4b62790
	void SetSkeletalMeshComponent(struct USkeletalMeshComponent* InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b62700
	struct FTransform GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b61e60
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b61c10
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b61b20
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x4b619c0
};

// Class Engine.PhysicalMaterialMask
// Size: 0x38 (Inherited: 0x28)
struct UPhysicalMaterialMask : UObject {
	int32_t UVChannelIndex; // 0x28(0x04)
	enum class TextureAddress AddressX; // 0x2c(0x01)
	enum class TextureAddress AddressY; // 0x2d(0x01)
	char pad_2E[0xa]; // 0x2e(0x0a)
};

// Class Engine.PhysicsAsset
// Size: 0x150 (Inherited: 0x28)
struct UPhysicsAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<int32_t> BoundsBodies; // 0x30(0x10)
	struct TArray<struct USkeletalBodySetup*> SkeletalBodySetups; // 0x40(0x10)
	struct TArray<struct UPhysicsConstraintTemplate*> ConstraintSetup; // 0x50(0x10)
	struct FPhysicsAssetSolverSettings SolverSettings; // 0x60(0x18)
	struct FSolverIterations SolverIterations; // 0x78(0x18)
	enum class EPhysicsAssetSolverType SolverType; // 0x90(0x01)
	char bNotForDedicatedServer : 1; // 0x91(0x01)
	char pad_91_1 : 7; // 0x91(0x01)
	char pad_92[0xa6]; // 0x92(0xa6)
	struct UThumbnailInfo* ThumbnailInfo; // 0x138(0x08)
	struct TArray<struct UBodySetup*> BodySetup; // 0x140(0x10)
};

// Class Engine.SkeletalBodySetup
// Size: 0x300 (Inherited: 0x2e8)
struct USkeletalBodySetup : UBodySetup {
	bool bSkipScaleFromAnimation; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
	struct TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData; // 0x2f0(0x10)
};

// Class Engine.PhysicsCollisionHandler
// Size: 0x40 (Inherited: 0x28)
struct UPhysicsCollisionHandler : UObject {
	float ImpactThreshold; // 0x28(0x04)
	float ImpactReFireDelay; // 0x2c(0x04)
	struct USoundBase* DefaultImpactSound; // 0x30(0x08)
	float LastImpactSoundTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.RigidBodyBase
// Size: 0x278 (Inherited: 0x278)
struct ARigidBodyBase : AActor {
};

// Class Engine.PhysicsConstraintActor
// Size: 0x298 (Inherited: 0x278)
struct APhysicsConstraintActor : ARigidBodyBase {
	struct UPhysicsConstraintComponent* ConstraintComp; // 0x278(0x08)
	struct AActor* ConstraintActor1; // 0x280(0x08)
	struct AActor* ConstraintActor2; // 0x288(0x08)
	char bDisableCollision : 1; // 0x290(0x01)
	char pad_290_1 : 7; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)
};

// Class Engine.PhysicsConstraintComponent
// Size: 0x580 (Inherited: 0x2b0)
struct UPhysicsConstraintComponent : USceneComponent {
	struct AActor* ConstraintActor1; // 0x2b0(0x08)
	struct FConstrainComponentPropName ComponentName1; // 0x2b8(0x08)
	struct AActor* ConstraintActor2; // 0x2c0(0x08)
	struct FConstrainComponentPropName ComponentName2; // 0x2c8(0x08)
	char pad_2D0[0x10]; // 0x2d0(0x10)
	struct UPhysicsConstraintTemplate* ConstraintSetup; // 0x2e0(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x2e8(0x10)
	struct FMulticastInlineDelegate OnPlasticDeformation; // 0x2f8(0x10)
	struct FConstraintInstance ConstraintInstance; // 0x308(0x270)
	char pad_578[0x8]; // 0x578(0x08)

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x4b66310
	void SetOrientationDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x4b66280
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x4b661b0
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x4b660e0
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x4b66010
	void SetLinearVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b65f80
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65e50
	void SetLinearPositionTarget(struct FVector& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b65d40
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65c10
	void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, enum class EConstraintPlasticityType PlasticityType); // Function Engine.PhysicsConstraintComponent.SetLinearPlasticity // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65af0
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x4b659d0
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65880
	void SetDisableCollision(bool bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65770
	void SetContactTransferScale(float ContactTransferScale); // Function Engine.PhysicsConstraintComponent.SetContactTransferScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4b656f0
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b65620
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b654f0
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b653a0
	void SetConstrainedComponents(struct UPrimitiveComponent* Component1, struct FName BoneName1, struct UPrimitiveComponent* Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65240
	void SetAngularVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b651b0
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x4b650e0
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65050
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64f80
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64eb0
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64de0
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64d10
	void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularPlasticity // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64bc0
	void SetAngularOrientationTarget(struct FRotator& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b64b30
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64a60
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64940
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4b648c0
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64770
	bool IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64740
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b641c0
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b64190
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b64160
	void GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b64080
	struct FConstraintInstanceAccessor GetConstraint(); // Function Engine.PhysicsConstraintComponent.GetConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64040
	void GetConstrainedComponents(struct UPrimitiveComponent*& OutComponent1, struct FName& OutBoneName1, struct UPrimitiveComponent*& OutComponent2, struct FName& OutBoneName2); // Function Engine.PhysicsConstraintComponent.GetConstrainedComponents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b63ea0
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x4b63e80
};

// Class Engine.PhysicsConstraintTemplate
// Size: 0x400 (Inherited: 0x28)
struct UPhysicsConstraintTemplate : UObject {
	struct FConstraintInstance DefaultInstance; // 0x28(0x270)
	struct TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles; // 0x298(0x10)
	struct FConstraintProfileProperties DefaultProfile; // 0x2a8(0x158)
};

// Class Engine.PhysicsFieldComponent
// Size: 0x350 (Inherited: 0x2b0)
struct UPhysicsFieldComponent : USceneComponent {
	char pad_2B0[0xa0]; // 0x2b0(0xa0)
};

// Class Engine.PhysicsHandleComponent
// Size: 0x4e0 (Inherited: 0xb0)
struct UPhysicsHandleComponent : UActorComponent {
	struct UPrimitiveComponent* GrabbedComponent; // 0xb0(0x08)
	char pad_B8[0x8]; // 0xb8(0x08)
	char pad_C0_0 : 1; // 0xc0(0x01)
	char bSoftAngularConstraint : 1; // 0xc0(0x01)
	char bSoftLinearConstraint : 1; // 0xc0(0x01)
	char bInterpolateTarget : 1; // 0xc0(0x01)
	char pad_C0_4 : 4; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	float LinearDamping; // 0xc4(0x04)
	float LinearStiffness; // 0xc8(0x04)
	float AngularDamping; // 0xcc(0x04)
	float AngularStiffness; // 0xd0(0x04)
	char pad_D4[0xcc]; // 0xd4(0xcc)
	float InterpolationSpeed; // 0x1a0(0x04)
	char pad_1A4[0x33c]; // 0x1a4(0x33c)

	void SetTargetRotation(struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b66560
	void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b66470
	void SetTargetLocation(struct FVector NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b663e0
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65dd0
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65950
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x4b65800
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64c90
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x4b64840
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent // (Native|Public|BlueprintCallable) // @ game+0x2252380
	void GrabComponentAtLocationWithRotation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b64590
	void GrabComponentAtLocation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b64460
	void GrabComponent(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b642d0
	void GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b641f0
	struct UPrimitiveComponent* GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x41471a0
};

// Class Engine.PhysicsSettings
// Size: 0x1f0 (Inherited: 0xe8)
struct UPhysicsSettings : UPhysicsSettingsCore {
	struct FRigidBodyErrorCorrection PhysicErrorCorrection; // 0xe8(0x34)
	enum class ESettingsLockedAxis LockedAxis; // 0x11c(0x01)
	enum class ESettingsDOF DefaultDegreesOfFreedom; // 0x11d(0x01)
	bool bSuppressFaceRemapTable; // 0x11e(0x01)
	bool bSupportUVFromHitResults; // 0x11f(0x01)
	bool bDisableActiveActors; // 0x120(0x01)
	bool bDisableKinematicStaticPairs; // 0x121(0x01)
	bool bDisableKinematicKinematicPairs; // 0x122(0x01)
	bool bDisableCCD; // 0x123(0x01)
	bool bEnableEnhancedDeterminism; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	float AnimPhysicsMinDeltaTime; // 0x128(0x04)
	bool bSimulateAnimPhysicsAfterReset; // 0x12c(0x01)
	char pad_12D[0x3]; // 0x12d(0x03)
	float MinPhysicsDeltaTime; // 0x130(0x04)
	float MaxPhysicsDeltaTime; // 0x134(0x04)
	bool bSubstepping; // 0x138(0x01)
	bool bSubsteppingAsync; // 0x139(0x01)
	bool bTickPhysicsAsync; // 0x13a(0x01)
	char pad_13B[0x1]; // 0x13b(0x01)
	float AsyncFixedTimeStepSize; // 0x13c(0x04)
	float MaxSubstepDeltaTime; // 0x140(0x04)
	int32_t MaxSubsteps; // 0x144(0x04)
	float SyncSceneSmoothingFactor; // 0x148(0x04)
	float InitialAverageFrameRate; // 0x14c(0x04)
	int32_t PhysXTreeRebuildRate; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct TArray<struct FPhysicalSurfaceName> PhysicalSurfaces; // 0x158(0x10)
	struct FBroadphaseSettings DefaultBroadphaseSettings; // 0x168(0x80)
	float MinDeltaVelocityForHitEvents; // 0x1e8(0x04)
	struct FChaosPhysicsSettings ChaosSettings; // 0x1ec(0x03)
	char pad_1EF[0x1]; // 0x1ef(0x01)
};

// Class Engine.PhysicsSpringComponent
// Size: 0x2e0 (Inherited: 0x2b0)
struct UPhysicsSpringComponent : USceneComponent {
	float SpringStiffness; // 0x2b0(0x04)
	float SpringDamping; // 0x2b4(0x04)
	float SpringLengthAtRest; // 0x2b8(0x04)
	float SpringRadius; // 0x2bc(0x04)
	enum class ECollisionChannel SpringChannel; // 0x2c0(0x01)
	bool bIgnoreSelf; // 0x2c1(0x01)
	char pad_2C2[0x2]; // 0x2c2(0x02)
	float SpringCompression; // 0x2c4(0x04)
	char pad_2C8[0x18]; // 0x2c8(0x18)

	struct FVector GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68d70
	struct FVector GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68d30
	struct FVector GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68cf0
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b68c90
};

// Class Engine.PhysicsThruster
// Size: 0x280 (Inherited: 0x278)
struct APhysicsThruster : ARigidBodyBase {
	struct UPhysicsThrusterComponent* ThrusterComponent; // 0x278(0x08)
};

// Class Engine.PhysicsThrusterComponent
// Size: 0x2c0 (Inherited: 0x2b0)
struct UPhysicsThrusterComponent : USceneComponent {
	float ThrustStrength; // 0x2b0(0x04)
	char pad_2B4[0xc]; // 0x2b4(0x0c)
};

// Class Engine.SceneCapture
// Size: 0x288 (Inherited: 0x278)
struct ASceneCapture : AActor {
	struct UStaticMeshComponent* MeshComp; // 0x278(0x08)
	struct USceneComponent* SceneComponent; // 0x280(0x08)
};

// Class Engine.PlanarReflection
// Size: 0x298 (Inherited: 0x288)
struct APlanarReflection : ASceneCapture {
	struct UPlanarReflectionComponent* PlanarReflectionComponent; // 0x288(0x08)
	bool bShowPreviewPlane; // 0x290(0x01)
	char pad_291[0x7]; // 0x291(0x07)

	void OnInterpToggle(bool bEnable); // Function Engine.PlanarReflection.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x4b68e10
};

// Class Engine.SceneCaptureComponent
// Size: 0x370 (Inherited: 0x2b0)
struct USceneCaptureComponent : USceneComponent {
	enum class ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x2b0(0x01)
	enum class ESceneCaptureSource CaptureSource; // 0x2b1(0x01)
	char bCaptureEveryFrame : 1; // 0x2b2(0x01)
	char bCaptureOnMovement : 1; // 0x2b2(0x01)
	char pad_2B2_2 : 6; // 0x2b2(0x01)
	bool bAlwaysPersistRenderingState; // 0x2b3(0x01)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenComponents; // 0x2b8(0x10)
	struct TArray<struct AActor*> HiddenActors; // 0x2c8(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> ShowOnlyComponents; // 0x2d8(0x10)
	struct TArray<struct AActor*> ShowOnlyActors; // 0x2e8(0x10)
	float LODDistanceFactor; // 0x2f8(0x04)
	float MaxViewDistanceOverride; // 0x2fc(0x04)
	int32_t CaptureSortPriority; // 0x300(0x04)
	bool bUseRayTracingIfEnabled; // 0x304(0x01)
	char pad_305[0x3]; // 0x305(0x03)
	struct TArray<struct FEngineShowFlagsSetting> ShowFlagSettings; // 0x308(0x10)
	char pad_318[0x30]; // 0x318(0x30)
	struct FString ProfilingEventName; // 0x348(0x10)
	char pad_358[0x18]; // 0x358(0x18)

	void ShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b93580
	void ShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b934b0
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x4b93050
	void RemoveShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b92e70
	void RemoveShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b92da0
	void HideComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.HideComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b90090
	void HideActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.HideActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b8ffc0
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b8f5f0
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x4b8f5d0
};

// Class Engine.PlanarReflectionComponent
// Size: 0x4d0 (Inherited: 0x370)
struct UPlanarReflectionComponent : USceneCaptureComponent {
	struct UBoxComponent* PreviewBox; // 0x368(0x08)
	float NormalDistortionStrength; // 0x370(0x04)
	float PrefilterRoughness; // 0x374(0x04)
	float PrefilterRoughnessDistance; // 0x378(0x04)
	int32_t ScreenPercentage; // 0x37c(0x04)
	float ExtraFOV; // 0x380(0x04)
	float DistanceFromPlaneFadeStart; // 0x384(0x04)
	float DistanceFromPlaneFadeEnd; // 0x388(0x04)
	float DistanceFromPlaneFadeoutStart; // 0x38c(0x04)
	float DistanceFromPlaneFadeoutEnd; // 0x390(0x04)
	float AngleFromPlaneFadeStart; // 0x394(0x04)
	float AngleFromPlaneFadeEnd; // 0x398(0x04)
	bool bShowPreviewPlane; // 0x39c(0x01)
	bool bRenderSceneTwoSided; // 0x39d(0x01)
	char pad_3A6[0x12a]; // 0x3a6(0x12a)
};

// Class Engine.PlaneReflectionCapture
// Size: 0x280 (Inherited: 0x280)
struct APlaneReflectionCapture : AReflectionCapture {
};

// Class Engine.PlaneReflectionCaptureComponent
// Size: 0x340 (Inherited: 0x330)
struct UPlaneReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadiusScale; // 0x328(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x330(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x338(0x08)
};

// Class Engine.PlatformEventsComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UPlatformEventsComponent : UActorComponent {
	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xc0(0x10)

	bool SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops // (Final|Native|Public|BlueprintCallable) // @ game+0x4b6a250
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x2552560
	bool IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4b68de0
	bool IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode // (Final|Native|Public|BlueprintCallable) // @ game+0x4b68db0
};

// Class Engine.PlatformInterfaceWebResponse
// Size: 0xb0 (Inherited: 0x28)
struct UPlatformInterfaceWebResponse : UObject {
	struct FString OriginalURL; // 0x28(0x10)
	int32_t ResponseCode; // 0x38(0x04)
	int32_t Tag; // 0x3c(0x04)
	struct FString StringResponse; // 0x40(0x10)
	struct TArray<char> BinaryResponse; // 0x50(0x10)
	char pad_60[0x50]; // 0x60(0x50)

	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders // (Native|Public) // @ game+0xdabf60
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue // (Native|Public) // @ game+0x4b68ba0
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader // (Native|Public|HasOutParms) // @ game+0x4b68a40
};

// Class Engine.PlayerStartPIE
// Size: 0x2a8 (Inherited: 0x2a8)
struct APlayerStartPIE : APlayerStart {
};

// Class Engine.PluginCommandlet
// Size: 0xa0 (Inherited: 0x80)
struct UPluginCommandlet : UCommandlet {
	char pad_80[0x20]; // 0x80(0x20)
};

// Class Engine.PointLight
// Size: 0x290 (Inherited: 0x288)
struct APointLight : ALight {
	struct UPointLightComponent* PointLightComponent; // 0x288(0x08)

	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4b7a130
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4b79fa0
};

// Class Engine.PointLightComponent
// Size: 0x420 (Inherited: 0x410)
struct UPointLightComponent : ULocalLightComponent {
	char bUseInverseSquaredFalloff : 1; // 0x408(0x01)
	float LightFalloffExponent; // 0x40c(0x04)
	float SourceRadius; // 0x410(0x04)
	float SoftSourceRadius; // 0x414(0x04)
	float SourceLength; // 0x418(0x04)

	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7a2b0
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7a230
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7a1b0
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7a020
};

// Class Engine.Polys
// Size: 0x38 (Inherited: 0x28)
struct UPolys : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.PoseableMeshComponent
// Size: 0x9c0 (Inherited: 0x820)
struct UPoseableMeshComponent : USkinnedMeshComponent {
	char pad_820[0x1a0]; // 0x820(0x1a0)

	void SetBoneTransformByName(struct FName BoneName, struct FTransform& InTransform, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneTransformByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b79e10
	void SetBoneScaleByName(struct FName BoneName, struct FVector InScale3D, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b79ce0
	void SetBoneRotationByName(struct FName BoneName, struct FRotator InRotation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b79bb0
	void SetBoneLocationByName(struct FName BoneName, struct FVector InLocation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b79a80
	void ResetBoneTransformByName(struct FName BoneName); // Function Engine.PoseableMeshComponent.ResetBoneTransformByName // (Final|Native|Public|BlueprintCallable) // @ game+0x4b79910
	struct FTransform GetBoneTransformByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneTransformByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b794a0
	struct FVector GetBoneScaleByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b793c0
	struct FRotator GetBoneRotationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b792e0
	struct FVector GetBoneLocationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b79200
	void CopyPoseFromSkeletalComponent(struct USkeletalMeshComponent* InComponentToCopy); // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4b79170
};

// Class Engine.PoseAsset
// Size: 0x100 (Inherited: 0x80)
struct UPoseAsset : UAnimationAsset {
	struct FPoseDataContainer PoseContainer; // 0x80(0x60)
	bool bAdditivePose; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t BasePoseIndex; // 0xe4(0x04)
	struct FName RetargetSource; // 0xe8(0x08)
	struct TArray<struct FTransform> RetargetSourceAssetReferencePose; // 0xf0(0x10)
};

// Class Engine.PoseWatchFolder
// Size: 0x28 (Inherited: 0x28)
struct UPoseWatchFolder : UObject {
};

// Class Engine.PoseWatch
// Size: 0x28 (Inherited: 0x28)
struct UPoseWatch : UObject {
};

// Class Engine.PostProcessComponent
// Size: 0x990 (Inherited: 0x2b0)
struct UPostProcessComponent : USceneComponent {
	char pad_2B0[0x10]; // 0x2b0(0x10)
	struct FPostProcessSettings Settings; // 0x2c0(0x6c0)
	float Priority; // 0x980(0x04)
	float BlendRadius; // 0x984(0x04)
	float BlendWeight; // 0x988(0x04)
	char bEnabled : 1; // 0x98c(0x01)
	char bUnbound : 1; // 0x98c(0x01)
	char pad_98C_2 : 6; // 0x98c(0x01)
	char pad_98D[0x3]; // 0x98d(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessComponent.AddOrUpdateBlendable // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4b78eb0
};

// Class Engine.PostProcessVolume
// Size: 0x990 (Inherited: 0x2b0)
struct APostProcessVolume : AVolume {
	char pad_2B0[0x10]; // 0x2b0(0x10)
	struct FPostProcessSettings Settings; // 0x2c0(0x6c0)
	float Priority; // 0x980(0x04)
	float BlendRadius; // 0x984(0x04)
	float BlendWeight; // 0x988(0x04)
	char bEnabled : 1; // 0x98c(0x01)
	char bUnbound : 1; // 0x98c(0x01)
	char pad_98C_2 : 6; // 0x98c(0x01)
	char pad_98D[0x3]; // 0x98d(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessVolume.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x4b78eb0
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// Size: 0x2e0 (Inherited: 0x2b0)
struct APrecomputedVisibilityOverrideVolume : AVolume {
	struct TArray<struct AActor*> OverrideVisibleActors; // 0x2b0(0x10)
	struct TArray<struct AActor*> OverrideInvisibleActors; // 0x2c0(0x10)
	struct TArray<struct FName> OverrideInvisibleLevels; // 0x2d0(0x10)
};

// Class Engine.PrecomputedVisibilityVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct APrecomputedVisibilityVolume : AVolume {
};

// Class Engine.PreviewCollectionInterface
// Size: 0x28 (Inherited: 0x28)
struct UPreviewCollectionInterface : UInterface {
};

// Class Engine.PreviewMeshCollection
// Size: 0x50 (Inherited: 0x30)
struct UPreviewMeshCollection : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct USkeleton* Skeleton; // 0x38(0x08)
	struct TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x40(0x10)
};

// Class Engine.PrimaryAssetLabel
// Size: 0x68 (Inherited: 0x30)
struct UPrimaryAssetLabel : UPrimaryDataAsset {
	struct FPrimaryAssetRules Rules; // 0x30(0x0c)
	char bLabelAssetsInMyDirectory : 1; // 0x3c(0x01)
	char bIsRuntimeLabel : 1; // 0x3c(0x01)
	char pad_3C_2 : 6; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets; // 0x40(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> ExplicitBlueprints; // 0x50(0x10)
	struct FCollectionReference AssetCollection; // 0x60(0x08)
};

// Class Engine.ProjectileMovementComponent
// Size: 0x250 (Inherited: 0x118)
struct UProjectileMovementComponent : UMovementComponent {
	float InitialSpeed; // 0x118(0x04)
	float MaxSpeed; // 0x11c(0x04)
	char bRotationFollowsVelocity : 1; // 0x120(0x01)
	char bRotationRemainsVertical : 1; // 0x120(0x01)
	char bShouldBounce : 1; // 0x120(0x01)
	char bInitialVelocityInLocalSpace : 1; // 0x120(0x01)
	char bForceSubStepping : 1; // 0x120(0x01)
	char bSimulationEnabled : 1; // 0x120(0x01)
	char bSweepCollision : 1; // 0x120(0x01)
	char bIsHomingProjectile : 1; // 0x120(0x01)
	char bBounceAngleAffectsFriction : 1; // 0x121(0x01)
	char bIsSliding : 1; // 0x121(0x01)
	char bInterpMovement : 1; // 0x121(0x01)
	char bInterpRotation : 1; // 0x121(0x01)
	char pad_121_4 : 4; // 0x121(0x01)
	char pad_122[0x2]; // 0x122(0x02)
	float PreviousHitTime; // 0x124(0x04)
	struct FVector PreviousHitNormal; // 0x128(0x18)
	float ProjectileGravityScale; // 0x140(0x04)
	float Buoyancy; // 0x144(0x04)
	float Bounciness; // 0x148(0x04)
	float Friction; // 0x14c(0x04)
	float BounceVelocityStopSimulatingThreshold; // 0x150(0x04)
	float MinFrictionFraction; // 0x154(0x04)
	struct FMulticastInlineDelegate OnProjectileBounce; // 0x158(0x10)
	struct FMulticastInlineDelegate OnProjectileStop; // 0x168(0x10)
	float HomingAccelerationMagnitude; // 0x178(0x04)
	struct TWeakObjectPtr<struct USceneComponent> HomingTargetComponent; // 0x17c(0x08)
	float MaxSimulationTimeStep; // 0x184(0x04)
	int32_t MaxSimulationIterations; // 0x188(0x04)
	int32_t BounceAdditionalIterations; // 0x18c(0x04)
	float InterpLocationTime; // 0x190(0x04)
	float InterpRotationTime; // 0x194(0x04)
	float InterpLocationMaxLagDistance; // 0x198(0x04)
	float InterpLocationSnapToTargetDistance; // 0x19c(0x04)
	char pad_1A0[0xb0]; // 0x1a0(0xb0)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b86470
	void SetVelocityInLocalSpace(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4b863e0
	void SetInterpolatedComponent(struct USceneComponent* Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent // (Native|Public|BlueprintCallable) // @ game+0x4b86240
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation // (Native|Public|BlueprintCallable) // @ game+0x394f6b0
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x2552560
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x2552560
	void MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b85fd0
	struct FVector LimitVelocity(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b85f10
	bool IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b85eb0
	bool IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b85e80
};

// Class Engine.ProxyLODMeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct UProxyLODMeshSimplificationSettings : UDeveloperSettings {
	struct FName ProxyLODMeshReductionModuleName; // 0x38(0x08)
};

// Class Engine.RadialForceActor
// Size: 0x280 (Inherited: 0x278)
struct ARadialForceActor : ARigidBodyBase {
	struct URadialForceComponent* ForceComponent; // 0x278(0x08)

	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce // (Native|Public|BlueprintCallable) // @ game+0xae5290
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x2281e40
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce // (Native|Public|BlueprintCallable) // @ game+0x106d600
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce // (Native|Public|BlueprintCallable) // @ game+0x4b4a250
};

// Class Engine.RadialForceComponent
// Size: 0x2e0 (Inherited: 0x2b0)
struct URadialForceComponent : USceneComponent {
	float Radius; // 0x2b0(0x04)
	enum class ERadialImpulseFalloff Falloff; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float ImpulseStrength; // 0x2b8(0x04)
	char bImpulseVelChange : 1; // 0x2bc(0x01)
	char bIgnoreOwningActor : 1; // 0x2bc(0x01)
	char pad_2BC_2 : 6; // 0x2bc(0x01)
	char pad_2BD[0x3]; // 0x2bd(0x03)
	float ForceStrength; // 0x2c0(0x04)
	float DestructibleDamage; // 0x2c4(0x04)
	struct TArray<enum class EObjectTypeQuery> ObjectTypesToAffect; // 0x2c8(0x10)
	char pad_2D8[0x8]; // 0x2d8(0x08)

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x4b860c0
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x394f6b0
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x4b85e00
};

// Class Engine.RectLight
// Size: 0x290 (Inherited: 0x288)
struct ARectLight : ALight {
	struct URectLightComponent* RectLightComponent; // 0x288(0x08)
};

// Class Engine.RectLightComponent
// Size: 0x430 (Inherited: 0x410)
struct URectLightComponent : ULocalLightComponent {
	float SourceWidth; // 0x408(0x04)
	float SourceHeight; // 0x40c(0x04)
	float BarnDoorAngle; // 0x410(0x04)
	float BarnDoorLength; // 0x414(0x04)
	struct UTexture* SourceTexture; // 0x418(0x08)
	char pad_428[0x8]; // 0x428(0x08)

	void SetSourceWidth(float bNewValue); // Function Engine.RectLightComponent.SetSourceWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x4b86360
	void SetSourceTexture(struct UTexture* bNewValue); // Function Engine.RectLightComponent.SetSourceTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x4b862d0
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x4b7a020
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength // (Final|Native|Public|BlueprintCallable) // @ game+0x4b861c0
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4b86140
};

// Class Engine.RendererSettings
// Size: 0x1c0 (Inherited: 0x38)
struct URendererSettings : UDeveloperSettings {
	char bMobileDisableVertexFog : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t MaxMobileCascades; // 0x3c(0x04)
	enum class EMobileAntiAliasingMethod MobileAntiAliasing; // 0x40(0x01)
	enum class EMobileFloatPrecisionMode MobileFloatPrecisionMode; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	char bMobileAllowDitheredLODTransition : 1; // 0x44(0x01)
	char bMobileVirtualTextures : 1; // 0x44(0x01)
	char bReflectionCaptureCompression : 1; // 0x44(0x01)
	char bDiscardUnusedQualityLevels : 1; // 0x44(0x01)
	char pad_44_4 : 4; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	enum class EShaderCompressionFormat ShaderCompressionFormat; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	char bOcclusionCulling : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float MinScreenRadiusForLights; // 0x50(0x04)
	float MinScreenRadiusForEarlyZPass; // 0x54(0x04)
	float MinScreenRadiusForCSMdepth; // 0x58(0x04)
	char bPrecomputedVisibilityWarning : 1; // 0x5c(0x01)
	char bTextureStreaming : 1; // 0x5c(0x01)
	char bUseDXT5NormalMaps : 1; // 0x5c(0x01)
	char bVirtualTextures : 1; // 0x5c(0x01)
	char bVirtualTextureEnableAutoImport : 1; // 0x5c(0x01)
	char bVirtualTexturedLightmaps : 1; // 0x5c(0x01)
	char bVirtualTextureAnisotropicFiltering : 1; // 0x5c(0x01)
	char pad_5C_7 : 1; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	uint32_t VirtualTextureTileSize; // 0x60(0x04)
	uint32_t VirtualTextureTileBorderSize; // 0x64(0x04)
	uint32_t VirtualTextureFeedbackFactor; // 0x68(0x04)
	enum class EWorkingColorSpace WorkingColorSpaceChoice; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
	struct FVector2D RedChromaticityCoordinate; // 0x70(0x10)
	struct FVector2D GreenChromaticityCoordinate; // 0x80(0x10)
	struct FVector2D BlueChromaticityCoordinate; // 0x90(0x10)
	struct FVector2D WhiteChromaticityCoordinate; // 0xa0(0x10)
	char bClearCoatEnableSecondNormal : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	enum class EDynamicGlobalIlluminationMethod DynamicGlobalIllumination; // 0xb4(0x01)
	enum class EReflectionMethod Reflections; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
	int32_t ReflectionCaptureResolution; // 0xb8(0x04)
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0xbc(0x01)
	char bUseHardwareRayTracingForLumen : 1; // 0xbc(0x01)
	char pad_BC_2 : 6; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	enum class ELumenRayLightingMode LumenRayLightingMode; // 0xc0(0x01)
	enum class ELumenSoftwareTracingMode LumenSoftwareTracingMode; // 0xc1(0x01)
	enum class EShadowMapMethod ShadowMapMethod; // 0xc2(0x01)
	char pad_C3[0x1]; // 0xc3(0x01)
	char bEnableRayTracing : 1; // 0xc4(0x01)
	char bEnableRayTracingShadows : 1; // 0xc4(0x01)
	char bEnableRayTracingSkylight : 1; // 0xc4(0x01)
	char bEnableRayTracingTextureLOD : 1; // 0xc4(0x01)
	char bEnablePathTracing : 1; // 0xc4(0x01)
	char bGenerateMeshDistanceFields : 1; // 0xc4(0x01)
	char pad_C4_6 : 2; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	float DistanceFieldVoxelDensity; // 0xc8(0x04)
	char bAllowStaticLighting : 1; // 0xcc(0x01)
	char bUseNormalMapsForStaticLighting : 1; // 0xcc(0x01)
	char bForwardShading : 1; // 0xcc(0x01)
	char bVertexFoggingForOpaque : 1; // 0xcc(0x01)
	char bSeparateTranslucency : 1; // 0xcc(0x01)
	char pad_CC_5 : 3; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	enum class ETranslucentSortPolicy TranslucentSortPolicy; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct FVector TranslucentSortAxis; // 0xd8(0x18)
	enum class EFixedFoveationLevels HMDFixedFoveationLevel; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	char bHMDFixedFoveationDynamic : 1; // 0xf4(0x01)
	char pad_F4_1 : 7; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	enum class ECustomDepthStencil CustomDepthStencil; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	char bCustomDepthTaaJitter : 1; // 0xfc(0x01)
	char pad_FC_1 : 7; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	enum class EAlphaChannelMode bEnableAlphaChannelInPostProcessing; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	char bDefaultFeatureBloom : 1; // 0x104(0x01)
	char bDefaultFeatureAmbientOcclusion : 1; // 0x104(0x01)
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x104(0x01)
	char bDefaultFeatureAutoExposure : 1; // 0x104(0x01)
	char pad_104_4 : 4; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)
	enum class EAutoExposureMethodUI DefaultFeatureAutoExposure; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	float DefaultFeatureAutoExposureBias; // 0x10c(0x04)
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0x110(0x01)
	char bDefaultFeatureMotionBlur : 1; // 0x110(0x01)
	char bDefaultFeatureLensFlare : 1; // 0x110(0x01)
	char bTemporalUpsampling : 1; // 0x110(0x01)
	char pad_110_4 : 4; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	enum class EAntiAliasingMethod DefaultFeatureAntiAliasing; // 0x114(0x01)
	enum class ECompositingSampleCount MSAASampleCount; // 0x115(0x01)
	enum class ELightUnits DefaultLightUnits; // 0x116(0x01)
	enum class EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat; // 0x117(0x01)
	char bRenderUnbuiltPreviewShadowsInGame : 1; // 0x118(0x01)
	char bStencilForLODDither : 1; // 0x118(0x01)
	char pad_118_2 : 6; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	enum class EEarlyZPass EarlyZPass; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	char bEarlyZPassOnlyMaterialMasking : 1; // 0x120(0x01)
	char bEnableCSMCaching : 1; // 0x120(0x01)
	char bDBuffer : 1; // 0x120(0x01)
	char pad_120_3 : 5; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	enum class EClearSceneOptions ClearSceneMethod; // 0x124(0x01)
	enum class EVelocityOutputPass VelocityPass; // 0x125(0x01)
	enum class EVertexDeformationOutputsVelocity VertexDeformationOutputsVelocity; // 0x126(0x01)
	char pad_127[0x1]; // 0x127(0x01)
	char bSelectiveBasePassOutputs : 1; // 0x128(0x01)
	char bDefaultParticleCutouts : 1; // 0x128(0x01)
	char pad_128_2 : 6; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	int32_t GPUSimulationTextureSizeX; // 0x12c(0x04)
	int32_t GPUSimulationTextureSizeY; // 0x130(0x04)
	char bGlobalClipPlane : 1; // 0x134(0x01)
	char pad_134_1 : 7; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
	enum class EGBufferFormat GBufferFormat; // 0x138(0x01)
	char pad_139[0x3]; // 0x139(0x03)
	char bUseGPUMorphTargets : 1; // 0x13c(0x01)
	char bNvidiaAftermathEnabled : 1; // 0x13c(0x01)
	char bMultiView : 1; // 0x13c(0x01)
	char bMobilePostProcessing : 1; // 0x13c(0x01)
	char bMobileMultiView : 1; // 0x13c(0x01)
	char bMobileUseHWsRGBEncoding : 1; // 0x13c(0x01)
	char bRoundRobinOcclusion : 1; // 0x13c(0x01)
	char bODSCapture : 1; // 0x13c(0x01)
	char bMeshStreaming : 1; // 0x13d(0x01)
	char pad_13D_1 : 7; // 0x13d(0x01)
	char pad_13E[0x2]; // 0x13e(0x02)
	float WireframeCullThreshold; // 0x140(0x04)
	char bSupportStationarySkylight : 1; // 0x144(0x01)
	char bSupportLowQualityLightmaps : 1; // 0x144(0x01)
	char bSupportPointLightWholeSceneShadows : 1; // 0x144(0x01)
	char bSupportSkyAtmosphere : 1; // 0x144(0x01)
	char bSupportSkyAtmosphereAffectsHeightFog : 1; // 0x144(0x01)
	char bSupportCloudShadowOnForwardLitTranslucent : 1; // 0x144(0x01)
	char pad_144_6 : 2; // 0x144(0x01)
	char pad_145[0x7]; // 0x145(0x07)
	char bMaterialRoughDiffuse : 1; // 0x14c(0x01)
	char bMaterialEnergyConservation : 1; // 0x14c(0x01)
	char bSupportSkinCacheShaders : 1; // 0x14c(0x01)
	char pad_14C_3 : 5; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	enum class ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0x150(0x01)
	char pad_151[0x3]; // 0x151(0x03)
	float SkinCacheSceneMemoryLimitInMB; // 0x154(0x04)
	char bMobileEnableStaticAndCSMShadowReceivers : 1; // 0x158(0x01)
	char bMobileEnableMovableLightCSMShaderCulling : 1; // 0x158(0x01)
	char bMobileEnableNoPrecomputedLightingCSMShader : 1; // 0x158(0x01)
	char bMobileAllowDistanceFieldShadows : 1; // 0x158(0x01)
	char bMobileAllowMovableDirectionalLights : 1; // 0x158(0x01)
	char pad_158_5 : 3; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	uint32_t MobileNumDynamicPointLights; // 0x15c(0x04)
	char bMobileAllowMovableSpotlights : 1; // 0x160(0x01)
	char bMobileAllowMovableSpotlightShadows : 1; // 0x160(0x01)
	char bSupport16BitBoneIndex : 1; // 0x160(0x01)
	char bGPUSkinLimit2BoneInfluences : 1; // 0x160(0x01)
	char bSupportDepthOnlyIndexBuffers : 1; // 0x160(0x01)
	char bSupportReversedIndexBuffers : 1; // 0x160(0x01)
	char bMobileAmbientOcclusion : 1; // 0x160(0x01)
	char bUseUnlimitedBoneInfluences : 1; // 0x160(0x01)
	char pad_161[0x3]; // 0x161(0x03)
	int32_t UnlimitedBonInfluencesThreshold; // 0x164(0x04)
	struct FPerPlatformInt MaxSkinBones; // 0x168(0x04)
	enum class EMobilePlanarReflectionMode MobilePlanarReflectionMode; // 0x16c(0x01)
	char pad_16D[0x3]; // 0x16d(0x03)
	char bMobileSupportsGen4TAA : 1; // 0x170(0x01)
	char pad_170_1 : 7; // 0x170(0x01)
	char pad_171[0x3]; // 0x171(0x03)
	struct FPerPlatformBool bStreamSkeletalMeshLODs; // 0x174(0x01)
	struct FPerPlatformBool bDiscardSkeletalMeshOptionalLODs; // 0x175(0x01)
	char pad_176[0x2]; // 0x176(0x02)
	struct FSoftObjectPath VisualizeCalibrationColorMaterialPath; // 0x178(0x18)
	struct FSoftObjectPath VisualizeCalibrationCustomMaterialPath; // 0x190(0x18)
	struct FSoftObjectPath VisualizeCalibrationGrayscaleMaterialPath; // 0x1a8(0x18)
};

// Class Engine.RendererOverrideSettings
// Size: 0x40 (Inherited: 0x38)
struct URendererOverrideSettings : UDeveloperSettings {
	char bSupportAllShaderPermutations : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ReplayNetConnection
// Size: 0x3b40 (Inherited: 0x3240)
struct UReplayNetConnection : UNetConnection {
	char pad_3240[0x900]; // 0x3240(0x900)
};

// Class Engine.ReplaySubsystem
// Size: 0x40 (Inherited: 0x30)
struct UReplaySubsystem : UGameInstanceSubsystem {
	bool bLoadDefaultMapOnStop; // 0x30(0x01)
	char pad_31[0xf]; // 0x31(0x0f)

	void RequestCheckpoint(); // Function Engine.ReplaySubsystem.RequestCheckpoint // (Final|Native|Public|BlueprintCallable) // @ game+0x4b87fc0
	bool IsRecording(); // Function Engine.ReplaySubsystem.IsRecording // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b87f90
	bool IsPlaying(); // Function Engine.ReplaySubsystem.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b87f60
	float GetReplayCurrentTime(); // Function Engine.ReplaySubsystem.GetReplayCurrentTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b87f30
	struct FString GetActiveReplayName(); // Function Engine.ReplaySubsystem.GetActiveReplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b87eb0
};

// Class Engine.ReporterBase
// Size: 0x30 (Inherited: 0x28)
struct UReporterBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ReporterGraph
// Size: 0xc8 (Inherited: 0x30)
struct UReporterGraph : UReporterBase {
	char pad_30[0x98]; // 0x30(0x98)
};

// Class Engine.ReverbEffect
// Size: 0x60 (Inherited: 0x28)
struct UReverbEffect : UObject {
	bool bBypassEarlyReflections; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float ReflectionsDelay; // 0x2c(0x04)
	float GainHF; // 0x30(0x04)
	float ReflectionsGain; // 0x34(0x04)
	bool bBypassLateReflections; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float LateDelay; // 0x3c(0x04)
	float DecayTime; // 0x40(0x04)
	float Density; // 0x44(0x04)
	float Diffusion; // 0x48(0x04)
	float AirAbsorptionGainHF; // 0x4c(0x04)
	float DecayHFRatio; // 0x50(0x04)
	float LateGain; // 0x54(0x04)
	float Gain; // 0x58(0x04)
	float RoomRolloffFactor; // 0x5c(0x04)
};

// Class Engine.Rig
// Size: 0x50 (Inherited: 0x28)
struct URig : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FTransformBase> TransformBases; // 0x30(0x10)
	struct TArray<struct FNode> Nodes; // 0x40(0x10)
};

// Class Engine.RotatingMovementComponent
// Size: 0x150 (Inherited: 0x118)
struct URotatingMovementComponent : UMovementComponent {
	struct FRotator RotationRate; // 0x118(0x18)
	struct FVector PivotTranslation; // 0x130(0x18)
	char bRotationInLocalSpace : 1; // 0x148(0x01)
	char pad_148_1 : 7; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
};

// Class Engine.RPCDoSDetectionConfig
// Size: 0x78 (Inherited: 0x28)
struct URPCDoSDetectionConfig : UObject {
	bool bRPCDoSDetection; // 0x28(0x01)
	bool bRPCDoSAnalytics; // 0x29(0x01)
	char pad_2A[0x2]; // 0x2a(0x02)
	int32_t HitchTimeQuotaMS; // 0x2c(0x04)
	int32_t HitchSuspendDetectionTimeMS; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FString> DetectionSeverity; // 0x38(0x10)
	int32_t InitialConnectToleranceMS; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct FName> RPCBlockWhitelist; // 0x50(0x10)
	struct TArray<struct FRPCAnalyticsThreshold> RPCAnalyticsThresholds; // 0x60(0x10)
	double RPCAnalyticsOverrideChance; // 0x70(0x08)
};

// Class Engine.RuntimeVirtualTexture
// Size: 0xe0 (Inherited: 0x28)
struct URuntimeVirtualTexture : UObject {
	int32_t TileCount; // 0x28(0x04)
	int32_t TileSize; // 0x2c(0x04)
	int32_t TileBorderSize; // 0x30(0x04)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x34(0x01)
	bool bCompressTextures; // 0x35(0x01)
	bool bUseLowQualityCompression; // 0x36(0x01)
	bool bClearTextures; // 0x37(0x01)
	bool bSinglePhysicalSpace; // 0x38(0x01)
	bool bPrivateSpace; // 0x39(0x01)
	bool bAdaptive; // 0x3a(0x01)
	bool bContinuousUpdate; // 0x3b(0x01)
	int32_t RemoveLowMips; // 0x3c(0x04)
	enum class TextureGroup LODGroup; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int32_t Size; // 0x44(0x04)
	struct URuntimeVirtualTextureStreamingProxy* StreamingTexture; // 0x48(0x08)
	char pad_50[0x90]; // 0x50(0x90)

	int32_t GetTileSize(); // Function Engine.RuntimeVirtualTexture.GetTileSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8af00
	int32_t GetTileCount(); // Function Engine.RuntimeVirtualTexture.GetTileCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8aea0
	int32_t GetTileBorderSize(); // Function Engine.RuntimeVirtualTexture.GetTileBorderSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8ae60
	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8add0
	int32_t GetPageTableSize(); // Function Engine.RuntimeVirtualTexture.GetPageTableSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b8ada0
};

// Class Engine.RuntimeVirtualTextureComponent
// Size: 0x330 (Inherited: 0x2b0)
struct URuntimeVirtualTextureComponent : USceneComponent {
	struct TSoftObjectPtr<AActor> BoundsAlignActor; // 0x2b0(0x28)
	bool bSetBoundsButton; // 0x2d8(0x01)
	bool bSnapBoundsToLandscape; // 0x2d9(0x01)
	char pad_2DA[0x6]; // 0x2da(0x06)
	struct URuntimeVirtualTexture* VirtualTexture; // 0x2e0(0x08)
	bool bEnableScalability; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	uint32_t ScalabilityGroup; // 0x2ec(0x04)
	bool bHidePrimitives; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct UVirtualTextureBuilder* StreamingTexture; // 0x2f8(0x08)
	int32_t StreamLowMips; // 0x300(0x04)
	bool bBuildStreamingMipsButton; // 0x304(0x01)
	bool bUseStreamingLowMipsInEditor; // 0x305(0x01)
	bool bEnableCompressCrunch; // 0x306(0x01)
	bool bBuildDebugStreamingMips; // 0x307(0x01)
	char pad_308[0x28]; // 0x308(0x28)

	void Invalidate(struct FBoxSphereBounds& WorldBounds); // Function Engine.RuntimeVirtualTextureComponent.Invalidate // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4b8af50
};

// Class Engine.RuntimeVirtualTextureVolume
// Size: 0x280 (Inherited: 0x278)
struct ARuntimeVirtualTextureVolume : AActor {
	struct URuntimeVirtualTextureComponent* VirtualTextureComponent; // 0x278(0x08)
};

// Class Engine.RVOAvoidanceInterface
// Size: 0x28 (Inherited: 0x28)
struct URVOAvoidanceInterface : UInterface {
};

// Class Engine.Scene
// Size: 0x28 (Inherited: 0x28)
struct UScene : UObject {
};

// Class Engine.SceneCapture2D
// Size: 0x290 (Inherited: 0x288)
struct ASceneCapture2D : ASceneCapture {
	struct USceneCaptureComponent2D* CaptureComponent2D; // 0x288(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCapture2D.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x4b68e10
};

// Class Engine.SceneCaptureComponent2D
// Size: 0xb40 (Inherited: 0x370)
struct USceneCaptureComponent2D : USceneCaptureComponent {
	enum class ECameraProjectionMode ProjectionType; // 0x368(0x01)
	float FOVAngle; // 0x36c(0x04)
	float OrthoWidth; // 0x370(0x04)
	struct UTextureRenderTarget2D* TextureTarget; // 0x378(0x08)
	enum class ESceneCaptureCompositeMode CompositeMode; // 0x380(0x01)
	char pad_382[0xe]; // 0x382(0x0e)
	struct FPostProcessSettings PostProcessSettings; // 0x390(0x6c0)
	float PostProcessBlendWeight; // 0xa50(0x04)
	char bOverride_CustomNearClippingPlane : 1; // 0xa54(0x01)
	char pad_A54_1 : 7; // 0xa54(0x01)
	char pad_A55[0x3]; // 0xa55(0x03)
	float CustomNearClippingPlane; // 0xa58(0x04)
	bool bUseCustomProjectionMatrix; // 0xa5c(0x01)
	char pad_A5D[0x3]; // 0xa5d(0x03)
	struct FMatrix CustomProjectionMatrix; // 0xa60(0x80)
	bool bUseFauxOrthoViewPos; // 0xae0(0x01)
	bool bEnableOrthographicTiling; // 0xae1(0x01)
	char pad_AE2[0x2]; // 0xae2(0x02)
	int32_t NumXTiles; // 0xae4(0x04)
	int32_t NumYTiles; // 0xae8(0x04)
	bool bEnableClipPlane; // 0xaec(0x01)
	char pad_AED[0x3]; // 0xaed(0x03)
	struct FVector ClipPlaneBase; // 0xaf0(0x18)
	struct FVector ClipPlaneNormal; // 0xb08(0x18)
	char bCameraCutThisFrame : 1; // 0xb20(0x01)
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0xb20(0x01)
	char pad_B20_2 : 6; // 0xb20(0x01)
	char pad_B21[0x3]; // 0xb21(0x03)
	bool bDisableFlipCopyGLES; // 0xb24(0x01)
	char pad_B25[0x1b]; // 0xb25(0x1b)

	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.SceneCaptureComponent2D.RemoveBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x4b92c80
	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x4b8f5b0
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x4b8f450
};

// Class Engine.SceneCaptureComponentCube
// Size: 0x3a0 (Inherited: 0x370)
struct USceneCaptureComponentCube : USceneCaptureComponent {
	struct UTextureRenderTargetCube* TextureTarget; // 0x368(0x08)
	bool bCaptureRotation; // 0x370(0x01)
	struct UTextureRenderTargetCube* TextureTargetLeft; // 0x378(0x08)
	struct UTextureRenderTargetCube* TextureTargetRight; // 0x380(0x08)
	struct UTextureRenderTarget2D* TextureTargetODS; // 0x388(0x08)
	float IPD; // 0x390(0x04)
	char pad_395[0xb]; // 0x395(0x0b)

	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x4b8f5b0
};

// Class Engine.SceneCaptureCube
// Size: 0x290 (Inherited: 0x288)
struct ASceneCaptureCube : ASceneCapture {
	struct USceneCaptureComponentCube* CaptureComponentCube; // 0x288(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x4b68e10
};

// Class Engine.SCS_Node
// Size: 0xd8 (Inherited: 0x28)
struct USCS_Node : UObject {
	ClassPtrProperty ComponentClass; // 0x28(0x08)
	struct UActorComponent* ComponentTemplate; // 0x30(0x08)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x38(0x48)
	struct FName AttachToName; // 0x80(0x08)
	struct FName ParentComponentOrVariableName; // 0x88(0x08)
	struct FName ParentComponentOwnerClassName; // 0x90(0x08)
	bool bIsParentComponentNative; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct TArray<struct USCS_Node*> ChildNodes; // 0xa0(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xb0(0x10)
	struct FGuid VariableGuid; // 0xc0(0x10)
	struct FName InternalVariableName; // 0xd0(0x08)
};

// Class Engine.ServerStatReplicator
// Size: 0x340 (Inherited: 0x278)
struct AServerStatReplicator : AInfo {
	bool bUpdateStatNet; // 0x278(0x01)
	bool bOverwriteClientStats; // 0x279(0x01)
	char pad_27A[0x2]; // 0x27a(0x02)
	uint32_t Channels; // 0x27c(0x04)
	uint32_t InRate; // 0x280(0x04)
	uint32_t OutRate; // 0x284(0x04)
	char pad_288[0x4]; // 0x288(0x04)
	uint32_t MaxPacketOverhead; // 0x28c(0x04)
	uint32_t InRateClientMax; // 0x290(0x04)
	uint32_t InRateClientMin; // 0x294(0x04)
	uint32_t InRateClientAvg; // 0x298(0x04)
	uint32_t InPacketsClientMax; // 0x29c(0x04)
	uint32_t InPacketsClientMin; // 0x2a0(0x04)
	uint32_t InPacketsClientAvg; // 0x2a4(0x04)
	uint32_t OutRateClientMax; // 0x2a8(0x04)
	uint32_t OutRateClientMin; // 0x2ac(0x04)
	uint32_t OutRateClientAvg; // 0x2b0(0x04)
	uint32_t OutPacketsClientMax; // 0x2b4(0x04)
	uint32_t OutPacketsClientMin; // 0x2b8(0x04)
	uint32_t OutPacketsClientAvg; // 0x2bc(0x04)
	uint32_t NetNumClients; // 0x2c0(0x04)
	uint32_t InPackets; // 0x2c4(0x04)
	uint32_t OutPackets; // 0x2c8(0x04)
	uint32_t InBunches; // 0x2cc(0x04)
	uint32_t OutBunches; // 0x2d0(0x04)
	uint32_t OutLoss; // 0x2d4(0x04)
	uint32_t InLoss; // 0x2d8(0x04)
	uint32_t VoiceBytesSent; // 0x2dc(0x04)
	uint32_t VoiceBytesRecv; // 0x2e0(0x04)
	uint32_t VoicePacketsSent; // 0x2e4(0x04)
	uint32_t VoicePacketsRecv; // 0x2e8(0x04)
	uint32_t PercentInVoice; // 0x2ec(0x04)
	uint32_t PercentOutVoice; // 0x2f0(0x04)
	uint32_t NumActorChannels; // 0x2f4(0x04)
	uint32_t NumConsideredActors; // 0x2f8(0x04)
	uint32_t PrioritizedActors; // 0x2fc(0x04)
	uint32_t NumRelevantActors; // 0x300(0x04)
	uint32_t NumRelevantDeletedActors; // 0x304(0x04)
	uint32_t NumReplicatedActorAttempts; // 0x308(0x04)
	uint32_t NumReplicatedActors; // 0x30c(0x04)
	uint32_t NumActors; // 0x310(0x04)
	uint32_t NumNetActors; // 0x314(0x04)
	uint32_t NumDormantActors; // 0x318(0x04)
	uint32_t NumInitiallyDormantActors; // 0x31c(0x04)
	uint32_t NumNetGUIDsAckd; // 0x320(0x04)
	uint32_t NumNetGUIDsPending; // 0x324(0x04)
	uint32_t NumNetGUIDsUnAckd; // 0x328(0x04)
	uint32_t ObjPathBytes; // 0x32c(0x04)
	uint32_t NetGUIDOutRate; // 0x330(0x04)
	uint32_t NetGUIDInRate; // 0x334(0x04)
	uint32_t NetSaturated; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
};

// Class Engine.ShadowMapTexture2D
// Size: 0x2b0 (Inherited: 0x2b0)
struct UShadowMapTexture2D : UTexture2D {
	enum class EShadowMapFlags ShadowmapFlags; // 0x2a8(0x01)
};

// Class Engine.SimpleConstructionScript
// Size: 0xa0 (Inherited: 0x28)
struct USimpleConstructionScript : UObject {
	struct TArray<struct USCS_Node*> RootNodes; // 0x28(0x10)
	struct TArray<struct USCS_Node*> AllNodes; // 0x38(0x10)
	struct USCS_Node* DefaultSceneRootNode; // 0x48(0x08)
	char pad_50[0x50]; // 0x50(0x50)
};

// Class Engine.SkeletalMesh
// Size: 0x470 (Inherited: 0xd0)
struct USkeletalMesh : UStreamableRenderAsset {
	char pad_D0[0x28]; // 0xd0(0x28)
	struct USkeleton* Skeleton; // 0xf8(0x08)
	struct FBoxSphereBounds ImportedBounds; // 0x100(0x38)
	struct FBoxSphereBounds ExtendedBounds; // 0x138(0x38)
	struct FVector PositiveBoundsExtension; // 0x170(0x18)
	struct FVector NegativeBoundsExtension; // 0x188(0x18)
	struct TArray<struct FSkeletalMaterial> Materials; // 0x1a0(0x10)
	struct TArray<struct FBoneMirrorInfo> SkelMirrorTable; // 0x1b0(0x10)
	struct TArray<struct FSkeletalMeshLODInfo> LODInfo; // 0x1c0(0x10)
	char pad_1D0[0x50]; // 0x1d0(0x50)
	struct FPerPlatformInt MinLOD; // 0x220(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x224(0x01)
	enum class EAxis SkelMirrorAxis; // 0x225(0x01)
	enum class EAxis SkelMirrorFlipAxis; // 0x226(0x01)
	char bUseFullPrecisionUVs : 1; // 0x227(0x01)
	char bUseHighPrecisionTangentBasis : 1; // 0x227(0x01)
	char bHasBeenSimplified : 1; // 0x227(0x01)
	char bHasVertexColors : 1; // 0x227(0x01)
	char pad_227_4 : 1; // 0x227(0x01)
	char bEnablePerPolyCollision : 1; // 0x227(0x01)
	char pad_227_6 : 2; // 0x227(0x01)
	struct UBodySetup* BodySetup; // 0x228(0x08)
	struct UPhysicsAsset* PhysicsAsset; // 0x230(0x08)
	struct UPhysicsAsset* ShadowPhysicsAsset; // 0x238(0x08)
	struct TArray<struct UNodeMappingContainer*> NodeMappingData; // 0x240(0x10)
	char bSupportRayTracing : 1; // 0x250(0x01)
	char pad_250_1 : 7; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	int32_t RayTracingMinLOD; // 0x254(0x04)
	enum class EClothLODBiasMode ClothLODBiasMode; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct TArray<struct UMorphTarget*> MorphTargets; // 0x260(0x10)
	char pad_270[0x178]; // 0x270(0x178)
	struct UAnimInstance* PostProcessAnimBlueprint; // 0x3e8(0x08)
	struct TArray<struct UClothingAssetBase*> MeshClothingAssets; // 0x3f0(0x10)
	struct FSkeletalMeshSamplingInfo SamplingInfo; // 0x400(0x30)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x430(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x440(0x10)
	char pad_450[0x10]; // 0x450(0x10)
	struct TArray<struct FSkinWeightProfileInfo> SkinWeightProfiles; // 0x460(0x10)

	void SetSkeleton(struct USkeleton* InSkeleton); // Function Engine.SkeletalMesh.SetSkeleton // (Final|Native|Public|BlueprintCallable) // @ game+0x4b97500
	void SetMorphTargets(struct TArray<struct UMorphTarget*>& InMorphTargets); // Function Engine.SkeletalMesh.SetMorphTargets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b97410
	void SetMeshClothingAssets(struct TArray<struct UClothingAssetBase*>& InMeshClothingAssets); // Function Engine.SkeletalMesh.SetMeshClothingAssets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b97320
	void SetMaterials(struct TArray<struct FSkeletalMaterial>& InMaterials); // Function Engine.SkeletalMesh.SetMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4b97270
	void SetLODSettings(struct USkeletalMeshLODSettings* InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x1fb5370
	void SetDefaultAnimatingRig(struct TSoftObjectPtr<UObject> InAnimatingRig); // Function Engine.SkeletalMesh.SetDefaultAnimatingRig // (Final|Native|Public|BlueprintCallable) // @ game+0x4b97130
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b97100
	struct TArray<struct FString> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b97020
	bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96f50
	struct USkeletalMeshSocket* GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96eb0
	struct USkeleton* GetSkeleton(); // Function Engine.SkeletalMesh.GetSkeleton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1cd2270
	struct UPhysicsAsset* GetShadowPhysicsAsset(); // Function Engine.SkeletalMesh.GetShadowPhysicsAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96e90
	struct UPhysicsAsset* GetPhysicsAsset(); // Function Engine.SkeletalMesh.GetPhysicsAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96e70
	struct TArray<struct UNodeMappingContainer*> GetNodeMappingData(); // Function Engine.SkeletalMesh.GetNodeMappingData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96de0
	struct UNodeMappingContainer* GetNodeMappingContainer(struct UBlueprint* SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96d40
	struct TArray<struct UMorphTarget*> GetMorphTargets(); // Function Engine.SkeletalMesh.GetMorphTargets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96cb0
	struct TArray<struct UClothingAssetBase*> GetMeshClothingAssets(); // Function Engine.SkeletalMesh.GetMeshClothingAssets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96c20
	struct TArray<struct FSkeletalMaterial> GetMaterials(); // Function Engine.SkeletalMesh.GetMaterials // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96bf0
	struct USkeletalMeshLODSettings* GetLODSettings(); // Function Engine.SkeletalMesh.GetLODSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4adcf70
	struct FBoxSphereBounds GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96ba0
	struct TSoftObjectPtr<UObject> GetDefaultAnimatingRig(); // Function Engine.SkeletalMesh.GetDefaultAnimatingRig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96b40
	struct FBoxSphereBounds GetBounds(); // Function Engine.SkeletalMesh.GetBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96af0
	struct USkeletalMeshSocket* FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b968f0
	struct USkeletalMeshSocket* FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96810
	struct USkeletalMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4b96770
};

// Class Engine.SkeletalMeshActor
// Size: 0x2f8 (Inherited: 0x278)
struct ASkeletalMeshActor : AActor {
	char bShouldDoAnimNotifies : 1; // 0x278(0x01)
	char bWakeOnLevelStart : 1; // 0x278(0x01)
	char pad_278_2 : 6; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x280(0x08)
	struct USkeletalMesh* ReplicatedMesh; // 0x288(0x08)
	struct UPhysicsAsset* ReplicatedPhysAsset; // 0x290(0x08)
	struct UMaterialInterface* ReplicatedMaterial0; // 0x298(0x08)
	struct UMaterialInterface* ReplicatedMaterial1; // 0x2a0(0x08)
	char pad_2A8[0x50]; // 0x2a8(0x50)

	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset // (Native|Public) // @ game+0x106d600
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh // (Native|Public) // @ game+0x2281e40
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1 // (Native|Public) // @ game+0xae5290
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0 // (Native|Public) // @ game+0x4b4a250
};

// Class Engine.SkeletalMeshEditorData
// Size: 0x28 (Inherited: 0x28)
struct USkeletalMeshEditorData : UObject {
};

// Class Engine.SkeletalMeshLODSettings
// Size: 0x50 (Inherited: 0x30)
struct USkeletalMeshLODSettings : UDataAsset {
	struct FPerPlatformInt MinLOD; // 0x30(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x34(0x01)
	bool bOverrideLODStreamingSettings; // 0x35(0x01)
	struct FPerPlatformBool bSupportLODStreaming; // 0x36(0x01)
	char pad_37[0x1]; // 0x37(0x01)
	struct FPerPlatformInt MaxNumStreamedLODs; // 0x38(0x04)
	struct FPerPlatformInt MaxNumOptionalLODs; // 0x3c(0x04)
	struct TArray<struct FSkeletalMeshLODGroupSettings> LODGroups; // 0x40(0x10)
};

// Class Engine.SkeletalMeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct USkeletalMeshSimplificationSettings : UDeveloperSettings {
	struct FName SkeletalMeshReductionModuleName; // 0x38(0x08)
};

// Class Engine.SkeletalMeshSocket
// Size: 0x88 (Inherited: 0x28)
struct USkeletalMeshSocket : UObject {
	struct FName SocketName; // 0x28(0x08)
	struct FName BoneName; // 0x30(0x08)
	struct FVector RelativeLocation; // 0x38(0x18)
	struct FRotator RelativeRotation; // 0x50(0x18)
	struct FVector RelativeScale; // 0x68(0x18)
	bool bForceAlwaysAnimated; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)

	void InitializeSocketFromLocation(struct USkeletalMeshComponent* SkelComp, struct FVector WorldLocation, struct FVector WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba25e0
	struct FVector GetSocketLocation(struct USkeletalMeshComponent* SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4ba22c0
};

// Class Engine.SkyAtmosphere
// Size: 0x280 (Inherited: 0x278)
struct ASkyAtmosphere : AInfo {
	struct USkyAtmosphereComponent* SkyAtmosphereComponent; // 0x278(0x08)
};

// Class Engine.SkyLightComponent
// Size: 0x4c0 (Inherited: 0x2f0)
struct USkyLightComponent : ULightComponentBase {
	bool bRealTimeCapture; // 0x2e8(0x01)
	enum class ESkyLightSourceType SourceType; // 0x2e9(0x01)
	struct UTextureCube* Cubemap; // 0x2f0(0x08)
	float SourceCubemapAngle; // 0x2f8(0x04)
	int32_t CubemapResolution; // 0x2fc(0x04)
	float SkyDistanceThreshold; // 0x300(0x04)
	bool bCaptureEmissiveOnly; // 0x304(0x01)
	bool bLowerHemisphereIsBlack; // 0x305(0x01)
	struct FLinearColor LowerHemisphereColor; // 0x308(0x10)
	float OcclusionMaxDistance; // 0x318(0x04)
	float Contrast; // 0x31c(0x04)
	float OcclusionExponent; // 0x320(0x04)
	float MinOcclusion; // 0x324(0x04)
	struct FColor OcclusionTint; // 0x328(0x04)
	char bCloudAmbientOcclusion : 1; // 0x32c(0x01)
	char pad_32C_1 : 7; // 0x32c(0x01)
	char pad_32D[0x3]; // 0x32d(0x03)
	float CloudAmbientOcclusionStrength; // 0x330(0x04)
	float CloudAmbientOcclusionExtent; // 0x334(0x04)
	float CloudAmbientOcclusionMapResolutionScale; // 0x338(0x04)
	float CloudAmbientOcclusionApertureScale; // 0x33c(0x04)
	enum class EOcclusionCombineMode OcclusionCombineMode; // 0x340(0x01)
	char pad_341[0xa7]; // 0x341(0xa7)
	struct UTextureCube* BlendDestinationCubemap; // 0x3e8(0x08)
	char pad_3F0[0xd0]; // 0x3f0(0xd0)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba75f0
	void SetOcclusionTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ba72b0
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba7230
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba71b0
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba70b0
	void SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4ba6d80
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.SkyLightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4ba6cf0
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba6c70
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba6bf0
	void SetCubemapBlend(struct UTextureCube* SourceCubemap, struct UTextureCube* DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba6a50
	void SetCubemap(struct UTextureCube* NewCubemap); // Function Engine.SkyLightComponent.SetCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba69c0
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky // (Final|Native|Public|BlueprintCallable) // @ game+0x4ba68a0
};

// Class Engine.SlateBrushAsset
// Size: 0x100 (Inherited: 0x28)
struct USlateBrushAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FSlateBrush Brush; // 0x30(0xd0)
};

// Class Engine.SlateTextureAtlasInterface
// Size: 0x28 (Inherited: 0x28)
struct USlateTextureAtlasInterface : UInterface {
};

// Class Engine.SMInstanceElementAssetDataInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementAssetDataInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceElementHierarchyInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementHierarchyInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceElementIdMapTransactor
// Size: 0x28 (Inherited: 0x28)
struct USMInstanceElementIdMapTransactor : UObject {
};

// Class Engine.SMInstanceElementSelectionInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementSelectionInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceElementWorldInterface
// Size: 0x30 (Inherited: 0x28)
struct USMInstanceElementWorldInterface : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.SMInstanceManager
// Size: 0x28 (Inherited: 0x28)
struct USMInstanceManager : UInterface {
};

// Class Engine.SMInstanceManagerProvider
// Size: 0x28 (Inherited: 0x28)
struct USMInstanceManagerProvider : UInterface {
};

// Class Engine.SmokeTestCommandlet
// Size: 0x80 (Inherited: 0x80)
struct USmokeTestCommandlet : UCommandlet {
};

// Class Engine.SoundAttenuation
// Size: 0x3f0 (Inherited: 0x28)
struct USoundAttenuation : UObject {
	struct FSoundAttenuationSettings Attenuation; // 0x28(0x3c8)
};

// Class Engine.SoundClass
// Size: 0xc8 (Inherited: 0x28)
struct USoundClass : UObject {
	struct FSoundClassProperties Properties; // 0x28(0x78)
	struct TArray<struct USoundClass*> ChildClasses; // 0xa0(0x10)
	struct TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0xb0(0x10)
	struct USoundClass* ParentClass; // 0xc0(0x08)
};

// Class Engine.SoundConcurrency
// Size: 0x50 (Inherited: 0x28)
struct USoundConcurrency : UObject {
	struct FSoundConcurrencySettings Concurrency; // 0x28(0x28)
};

// Class Engine.SoundCue
// Size: 0x570 (Inherited: 0x170)
struct USoundCue : USoundBase {
	char bPrimeOnLoad : 1; // 0x170(0x01)
	char pad_170_1 : 7; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
	struct USoundNode* FirstNode; // 0x178(0x08)
	float VolumeMultiplier; // 0x180(0x04)
	float PitchMultiplier; // 0x184(0x04)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x188(0x3c8)
	float SubtitlePriority; // 0x550(0x04)
	char pad_554[0x4]; // 0x554(0x04)
	char bOverrideAttenuation : 1; // 0x558(0x01)
	char bExcludeFromRandomNodeBranchCulling : 1; // 0x558(0x01)
	char pad_558_2 : 6; // 0x558(0x01)
	char pad_559[0x3]; // 0x559(0x03)
	int32_t CookedQualityIndex; // 0x55c(0x04)
	char bHasPlayWhenSilent : 1; // 0x560(0x01)
	char pad_560_1 : 7; // 0x560(0x01)
	char pad_561[0xf]; // 0x561(0x0f)
};

// Class Engine.SoundEffectPresetWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct USoundEffectPresetWidgetInterface : UAudioPanelWidgetInterface {

	void OnPropertyChanged(struct USoundEffectPreset* Preset, struct FName PropertyName); // Function Engine.SoundEffectPresetWidgetInterface.OnPropertyChanged // (Event|Public|BlueprintEvent) // @ game+0x2552560
	void OnConstructed(struct USoundEffectPreset* Preset); // Function Engine.SoundEffectPresetWidgetInterface.OnConstructed // (Event|Public|BlueprintEvent) // @ game+0x2552560
	struct USoundEffectPreset* GetClass(); // Function Engine.SoundEffectPresetWidgetInterface.GetClass // (Event|Public|BlueprintEvent) // @ game+0x2552560
};

// Class Engine.SoundEffectSourcePresetChain
// Size: 0x40 (Inherited: 0x28)
struct USoundEffectSourcePresetChain : UObject {
	struct TArray<struct FSourceEffectChainEntry> Chain; // 0x28(0x10)
	char bPlayEffectChainTails : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.SoundGroups
// Size: 0x88 (Inherited: 0x28)
struct USoundGroups : UObject {
	struct TArray<struct FSoundGroup> SoundGroupProfiles; // 0x28(0x10)
	char pad_38[0x50]; // 0x38(0x50)
};

// Class Engine.SoundMix
// Size: 0x90 (Inherited: 0x28)
struct USoundMix : UObject {
	char bApplyEQ : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float EQPriority; // 0x2c(0x04)
	struct FAudioEQEffect EQSettings; // 0x30(0x40)
	struct TArray<struct FSoundClassAdjuster> SoundClassEffects; // 0x70(0x10)
	float InitialDelay; // 0x80(0x04)
	float FadeInTime; // 0x84(0x04)
	float Duration; // 0x88(0x04)
	float FadeOutTime; // 0x8c(0x04)
};

// Class Engine.SoundNode
// Size: 0x48 (Inherited: 0x28)
struct USoundNode : UObject {
	struct TArray<struct USoundNode*> ChildNodes; // 0x28(0x10)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Engine.SoundNodeAssetReferencer
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeAssetReferencer : USoundNode {
};

// Class Engine.SoundNodeAttenuation
// Size: 0x420 (Inherited: 0x48)
struct USoundNodeAttenuation : USoundNode {
	struct USoundAttenuation* AttenuationSettings; // 0x48(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x50(0x3c8)
	char bOverrideAttenuation : 1; // 0x418(0x01)
	char pad_418_1 : 7; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
};

// Class Engine.SoundNodeBranch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeBranch : USoundNode {
	struct FName BoolParameterName; // 0x48(0x08)
};

// Class Engine.SoundNodeConcatenator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeConcatenator : USoundNode {
	struct TArray<float> InputVolume; // 0x48(0x10)
};

// Class Engine.SoundNodeDelay
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeDelay : USoundNode {
	float DelayMin; // 0x48(0x04)
	float DelayMax; // 0x4c(0x04)
};

// Class Engine.SoundNodeDialoguePlayer
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeDialoguePlayer : USoundNode {
	struct FDialogueWaveParameter DialogueWaveParameter; // 0x48(0x20)
	char bLooping : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.SoundNodeDistanceCrossFade
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDistanceCrossFade : USoundNode {
	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x48(0x10)
};

// Class Engine.SoundNodeDoppler
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDoppler : USoundNode {
	float DopplerIntensity; // 0x48(0x04)
	bool bUseSmoothing; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float SmoothingInterpSpeed; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.SoundNodeEnveloper
// Size: 0x190 (Inherited: 0x48)
struct USoundNodeEnveloper : USoundNode {
	float LoopStart; // 0x48(0x04)
	float LoopEnd; // 0x4c(0x04)
	float DurationAfterLoop; // 0x50(0x04)
	int32_t LoopCount; // 0x54(0x04)
	char bLoopIndefinitely : 1; // 0x58(0x01)
	char bLoop : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x60(0x08)
	struct UDistributionFloatConstantCurve* PitchInterpCurve; // 0x68(0x08)
	struct FRuntimeFloatCurve VolumeCurve; // 0x70(0x88)
	struct FRuntimeFloatCurve PitchCurve; // 0xf8(0x88)
	float PitchMin; // 0x180(0x04)
	float PitchMax; // 0x184(0x04)
	float VolumeMin; // 0x188(0x04)
	float VolumeMax; // 0x18c(0x04)
};

// Class Engine.SoundNodeGroupControl
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeGroupControl : USoundNode {
	struct TArray<int32_t> GroupSizes; // 0x48(0x10)
};

// Class Engine.SoundNodeLooping
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeLooping : USoundNode {
	int32_t LoopCount; // 0x48(0x04)
	char bLoopIndefinitely : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.SoundNodeMature
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeMature : USoundNode {
};

// Class Engine.SoundNodeMixer
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeMixer : USoundNode {
	struct TArray<float> InputVolume; // 0x48(0x10)
};

// Class Engine.SoundNodeModulator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeModulator : USoundNode {
	float PitchMin; // 0x48(0x04)
	float PitchMax; // 0x4c(0x04)
	float VolumeMin; // 0x50(0x04)
	float VolumeMax; // 0x54(0x04)
};

// Class Engine.SoundNodeModulatorContinuous
// Size: 0x88 (Inherited: 0x48)
struct USoundNodeModulatorContinuous : USoundNode {
	struct FModulatorContinuousParams PitchModulationParams; // 0x48(0x20)
	struct FModulatorContinuousParams VolumeModulationParams; // 0x68(0x20)
};

// Class Engine.SoundNodeOscillator
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeOscillator : USoundNode {
	char bModulateVolume : 1; // 0x48(0x01)
	char bModulatePitch : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AmplitudeMin; // 0x4c(0x04)
	float AmplitudeMax; // 0x50(0x04)
	float FrequencyMin; // 0x54(0x04)
	float FrequencyMax; // 0x58(0x04)
	float OffsetMin; // 0x5c(0x04)
	float OffsetMax; // 0x60(0x04)
	float CenterMin; // 0x64(0x04)
	float CenterMax; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.SoundNodeParamCrossFade
// Size: 0x60 (Inherited: 0x58)
struct USoundNodeParamCrossFade : USoundNodeDistanceCrossFade {
	struct FName ParamName; // 0x58(0x08)
};

// Class Engine.SoundNodeQualityLevel
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeQualityLevel : USoundNode {
	int32_t CookedQualityLevelIndex; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.SoundNodeRandom
// Size: 0x78 (Inherited: 0x48)
struct USoundNodeRandom : USoundNode {
	struct TArray<float> Weights; // 0x48(0x10)
	struct TArray<bool> HasBeenUsed; // 0x58(0x10)
	int32_t NumRandomUsed; // 0x68(0x04)
	int32_t PreselectAtLevelLoad; // 0x6c(0x04)
	char bShouldExcludeFromBranchCulling : 1; // 0x70(0x01)
	char bSoundCueExcludedFromBranchCulling : 1; // 0x70(0x01)
	char bRandomizeWithoutReplacement : 1; // 0x70(0x01)
	char pad_70_3 : 5; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.SoundNodeSoundClass
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeSoundClass : USoundNode {
	struct USoundClass* SoundClassOverride; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Engine.SoundNodeSwitch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeSwitch : USoundNode {
	struct FName IntParameterName; // 0x48(0x08)
};

// Class Engine.SoundNodeWaveParam
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeWaveParam : USoundNode {
	struct FName WaveParameterName; // 0x48(0x08)
};

// Class Engine.SoundNodeWavePlayer
// Size: 0x88 (Inherited: 0x48)
struct USoundNodeWavePlayer : USoundNodeAssetReferencer {
	struct TSoftObjectPtr<USoundWave> SoundWaveAssetPtr; // 0x48(0x28)
	struct USoundWave* SoundWave; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)
	char bLooping : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.SoundParameterControllerInterface
// Size: 0x28 (Inherited: 0x28)
struct USoundParameterControllerInterface : UAudioParameterControllerInterface {
};

// Class Engine.AudioParameterConversionStatics
// Size: 0x28 (Inherited: 0x28)
struct UAudioParameterConversionStatics : UBlueprintFunctionLibrary {

	struct FAudioParameter StringToAudioParameter(struct FName Name, struct FString String); // Function Engine.AudioParameterConversionStatics.StringToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bad8a0
	struct FAudioParameter StringArrayToAudioParameter(struct FName Name, struct TArray<struct FString> Strings); // Function Engine.AudioParameterConversionStatics.StringArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bad6c0
	struct FAudioParameter ObjectToAudioParameter(struct FName Name, struct UObject* Object); // Function Engine.AudioParameterConversionStatics.ObjectToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bacc00
	struct FAudioParameter ObjectArrayToAudioParameter(struct FName Name, struct TArray<struct UObject*> Objects); // Function Engine.AudioParameterConversionStatics.ObjectArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bacab0
	struct FAudioParameter IntegerToAudioParameter(struct FName Name, int32_t Integer); // Function Engine.AudioParameterConversionStatics.IntegerToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bac9b0
	struct FAudioParameter IntegerArrayToAudioParameter(struct FName Name, struct TArray<int32_t> Integers); // Function Engine.AudioParameterConversionStatics.IntegerArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bac860
	struct FAudioParameter FloatToAudioParameter(struct FName Name, float Float); // Function Engine.AudioParameterConversionStatics.FloatToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bac750
	struct FAudioParameter FloatArrayToAudioParameter(struct FName Name, struct TArray<float> Floats); // Function Engine.AudioParameterConversionStatics.FloatArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bac600
	struct FAudioParameter BooleanToAudioParameter(struct FName Name, bool Bool); // Function Engine.AudioParameterConversionStatics.BooleanToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bac4f0
	struct FAudioParameter BooleanArrayToAudioParameter(struct FName Name, struct TArray<bool> Bools); // Function Engine.AudioParameterConversionStatics.BooleanArrayToAudioParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bac3a0
};

// Class Engine.SoundSourceBus
// Size: 0x350 (Inherited: 0x338)
struct USoundSourceBus : USoundWave {
	enum class ESourceBusChannels SourceBusChannels; // 0x338(0x01)
	char pad_339[0x3]; // 0x339(0x03)
	float SourceBusDuration; // 0x33c(0x04)
	struct UAudioBus* AudioBus; // 0x340(0x08)
	char bAutoDeactivateWhenSilent : 1; // 0x348(0x01)
	char pad_348_1 : 7; // 0x348(0x01)
	char pad_349[0x7]; // 0x349(0x07)
};

// Class Engine.SoundSubmixBase
// Size: 0x40 (Inherited: 0x28)
struct USoundSubmixBase : UObject {
	bool bAutoDisable; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float AutoDisableTime; // 0x2c(0x04)
	struct TArray<struct USoundSubmixBase*> ChildSubmixes; // 0x30(0x10)
};

// Class Engine.SoundSubmixWithParentBase
// Size: 0x48 (Inherited: 0x40)
struct USoundSubmixWithParentBase : USoundSubmixBase {
	struct USoundSubmixBase* ParentSubmix; // 0x40(0x08)
};

// Class Engine.SoundSubmix
// Size: 0xd0 (Inherited: 0x48)
struct USoundSubmix : USoundSubmixWithParentBase {
	char bMuteWhenBackgrounded : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<struct USoundEffectSubmixPreset*> SubmixEffectChain; // 0x50(0x10)
	struct USoundfieldEncodingSettingsBase* AmbisonicsPluginSettings; // 0x60(0x08)
	int32_t EnvelopeFollowerAttackTime; // 0x68(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x6c(0x04)
	float OutputVolume; // 0x70(0x04)
	float WetLevel; // 0x74(0x04)
	float DryLevel; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FSoundModulationDestinationSettings OutputVolumeModulation; // 0x80(0x10)
	struct FSoundModulationDestinationSettings WetLevelModulation; // 0x90(0x10)
	struct FSoundModulationDestinationSettings DryLevelModulation; // 0xa0(0x10)
	struct UAudioLinkSettingsAbstract* AudioLinkSettings; // 0xb0(0x08)
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0xb8(0x10)
	char pad_C8[0x8]; // 0xc8(0x08)

	void StopSpectralAnalysis(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopSpectralAnalysis // (Final|Native|Public|BlueprintCallable) // @ game+0x4bad630
	void StopRecordingOutput(struct UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave* ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x4bad430
	void StopEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x4bad3a0
	void StartSpectralAnalysis(struct UObject* WorldContextObject, enum class EFFTSize FFTSize, enum class EFFTPeakInterpolationMethod InterpolationMethod, enum class EFFTWindowType WindowType, float HopSize, enum class EAudioSpectrumType SpectrumType); // Function Engine.SoundSubmix.StartSpectralAnalysis // (Final|Native|Public|BlueprintCallable) // @ game+0x4bad1c0
	void StartRecordingOutput(struct UObject* WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x4bad0f0
	void StartEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x4bad060
	void SetSubmixWetLevel(struct UObject* WorldContextObject, float InWetLevel); // Function Engine.SoundSubmix.SetSubmixWetLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x4bacf90
	void SetSubmixOutputVolume(struct UObject* WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x4bacec0
	void SetSubmixDryLevel(struct UObject* WorldContextObject, float InDryLevel); // Function Engine.SoundSubmix.SetSubmixDryLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x4bacdf0
	void RemoveSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixSpectralAnalysisBP); // Function Engine.SoundSubmix.RemoveSpectralAnalysisDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bacd00
	void AddSpectralAnalysisDelegate(struct UObject* WorldContextObject, struct TArray<struct FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, struct FDelegate& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // Function Engine.SoundSubmix.AddSpectralAnalysisDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bac0a0
	void AddEnvelopeFollowerDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4babfb0
};

// Class Engine.SoundfieldSubmix
// Size: 0x70 (Inherited: 0x48)
struct USoundfieldSubmix : USoundSubmixWithParentBase {
	struct FName SoundfieldEncodingFormat; // 0x48(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x50(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x58(0x10)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x68(0x08)
};

// Class Engine.EndpointSubmix
// Size: 0x58 (Inherited: 0x40)
struct UEndpointSubmix : USoundSubmixBase {
	struct FName EndpointType; // 0x40(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x48(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettings; // 0x50(0x08)
};

// Class Engine.SoundfieldEndpointSubmix
// Size: 0x78 (Inherited: 0x40)
struct USoundfieldEndpointSubmix : USoundSubmixBase {
	struct FName SoundfieldEndpointType; // 0x40(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x48(0x08)
	struct USoundfieldEndpointSettingsBase* EndpointSettings; // 0x50(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x58(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x60(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x68(0x10)
};

// Class Engine.SoundSubmixWidgetInterface
// Size: 0x28 (Inherited: 0x28)
struct USoundSubmixWidgetInterface : UInterface {

	void OnConstructed(struct USoundSubmixBase* SoundSubmix); // Function Engine.SoundSubmixWidgetInterface.OnConstructed // (Event|Public|BlueprintEvent) // @ game+0x2552560
};

// Class Engine.SpectatorPawn
// Size: 0x320 (Inherited: 0x320)
struct ASpectatorPawn : ADefaultPawn {
};

// Class Engine.SpectatorPawnMovement
// Size: 0x180 (Inherited: 0x178)
struct USpectatorPawnMovement : UFloatingPawnMovement {
	char bIgnoreTimeDilation : 1; // 0x178(0x01)
	char pad_178_1 : 7; // 0x178(0x01)
	char pad_179[0x7]; // 0x179(0x07)
};

// Class Engine.SphereReflectionCapture
// Size: 0x288 (Inherited: 0x280)
struct ASphereReflectionCapture : AReflectionCapture {
	struct UDrawSphereComponent* DrawCaptureRadius; // 0x280(0x08)
};

// Class Engine.SphereReflectionCaptureComponent
// Size: 0x340 (Inherited: 0x330)
struct USphereReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadius; // 0x328(0x04)
	float CaptureDistanceScale; // 0x32c(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x330(0x08)
};

// Class Engine.SplineMeshActor
// Size: 0x280 (Inherited: 0x278)
struct ASplineMeshActor : AActor {
	struct USplineMeshComponent* SplineMeshComponent; // 0x278(0x08)
};

// Class Engine.SplineMeshComponent
// Size: 0x6d0 (Inherited: 0x5d0)
struct USplineMeshComponent : UStaticMeshComponent {
	char pad_5D0[0x8]; // 0x5d0(0x08)
	struct FSplineMeshParams SplineParams; // 0x5d8(0xb0)
	struct FVector SplineUpDir; // 0x688(0x18)
	float SplineBoundaryMin; // 0x6a0(0x04)
	struct FGuid CachedMeshBodySetupGuid; // 0x6a4(0x10)
	char pad_6B4[0x4]; // 0x6b4(0x04)
	struct UBodySetup* BodySetup; // 0x6b8(0x08)
	float SplineBoundaryMax; // 0x6c0(0x04)
	char bAllowSplineEditingPerInstance : 1; // 0x6c4(0x01)
	char bSmoothInterpRollScale : 1; // 0x6c4(0x01)
	char bMeshDirty : 1; // 0x6c4(0x01)
	char pad_6C4_3 : 5; // 0x6c4(0x01)
	enum class ESplineMeshAxis ForwardAxis; // 0x6c5(0x01)
	char pad_6C6[0x2]; // 0x6c6(0x02)
	float VirtualTextureMainPassMaxDrawDistance; // 0x6c8(0x04)
	char pad_6CC[0x4]; // 0x6cc(0x04)

	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbb6c0
	void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbb520
	void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbb440
	void SetStartRoll(float StartRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbb360
	void SetStartPosition(struct FVector StartPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbb270
	void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbb190
	void SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbafa0
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bbaec0
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbab40
	void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbaa50
	void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bba970
	void SetEndRoll(float EndRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x4bba890
	void SetEndPosition(struct FVector EndPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bba7a0
	void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bba6c0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin // (Final|Native|Public|BlueprintCallable) // @ game+0x4bba5e0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax // (Final|Native|Public|BlueprintCallable) // @ game+0x4bba500
	struct FVector GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba2b0
	struct FVector2D GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba270
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba240
	struct FVector GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba200
	struct FVector2D GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba1c0
	struct FVector GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba180
	enum class ESplineMeshAxis GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9d90
	struct FVector GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9d50
	struct FVector2D GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9d10
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9ce0
	struct FVector GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9ca0
	struct FVector2D GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9c60
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9b90
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9b60
};

// Class Engine.SpotLightComponent
// Size: 0x430 (Inherited: 0x420)
struct USpotLightComponent : UPointLightComponent {
	float InnerConeAngle; // 0x420(0x04)
	float OuterConeAngle; // 0x424(0x04)
	char pad_428[0x8]; // 0x428(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbae40
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbac90
};

// Class Engine.SpringArmComponent
// Size: 0x3b0 (Inherited: 0x2b0)
struct USpringArmComponent : USceneComponent {
	float TargetArmLength; // 0x2b0(0x04)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct FVector SocketOffset; // 0x2b8(0x18)
	struct FVector TargetOffset; // 0x2d0(0x18)
	float ProbeSize; // 0x2e8(0x04)
	enum class ECollisionChannel ProbeChannel; // 0x2ec(0x01)
	char pad_2ED[0x3]; // 0x2ed(0x03)
	char bDoCollisionTest : 1; // 0x2f0(0x01)
	char bUsePawnControlRotation : 1; // 0x2f0(0x01)
	char bInheritPitch : 1; // 0x2f0(0x01)
	char bInheritYaw : 1; // 0x2f0(0x01)
	char bInheritRoll : 1; // 0x2f0(0x01)
	char bEnableCameraLag : 1; // 0x2f0(0x01)
	char bEnableCameraRotationLag : 1; // 0x2f0(0x01)
	char bUseCameraLagSubstepping : 1; // 0x2f0(0x01)
	char bDrawDebugLagMarkers : 1; // 0x2f1(0x01)
	char pad_2F1_1 : 7; // 0x2f1(0x01)
	char pad_2F2[0x2]; // 0x2f2(0x02)
	float CameraLagSpeed; // 0x2f4(0x04)
	float CameraRotationLagSpeed; // 0x2f8(0x04)
	float CameraLagMaxTimeStep; // 0x2fc(0x04)
	float CameraLagMaxDistance; // 0x300(0x04)
	char bClampToMaxPhysicsDeltaTime : 1; // 0x304(0x01)
	char pad_304_1 : 7; // 0x304(0x01)
	char pad_305[0xab]; // 0x305(0xab)

	bool IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba440
	struct FVector GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba400
	struct FRotator GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba3c0
};

// Class Engine.StaticMesh
// Size: 0x258 (Inherited: 0xd0)
struct UStaticMesh : UStreamableRenderAsset {
	char pad_D0[0x20]; // 0xd0(0x20)
	struct FPerQualityLevelInt MinQualityLevelLOD; // 0xf0(0x68)
	struct FPerPlatformInt MinLOD; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct TArray<struct FStaticMaterial> StaticMaterials; // 0x160(0x10)
	float LightmapUVDensity; // 0x170(0x04)
	int32_t LightMapResolution; // 0x174(0x04)
	int32_t LightMapCoordinateIndex; // 0x178(0x04)
	float DistanceFieldSelfShadowBias; // 0x17c(0x04)
	struct UBodySetup* BodySetup; // 0x180(0x08)
	int32_t LODForCollision; // 0x188(0x04)
	char bGenerateMeshDistanceField : 1; // 0x18c(0x01)
	char bStripComplexCollisionForConsole : 1; // 0x18c(0x01)
	char bHasNavigationData : 1; // 0x18c(0x01)
	char bSupportUniformlyDistributedSampling : 1; // 0x18c(0x01)
	char bSupportPhysicalMaterialMasks : 1; // 0x18c(0x01)
	char bSupportRayTracing : 1; // 0x18c(0x01)
	char bDoFastBuild : 1; // 0x18c(0x01)
	char bIsBuiltAtRuntime : 1; // 0x18c(0x01)
	char pad_18D_0 : 1; // 0x18d(0x01)
	char bAllowCPUAccess : 1; // 0x18d(0x01)
	char bSupportGpuUniformlyDistributedSampling : 1; // 0x18d(0x01)
	char pad_18D_3 : 5; // 0x18d(0x01)
	char pad_18E[0x22]; // 0x18e(0x22)
	struct TArray<struct UStaticMeshSocket*> Sockets; // 0x1b0(0x10)
	char pad_1C0[0x10]; // 0x1c0(0x10)
	struct FVector PositiveBoundsExtension; // 0x1d0(0x18)
	struct FVector NegativeBoundsExtension; // 0x1e8(0x18)
	struct FBoxSphereBounds ExtendedBounds; // 0x200(0x38)
	int32_t ElementToIgnoreForTexFactor; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x240(0x10)
	struct UNavCollisionBase* NavCollision; // 0x250(0x08)

	void SetStaticMaterials(struct TArray<struct FStaticMaterial>& InStaticMaterials); // Function Engine.StaticMesh.SetStaticMaterials // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bbb610
	void SetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.SetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bb9f80
	void SetMinimumLODForPlatform(struct FName& PlatformName, int32_t InMinLOD); // Function Engine.StaticMesh.SetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bbad10
	void RemoveSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.RemoveSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bba470
	struct UStaticMeshDescription* GetStaticMeshDescription(int32_t LODIndex); // Function Engine.StaticMesh.GetStaticMeshDescription // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bba320
	struct TArray<struct FStaticMaterial> GetStaticMaterials(); // Function Engine.StaticMesh.GetStaticMaterials // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba2f0
	int32_t GetNumSections(int32_t InLOD); // Function Engine.StaticMesh.GetNumSections // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba0e0
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bba0b0
	void GetMinimumLODForQualityLevels(struct TMap<struct FName, int32_t>& QualityLevelMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForQualityLevels // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9f80
	int32_t GetMinimumLODForQualityLevel(struct FName& QualityLevel); // Function Engine.StaticMesh.GetMinimumLODForQualityLevel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9f00
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9f80
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9f00
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9e60
	struct UMaterialInterface* GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9dc0
	struct FBoxSphereBounds GetBounds(); // Function Engine.StaticMesh.GetBounds // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9c10
	struct FBox GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9bc0
	struct UStaticMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bb9ac0
	struct UStaticMeshDescription* CreateStaticMeshDescription(struct UObject* Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x4bb9a30
	void BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bb98f0
	void AddSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.AddSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bb9860
	struct FName AddMaterial(struct UMaterialInterface* Material); // Function Engine.StaticMesh.AddMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bb97d0
};

// Class Engine.StaticMeshSocket
// Size: 0x88 (Inherited: 0x28)
struct UStaticMeshSocket : UObject {
	struct FName SocketName; // 0x28(0x08)
	struct FVector RelativeLocation; // 0x30(0x18)
	struct FRotator RelativeRotation; // 0x48(0x18)
	struct FVector RelativeScale; // 0x60(0x18)
	struct FString Tag; // 0x78(0x10)
};

// Class Engine.StaticMeshDescriptionBulkData
// Size: 0x28 (Inherited: 0x28)
struct UStaticMeshDescriptionBulkData : UMeshDescriptionBaseBulkData {
};

// Class Engine.StereoLayerShape
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShape : UObject {
};

// Class Engine.StereoLayerShapeQuad
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeQuad : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeCylinder
// Size: 0x38 (Inherited: 0x28)
struct UStereoLayerShapeCylinder : UStereoLayerShape {
	float Radius; // 0x28(0x04)
	float OverlayArc; // 0x2c(0x04)
	int32_t Height; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	void SetRadius(float InRadius); // Function Engine.StereoLayerShapeCylinder.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe790
	void SetOverlayArc(float InOverlayArc); // Function Engine.StereoLayerShapeCylinder.SetOverlayArc // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe5f0
	void SetHeight(int32_t InHeight); // Function Engine.StereoLayerShapeCylinder.SetHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe450
};

// Class Engine.StereoLayerShapeCubemap
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeCubemap : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeEquirect
// Size: 0xb8 (Inherited: 0x28)
struct UStereoLayerShapeEquirect : UStereoLayerShape {
	struct FBox2D LeftUVRect; // 0x28(0x28)
	struct FBox2D RightUVRect; // 0x50(0x28)
	struct FVector2D LeftScale; // 0x78(0x10)
	struct FVector2D RightScale; // 0x88(0x10)
	struct FVector2D LeftBias; // 0x98(0x10)
	struct FVector2D RightBias; // 0xa8(0x10)

	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerShapeEquirect.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe140
};

// Class Engine.StereoLayerComponent
// Size: 0x440 (Inherited: 0x2b0)
struct UStereoLayerComponent : USceneComponent {
	char bLiveTexture : 1; // 0x2b0(0x01)
	char bSupportsDepth : 1; // 0x2b0(0x01)
	char bNoAlphaChannel : 1; // 0x2b0(0x01)
	char pad_2B0_3 : 5; // 0x2b0(0x01)
	char pad_2B1[0x7]; // 0x2b1(0x07)
	struct UTexture* Texture; // 0x2b8(0x08)
	struct UTexture* LeftTexture; // 0x2c0(0x08)
	char bQuadPreserveTextureRatio : 1; // 0x2c8(0x01)
	char pad_2C8_1 : 7; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct FVector2D QuadSize; // 0x2d0(0x10)
	struct FBox2D UVRect; // 0x2e0(0x28)
	float CylinderRadius; // 0x308(0x04)
	float CylinderOverlayArc; // 0x30c(0x04)
	int32_t CylinderHeight; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)
	struct FEquirectProps EquirectProps; // 0x318(0x90)
	enum class EStereoLayerType StereoLayerType; // 0x3a8(0x01)
	enum class EStereoLayerShape StereoLayerShape; // 0x3a9(0x01)
	char pad_3AA[0x6]; // 0x3aa(0x06)
	struct UStereoLayerShape* Shape; // 0x3b0(0x08)
	int32_t Priority; // 0x3b8(0x04)
	char pad_3BC[0x84]; // 0x3bc(0x84)

	void SetUVRect(struct FBox2D InUVRect); // Function Engine.StereoLayerComponent.SetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbeae0
	void SetTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbea50
	void SetQuadSize(struct FVector2D InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbe700
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe670
	void SetLeftTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe4e0
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbe020
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x4bbdef0
	struct FBox2D GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bbdeb0
	struct UTexture* GetTexture(); // Function Engine.StereoLayerComponent.GetTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bbde90
	struct FVector2D GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bbde60
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bbde40
	struct UTexture* GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22775e0
};

// Class Engine.StereoLayerFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerFunctionLibrary : UBlueprintFunctionLibrary {

	void ShowSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x396c900
	void SetSplashScreen(struct UTexture* Texture, struct FVector2D Scale, struct FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4bbe8a0
	void HideSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.HideSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x396b740
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled); // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4bbdce0
};

// Class Engine.StringTable
// Size: 0x40 (Inherited: 0x28)
struct UStringTable : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Engine.SubsurfaceProfile
// Size: 0xc8 (Inherited: 0x28)
struct USubsurfaceProfile : UObject {
	struct FSubsurfaceProfileStruct Settings; // 0x28(0x9c)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Engine.SubsystemBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USubsystemBlueprintLibrary : UBlueprintFunctionLibrary {

	struct UWorldSubsystem* GetWorldSubsystem(struct UObject* ContextObject, struct UWorldSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bc1140
	struct ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(struct APlayerController* PlayerController, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bc0f20
	struct ULocalPlayerSubsystem* GetLocalPlayerSubsystem(struct UObject* ContextObject, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bc0ff0
	struct UGameInstanceSubsystem* GetGameInstanceSubsystem(struct UObject* ContextObject, struct UGameInstanceSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bc0e50
	struct UEngineSubsystem* GetEngineSubsystem(struct UEngineSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bc0dc0
	struct UAudioEngineSubsystem* GetAudioEngineSubsystem(struct UObject* ContextObject, struct UAudioEngineSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetAudioEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x4bc0cf0
};

// Class Engine.SubUVAnimation
// Size: 0x68 (Inherited: 0x28)
struct USubUVAnimation : UObject {
	struct UTexture2D* SubUVTexture; // 0x28(0x08)
	int32_t SubImages_Horizontal; // 0x30(0x04)
	int32_t SubImages_Vertical; // 0x34(0x04)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0x38(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float AlphaThreshold; // 0x3c(0x04)
	char pad_40[0x28]; // 0x40(0x28)
};

// Class Engine.SystemTimeTimecodeProvider
// Size: 0x40 (Inherited: 0x30)
struct USystemTimeTimecodeProvider : UTimecodeProvider {
	struct FFrameRate FrameRate; // 0x30(0x08)
	bool bGenerateFullFrame; // 0x38(0x01)
	bool bUseHighPerformanceClock; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class Engine.TargetPoint
// Size: 0x278 (Inherited: 0x278)
struct ATargetPoint : AActor {
};

// Class Engine.TextPropertyTestObject
// Size: 0x70 (Inherited: 0x28)
struct UTextPropertyTestObject : UObject {
	struct FText DefaultedText; // 0x28(0x18)
	struct FText UndefaultedText; // 0x40(0x18)
	struct FText TransientText; // 0x58(0x18)
};

// Class Engine.TextRenderActor
// Size: 0x280 (Inherited: 0x278)
struct ATextRenderActor : AActor {
	struct UTextRenderComponent* TextRender; // 0x278(0x08)
};

// Class Engine.TextRenderComponent
// Size: 0x590 (Inherited: 0x540)
struct UTextRenderComponent : UPrimitiveComponent {
	struct FText Text; // 0x540(0x18)
	struct UMaterialInterface* TextMaterial; // 0x558(0x08)
	struct UFont* Font; // 0x560(0x08)
	enum class EHorizTextAligment HorizontalAlignment; // 0x568(0x01)
	enum class EVerticalTextAligment VerticalAlignment; // 0x569(0x01)
	char pad_56A[0x2]; // 0x56a(0x02)
	struct FColor TextRenderColor; // 0x56c(0x04)
	float XScale; // 0x570(0x04)
	float YScale; // 0x574(0x04)
	float WorldSize; // 0x578(0x04)
	float InvDefaultSize; // 0x57c(0x04)
	float HorizSpacingAdjust; // 0x580(0x04)
	float VertSpacingAdjust; // 0x584(0x04)
	char bAlwaysRenderAsText : 1; // 0x588(0x01)
	char pad_588_1 : 7; // 0x588(0x01)
	char pad_589[0x7]; // 0x589(0x07)

	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc1780
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc1700
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc1680
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc1580
	void SetVerticalAlignment(enum class EVerticalTextAligment Value); // Function Engine.TextRenderComponent.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc1600
	void SetTextRenderColor(struct FColor Value); // Function Engine.TextRenderComponent.SetTextRenderColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bc1500
	void SetTextMaterial(struct UMaterialInterface* Material); // Function Engine.TextRenderComponent.SetTextMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc1470
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc1370
	void SetHorizontalAlignment(enum class EHorizTextAligment Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc13f0
	void SetFont(struct UFont* Value); // Function Engine.TextRenderComponent.SetFont // (Final|Native|Public|BlueprintCallable) // @ game+0x4bc12e0
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc1210
	struct FVector GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc1100
	struct FVector GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc10c0
};

// Class Engine.Texture2DArray
// Size: 0x250 (Inherited: 0x1f0)
struct UTexture2DArray : UTexture {
	char pad_1F0[0x58]; // 0x1f0(0x58)
	enum class TextureAddress AddressX; // 0x248(0x01)
	enum class TextureAddress AddressY; // 0x249(0x01)
	enum class TextureAddress AddressZ; // 0x24a(0x01)
	char pad_24B[0x5]; // 0x24b(0x05)
};

// Class Engine.Texture2DDynamic
// Size: 0x210 (Inherited: 0x1f0)
struct UTexture2DDynamic : UTexture {
	char pad_1F0[0x8]; // 0x1f0(0x08)
	enum class EPixelFormat Format; // 0x1f8(0x01)
	char pad_1F9[0x17]; // 0x1f9(0x17)
};

// Class Engine.TextureCubeArray
// Size: 0x250 (Inherited: 0x1f0)
struct UTextureCubeArray : UTexture {
	char pad_1F0[0x60]; // 0x1f0(0x60)
};

// Class Engine.TextureEncodingProjectSettings
// Size: 0x50 (Inherited: 0x38)
struct UTextureEncodingProjectSettings : UDeveloperSettings {
	char bFinalUsesRDO : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int8_t FinalRDOLambda; // 0x3c(0x01)
	enum class ETextureEncodeEffort FinalEffortLevel; // 0x3d(0x01)
	enum class ETextureUniversalTiling FinalUniversalTiling; // 0x3e(0x01)
	char pad_3F[0x1]; // 0x3f(0x01)
	char bFastUsesRDO : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	int8_t FastRDOLambda; // 0x44(0x01)
	enum class ETextureEncodeEffort FastEffortLevel; // 0x45(0x01)
	enum class ETextureUniversalTiling FastUniversalTiling; // 0x46(0x01)
	enum class ETextureEncodeSpeed CookUsesSpeed; // 0x47(0x01)
	enum class ETextureEncodeSpeed EditorUsesSpeed; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.TextureEncodingUserSettings
// Size: 0x40 (Inherited: 0x38)
struct UTextureEncodingUserSettings : UDeveloperSettings {
	enum class ETextureEncodeSpeedOverride ForceEncodeSpeed; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.TextureLightProfile
// Size: 0x2b0 (Inherited: 0x2b0)
struct UTextureLightProfile : UTexture2D {
	float Brightness; // 0x2a8(0x04)
	float TextureMultiplier; // 0x2ac(0x04)
};

// Class Engine.TextureMipDataProviderFactory
// Size: 0x28 (Inherited: 0x28)
struct UTextureMipDataProviderFactory : UAssetUserData {
};

// Class Engine.TextureRenderTarget2DArray
// Size: 0x220 (Inherited: 0x200)
struct UTextureRenderTarget2DArray : UTextureRenderTarget {
	int32_t SizeX; // 0x1f8(0x04)
	int32_t SizeY; // 0x1fc(0x04)
	int32_t Slices; // 0x200(0x04)
	struct FLinearColor ClearColor; // 0x204(0x10)
	enum class EPixelFormat OverrideFormat; // 0x214(0x01)
	char bHDR : 1; // 0x215(0x01)
	char bForceLinearGamma : 1; // 0x215(0x01)
	char pad_21D_2 : 6; // 0x21d(0x01)
	char pad_21E[0x2]; // 0x21e(0x02)
};

// Class Engine.TextureRenderTargetCube
// Size: 0x210 (Inherited: 0x200)
struct UTextureRenderTargetCube : UTextureRenderTarget {
	int32_t SizeX; // 0x1f8(0x04)
	struct FLinearColor ClearColor; // 0x1fc(0x10)
	enum class EPixelFormat OverrideFormat; // 0x20c(0x01)
	char bHDR : 1; // 0x20d(0x01)
	char bForceLinearGamma : 1; // 0x20d(0x01)
};

// Class Engine.TextureRenderTargetVolume
// Size: 0x220 (Inherited: 0x200)
struct UTextureRenderTargetVolume : UTextureRenderTarget {
	int32_t SizeX; // 0x1f8(0x04)
	int32_t SizeY; // 0x1fc(0x04)
	int32_t SizeZ; // 0x200(0x04)
	struct FLinearColor ClearColor; // 0x204(0x10)
	enum class EPixelFormat OverrideFormat; // 0x214(0x01)
	char bHDR : 1; // 0x215(0x01)
	char bForceLinearGamma : 1; // 0x215(0x01)
	char pad_21D_2 : 6; // 0x21d(0x01)
	char pad_21E[0x2]; // 0x21e(0x02)
};

// Class Engine.ThumbnailInfo
// Size: 0x28 (Inherited: 0x28)
struct UThumbnailInfo : UObject {
};

// Class Engine.TimelineComponent
// Size: 0x150 (Inherited: 0xb0)
struct UTimelineComponent : UActorComponent {
	struct FTimeline TheTimeline; // 0xb0(0x98)
	char bIgnoreTimeDilation : 1; // 0x148(0x01)
	char pad_148_1 : 7; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)

	void Stop(); // Function Engine.TimelineComponent.Stop // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc5380
	void SetVectorCurve(struct UCurveVector* NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc52b0
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc5230
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc51b0
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4aae970
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc5090
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc5010
	void SetLooping(bool bNewLooping); // Function Engine.TimelineComponent.SetLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4f80
	void SetLinearColorCurve(struct UCurveLinearColor* NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4eb0
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4e20
	void SetFloatCurve(struct UCurveFloat* NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4d50
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4d30
	void Reverse(); // Function Engine.TimelineComponent.Reverse // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4d10
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4cf0
	void Play(); // Function Engine.TimelineComponent.Play // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bc4cd0
	void OnRep_Timeline(); // Function Engine.TimelineComponent.OnRep_Timeline // (Final|Native|Public) // @ game+0x4bc4cb0
	bool IsReversing(); // Function Engine.TimelineComponent.IsReversing // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4c80
	bool IsPlaying(); // Function Engine.TimelineComponent.IsPlaying // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4c50
	bool IsLooping(); // Function Engine.TimelineComponent.IsLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4c20
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4bf0
	float GetScaledTimelineLength(); // Function Engine.TimelineComponent.GetScaledTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4b50
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4aadc70
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4ae0
	bool GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bc4ab0
};

// Class Engine.TimelineTemplate
// Size: 0xb8 (Inherited: 0x28)
struct UTimelineTemplate : UObject {
	float TimelineLength; // 0x28(0x04)
	enum class ETimelineLengthMode LengthMode; // 0x2c(0x01)
	char bAutoPlay : 1; // 0x2d(0x01)
	char bLoop : 1; // 0x2d(0x01)
	char bReplicated : 1; // 0x2d(0x01)
	char bIgnoreTimeDilation : 1; // 0x2d(0x01)
	char pad_2D_4 : 4; // 0x2d(0x01)
	char pad_2E[0x2]; // 0x2e(0x02)
	struct TArray<struct FTTEventTrack> EventTracks; // 0x30(0x10)
	struct TArray<struct FTTFloatTrack> FloatTracks; // 0x40(0x10)
	struct TArray<struct FTTVectorTrack> VectorTracks; // 0x50(0x10)
	struct TArray<struct FTTLinearColorTrack> LinearColorTracks; // 0x60(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0x70(0x10)
	struct FGuid TimelineGuid; // 0x80(0x10)
	enum class ETickingGroup TimelineTickGroup; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FName VariableName; // 0x94(0x08)
	struct FName DirectionPropertyName; // 0x9c(0x08)
	struct FName UpdateFunctionName; // 0xa4(0x08)
	struct FName FinishedFunctionName; // 0xac(0x08)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.TireType
// Size: 0x38 (Inherited: 0x30)
struct UTireType : UDataAsset {
	float FrictionScale; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.TouchInterface
// Size: 0x58 (Inherited: 0x28)
struct UTouchInterface : UObject {
	struct TArray<struct FTouchInputControl> Controls; // 0x28(0x10)
	float ActiveOpacity; // 0x38(0x04)
	float InactiveOpacity; // 0x3c(0x04)
	float TimeUntilDeactive; // 0x40(0x04)
	float TimeUntilReset; // 0x44(0x04)
	float ActivationDelay; // 0x48(0x04)
	bool bPreventRecenter; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float StartupDelay; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.TriggerBase
// Size: 0x280 (Inherited: 0x278)
struct ATriggerBase : AActor {
	struct UShapeComponent* CollisionComponent; // 0x278(0x08)
};

// Class Engine.TriggerBox
// Size: 0x280 (Inherited: 0x280)
struct ATriggerBox : ATriggerBase {
};

// Class Engine.TriggerCapsule
// Size: 0x280 (Inherited: 0x280)
struct ATriggerCapsule : ATriggerBase {
};

// Class Engine.TriggerSphere
// Size: 0x280 (Inherited: 0x280)
struct ATriggerSphere : ATriggerBase {
};

// Class Engine.TriggerVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct ATriggerVolume : AVolume {
};

// Class Engine.TwitterIntegrationBase
// Size: 0x38 (Inherited: 0x38)
struct UTwitterIntegrationBase : UPlatformInterfaceBase {

	bool TwitterRequest(struct FString URL, struct TArray<struct FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.TwitterRequest // (Native|Public|HasOutParms) // @ game+0x4bc93f0
	bool ShowTweetUI(struct FString InitialMessage, struct FString URL, struct FString Picture); // Function Engine.TwitterIntegrationBase.ShowTweetUI // (Native|Public) // @ game+0x4bc9290
	void Init(); // Function Engine.TwitterIntegrationBase.Init // (Native|Public) // @ game+0x122ec10
	int32_t GetNumAccounts(); // Function Engine.TwitterIntegrationBase.GetNumAccounts // (Native|Public) // @ game+0x4bc84d0
	struct FString GetAccountName(int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.GetAccountName // (Native|Public) // @ game+0x4bc82d0
	bool CanShowTweetUI(); // Function Engine.TwitterIntegrationBase.CanShowTweetUI // (Native|Public) // @ game+0x19fba90
	bool AuthorizeAccounts(); // Function Engine.TwitterIntegrationBase.AuthorizeAccounts // (Native|Public) // @ game+0x1a00860
};

// Class Engine.TypedElementCommonActions
// Size: 0x828 (Inherited: 0x28)
struct UTypedElementCommonActions : UObject {
	char pad_28[0x800]; // 0x28(0x800)

	struct TArray<struct FScriptTypedElementHandle> K2_DuplicateSelectedElements(struct UTypedElementSelectionSet* SelectionSet, struct UWorld* World, struct FVector& LocationOffset); // Function Engine.TypedElementCommonActions.K2_DuplicateSelectedElements // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc8ab0
	struct TArray<struct FScriptTypedElementHandle> DuplicateNormalizedElements(struct FScriptTypedElementListProxy ElementList, struct UWorld* World, struct FVector& LocationOffset); // Function Engine.TypedElementCommonActions.DuplicateNormalizedElements // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc80e0
	bool DeleteSelectedElements(struct UTypedElementSelectionSet* SelectionSet, struct UWorld* World, struct FTypedElementDeletionOptions& DeletionOptions); // Function Engine.TypedElementCommonActions.DeleteSelectedElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc7e20
	bool DeleteNormalizedElements(struct FScriptTypedElementListProxy ElementList, struct UWorld* World, struct UTypedElementSelectionSet* InSelectionSet, struct FTypedElementDeletionOptions& DeletionOptions); // Function Engine.TypedElementCommonActions.DeleteNormalizedElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc7c40
};

// Class Engine.TypedElementWorldInterface
// Size: 0x28 (Inherited: 0x28)
struct UTypedElementWorldInterface : UInterface {

	bool SetWorldTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& InTransform); // Function Engine.TypedElementWorldInterface.SetWorldTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc9110
	bool SetRelativeTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& InTransform); // Function Engine.TypedElementWorldInterface.SetRelativeTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc8f90
	bool SetPivotOffset(struct FScriptTypedElementHandle& InElementHandle, struct FVector& InPivotOffset); // Function Engine.TypedElementWorldInterface.SetPivotOffset // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc8e80
	void NotifyMovementStarted(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.NotifyMovementStarted // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc8dc0
	void NotifyMovementOngoing(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.NotifyMovementOngoing // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc8d00
	void NotifyMovementEnded(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.NotifyMovementEnded // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc8c40
	bool IsTemplateElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.IsTemplateElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3bca040
	bool GetWorldTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& OutTransform); // Function Engine.TypedElementWorldInterface.GetWorldTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc8930
	bool GetRelativeTransform(struct FScriptTypedElementHandle& InElementHandle, struct FTransform& OutTransform); // Function Engine.TypedElementWorldInterface.GetRelativeTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc87b0
	bool GetPivotOffset(struct FScriptTypedElementHandle& InElementHandle, struct FVector& OutPivotOffset); // Function Engine.TypedElementWorldInterface.GetPivotOffset // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc86a0
	struct UWorld* GetOwnerWorld(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.GetOwnerWorld // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc85d0
	struct ULevel* GetOwnerLevel(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.GetOwnerLevel // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc8500
	bool GetBounds(struct FScriptTypedElementHandle& InElementHandle, struct FBoxSphereBounds& OutBounds); // Function Engine.TypedElementWorldInterface.GetBounds // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc83b0
	struct FScriptTypedElementHandle DuplicateElement(struct FScriptTypedElementHandle& InElementHandle, struct UWorld* InWorld, struct FVector& InLocationOffset); // Function Engine.TypedElementWorldInterface.DuplicateElement // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bc7f40
	bool DeleteElement(struct FScriptTypedElementHandle& InElementHandle, struct UWorld* InWorld, struct UTypedElementSelectionSet* InSelectionSet, struct FTypedElementDeletionOptions& InDeletionOptions); // Function Engine.TypedElementWorldInterface.DeleteElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc7aa0
	bool CanMoveElement(struct FScriptTypedElementHandle& InElementHandle, enum class ETypedElementWorldType InWorldType); // Function Engine.TypedElementWorldInterface.CanMoveElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc7990
	bool CanEditElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.CanEditElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc78c0
	bool CanDuplicateElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.CanDuplicateElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc77f0
	bool CanDeleteElement(struct FScriptTypedElementHandle& InElementHandle); // Function Engine.TypedElementWorldInterface.CanDeleteElement // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bc7720
};

// Class Engine.UserDefinedEnum
// Size: 0xb0 (Inherited: 0x60)
struct UUserDefinedEnum : UEnum {
	struct TMap<struct FName, struct FText> DisplayNameMap; // 0x60(0x50)
};

// Class Engine.UserDefinedStruct
// Size: 0x108 (Inherited: 0xc0)
struct UUserDefinedStruct : UScriptStruct {
	enum class EUserDefinedStructureStatus Status; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	struct FGuid Guid; // 0xc4(0x10)
	char pad_D4[0x34]; // 0xd4(0x34)
};

// Class Engine.UserInterfaceSettings
// Size: 0x270 (Inherited: 0x38)
struct UUserInterfaceSettings : UDeveloperSettings {
	enum class ERenderFocusRule RenderFocusRule; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors; // 0x40(0x50)
	struct TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors; // 0x90(0x50)
	struct FSoftClassPath DefaultCursor; // 0xe0(0x18)
	struct FSoftClassPath TextEditBeamCursor; // 0xf8(0x18)
	struct FSoftClassPath CrosshairsCursor; // 0x110(0x18)
	struct FSoftClassPath HandCursor; // 0x128(0x18)
	struct FSoftClassPath GrabHandCursor; // 0x140(0x18)
	struct FSoftClassPath GrabHandClosedCursor; // 0x158(0x18)
	struct FSoftClassPath SlashedCircleCursor; // 0x170(0x18)
	float ApplicationScale; // 0x188(0x04)
	enum class EUIScalingRule UIScaleRule; // 0x18c(0x01)
	char pad_18D[0x3]; // 0x18d(0x03)
	struct FSoftClassPath CustomScalingRuleClass; // 0x190(0x18)
	struct FRuntimeFloatCurve UIScaleCurve; // 0x1a8(0x88)
	bool bAllowHighDPIInGameMode; // 0x230(0x01)
	char pad_231[0x3]; // 0x231(0x03)
	struct FIntPoint DesignScreenSize; // 0x234(0x08)
	bool bLoadWidgetsOnDedicatedServer; // 0x23c(0x01)
	char pad_23D[0x3]; // 0x23d(0x03)
	struct TArray<struct UObject*> CursorClasses; // 0x240(0x10)
	ClassPtrProperty CustomScalingRuleClassInstance; // 0x250(0x08)
	struct UDPICustomScalingRule* CustomScalingRule; // 0x258(0x08)
	char pad_260[0x10]; // 0x260(0x10)
};

// Class Engine.VectorField
// Size: 0x68 (Inherited: 0x28)
struct UVectorField : UObject {
	struct FBox Bounds; // 0x28(0x38)
	float Intensity; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.VectorFieldAnimated
// Size: 0xa8 (Inherited: 0x68)
struct UVectorFieldAnimated : UVectorField {
	struct UTexture2D* Texture; // 0x68(0x08)
	enum class EVectorFieldConstructionOp ConstructionOp; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	int32_t VolumeSizeX; // 0x74(0x04)
	int32_t VolumeSizeY; // 0x78(0x04)
	int32_t VolumeSizeZ; // 0x7c(0x04)
	int32_t SubImagesX; // 0x80(0x04)
	int32_t SubImagesY; // 0x84(0x04)
	int32_t FrameCount; // 0x88(0x04)
	float FramesPerSecond; // 0x8c(0x04)
	char bLoop : 1; // 0x90(0x01)
	char pad_90_1 : 7; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UVectorFieldStatic* NoiseField; // 0x98(0x08)
	float NoiseScale; // 0xa0(0x04)
	float NoiseMax; // 0xa4(0x04)
};

// Class Engine.VectorFieldComponent
// Size: 0x570 (Inherited: 0x540)
struct UVectorFieldComponent : UPrimitiveComponent {
	struct UVectorField* VectorField; // 0x540(0x08)
	float Intensity; // 0x548(0x04)
	float Tightness; // 0x54c(0x04)
	char bPreviewVectorField : 1; // 0x550(0x01)
	char pad_550_1 : 7; // 0x550(0x01)
	char pad_551[0x1f]; // 0x551(0x1f)

	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity // (Native|Public|BlueprintCallable) // @ game+0x4bcceb0
};

// Class Engine.VectorFieldStatic
// Size: 0xb8 (Inherited: 0x68)
struct UVectorFieldStatic : UVectorField {
	int32_t SizeX; // 0x68(0x04)
	int32_t SizeY; // 0x6c(0x04)
	int32_t SizeZ; // 0x70(0x04)
	bool bAllowCPUAccess; // 0x74(0x01)
	char pad_75[0x43]; // 0x75(0x43)
};

// Class Engine.VectorFieldVolume
// Size: 0x280 (Inherited: 0x278)
struct AVectorFieldVolume : AActor {
	struct UVectorFieldComponent* VectorFieldComponent; // 0x278(0x08)
};

// Class Engine.ViewportStatsSubsystem
// Size: 0x50 (Inherited: 0x30)
struct UViewportStatsSubsystem : UWorldSubsystem {
	char pad_30[0x20]; // 0x30(0x20)

	void RemoveDisplayDelegate(int32_t IndexToRemove); // Function Engine.ViewportStatsSubsystem.RemoveDisplayDelegate // (Final|Native|Public|BlueprintCallable) // @ game+0x4bccda0
	void AddTimedDisplay(struct FText Text, struct FLinearColor Color, float Duration, struct FVector2D& DisplayOffset); // Function Engine.ViewportStatsSubsystem.AddTimedDisplay // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x4bcbf50
	int32_t AddDisplayDelegate(struct FDelegate& Delegate); // Function Engine.ViewportStatsSubsystem.AddDisplayDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x4bcbe90
};

// Class Engine.VirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct UVirtualTexture : UObject {
};

// Class Engine.LightMapVirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct ULightMapVirtualTexture : UVirtualTexture {
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// Size: 0x2b0 (Inherited: 0x2b0)
struct URuntimeVirtualTextureStreamingProxy : UTexture2D {
};

// Class Engine.VirtualTexture2D
// Size: 0x2c0 (Inherited: 0x2b0)
struct UVirtualTexture2D : UTexture2D {
	struct FVirtualTextureBuildSettings Settings; // 0x2a8(0x0c)
	bool bContinuousUpdate; // 0x2b4(0x01)
	bool bSinglePhysicalSpace; // 0x2b5(0x01)
	char pad_2BE[0x2]; // 0x2be(0x02)
};

// Class Engine.VirtualTextureBuilder
// Size: 0x38 (Inherited: 0x28)
struct UVirtualTextureBuilder : UObject {
	struct UVirtualTexture2D* Texture; // 0x28(0x08)
	uint64_t BuildHash; // 0x30(0x08)
};

// Class Engine.VirtualTexturePoolConfig
// Size: 0x40 (Inherited: 0x28)
struct UVirtualTexturePoolConfig : UObject {
	int32_t DefaultSizeInMegabyte; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct TArray<struct FVirtualTextureSpacePoolConfig> Pools; // 0x30(0x10)
};

// Class Engine.VisualLoggerAutomationTests
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerAutomationTests : UObject {
};

// Class Engine.VisualLoggerDebugSnapshotInterface
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerDebugSnapshotInterface : UInterface {
};

// Class Engine.VisualLoggerFilterVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct AVisualLoggerFilterVolume : AVolume {
};

// Class Engine.VisualLoggerKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerKismetLibrary : UBlueprintFunctionLibrary {

	void RedirectVislog(struct UObject* SourceOwner, struct UObject* DestinationOwner); // Function Engine.VisualLoggerKismetLibrary.RedirectVislog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4bccc50
	void LogText(struct UObject* WorldContextObject, struct FString Text, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4bccab0
	void LogSegment(struct UObject* WorldContextObject, struct FVector SegmentStart, struct FVector SegmentEnd, struct FString Text, struct FLinearColor ObjectColor, float Thickness, struct FName CategoryName, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4bcc7a0
	void LogLocation(struct UObject* WorldContextObject, struct FVector Location, struct FString Text, struct FLinearColor ObjectColor, float Radius, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4bcc500
	void LogBox(struct UObject* WorldContextObject, struct FBox BoxShape, struct FString Text, struct FLinearColor ObjectColor, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x4bcc290
	void EnableRecording(bool bEnabled); // Function Engine.VisualLoggerKismetLibrary.EnableRecording // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4b143b0
};

// Class Engine.VoiceChannel
// Size: 0x78 (Inherited: 0x68)
struct UVoiceChannel : UChannel {
	char pad_68[0x10]; // 0x68(0x10)
};

// Class Engine.VOIPTalker
// Size: 0xf0 (Inherited: 0xb0)
struct UVOIPTalker : UActorComponent {
	struct FVoiceSettings Settings; // 0xb0(0x18)
	char pad_C8[0x28]; // 0xc8(0x28)

	void RegisterWithPlayerState(struct APlayerState* OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x4bccd10
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x4bcc260
	struct UVOIPTalker* CreateTalkerForPlayer(struct APlayerState* OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4bcc1d0
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd // (Native|Event|Protected|BlueprintEvent) // @ game+0x22531b0
	void BPOnTalkingBegin(struct UAudioComponent* AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin // (Native|Event|Protected|BlueprintEvent) // @ game+0x4bcc140
};

// Class Engine.VOIPStatics
// Size: 0x28 (Inherited: 0x28)
struct UVOIPStatics : UBlueprintFunctionLibrary {

	void SetMicThreshold(float InThreshold); // Function Engine.VOIPStatics.SetMicThreshold // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x4bcd0d0
};

// Class Engine.VolumeTexture
// Size: 0x250 (Inherited: 0x1f0)
struct UVolumeTexture : UTexture {
	char pad_1F0[0x60]; // 0x1f0(0x60)
};

// Class Engine.VolumetricCloudComponent
// Size: 0x300 (Inherited: 0x2b0)
struct UVolumetricCloudComponent : USceneComponent {
	float LayerBottomAltitude; // 0x2b0(0x04)
	float LayerHeight; // 0x2b4(0x04)
	float TracingStartMaxDistance; // 0x2b8(0x04)
	float TracingMaxDistance; // 0x2bc(0x04)
	float PlanetRadius; // 0x2c0(0x04)
	struct FColor GroundAlbedo; // 0x2c4(0x04)
	struct UMaterialInterface* Material; // 0x2c8(0x08)
	char bUsePerSampleAtmosphericLightTransmittance : 1; // 0x2d0(0x01)
	char pad_2D0_1 : 7; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	float SkyLightCloudBottomOcclusion; // 0x2d4(0x04)
	float ViewSampleCountScale; // 0x2d8(0x04)
	float ReflectionViewSampleCountScale; // 0x2dc(0x04)
	float ReflectionSampleCountScale; // 0x2e0(0x04)
	float ShadowViewSampleCountScale; // 0x2e4(0x04)
	float ShadowReflectionViewSampleCountScale; // 0x2e8(0x04)
	float ShadowReflectionSampleCountScale; // 0x2ec(0x04)
	float ShadowTracingDistance; // 0x2f0(0x04)
	float StopTracingTransmittanceThreshold; // 0x2f4(0x04)
	char pad_2F8[0x8]; // 0x2f8(0x08)

	void SetViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd4d0
	void SetTracingStartMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingStartMaxDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd450
	void SetTracingMaxDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetTracingMaxDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba6940
	void SetStopTracingTransmittanceThreshold(float NewValue); // Function Engine.VolumetricCloudComponent.SetStopTracingTransmittanceThreshold // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba6ea0
	void SetSkyLightCloudBottomOcclusion(float NewValue); // Function Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd3d0
	void SetShadowViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd350
	void SetShadowTracingDistance(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowTracingDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd2d0
	void SetShadowReflectionViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowReflectionViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd250
	void SetShadowReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd1d0
	void SetReflectionViewSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetReflectionViewSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba73d0
	void SetReflectionSampleCountScale(float NewValue); // Function Engine.VolumetricCloudComponent.SetReflectionSampleCountScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd150
	void SetPlanetRadius(float NewValue); // Function Engine.VolumetricCloudComponent.SetPlanetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4ba7130
	void SetMaterial(struct UMaterialInterface* NewValue); // Function Engine.VolumetricCloudComponent.SetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd040
	void SetLayerHeight(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerHeight // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bccfc0
	void SetLayerBottomAltitude(float NewValue); // Function Engine.VolumetricCloudComponent.SetLayerBottomAltitude // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bccf40
	void SetGroundAlbedo(struct FColor NewValue); // Function Engine.VolumetricCloudComponent.SetGroundAlbedo // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x4bcce30
	void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue); // Function Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x4bcd550
};

// Class Engine.VolumetricCloud
// Size: 0x280 (Inherited: 0x278)
struct AVolumetricCloud : AInfo {
	struct UVolumetricCloudComponent* VolumetricCloudComponent; // 0x278(0x08)
};

// Class Engine.VolumetricLightmapDensityVolume
// Size: 0x2b8 (Inherited: 0x2b0)
struct AVolumetricLightmapDensityVolume : AVolume {
	struct FInt32Interval AllowedMipLevelRange; // 0x2b0(0x08)
};

// Class Engine.WindDirectionalSource
// Size: 0x280 (Inherited: 0x278)
struct AWindDirectionalSource : AInfo {
	struct UWindDirectionalSourceComponent* Component; // 0x278(0x08)
};

// Class Engine.WindDirectionalSourceComponent
// Size: 0x2d0 (Inherited: 0x2b0)
struct UWindDirectionalSourceComponent : USceneComponent {
	float Strength; // 0x2b0(0x04)
	float Speed; // 0x2b4(0x04)
	float MinGustAmount; // 0x2b8(0x04)
	float MaxGustAmount; // 0x2bc(0x04)
	float Radius; // 0x2c0(0x04)
	char bPointWind : 1; // 0x2c4(0x01)
	char pad_2C4_1 : 7; // 0x2c4(0x01)
	char pad_2C5[0xb]; // 0x2c5(0x0b)

	void SetWindType(enum class EWindSourceType InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType // (Final|Native|Public|BlueprintCallable) // @ game+0x4bd0110
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength // (Final|Native|Public|BlueprintCallable) // @ game+0x4bd0090
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x4bd0010
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x4bcff90
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x4bcff10
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x4bcfe90
};

// Class Engine.WorldComposition
// Size: 0x68 (Inherited: 0x28)
struct UWorldComposition : UObject {
	char pad_28[0x20]; // 0x28(0x20)
	struct TArray<struct ULevelStreaming*> TilesStreaming; // 0x48(0x10)
	double TilesStreamingTimeThreshold; // 0x58(0x08)
	bool bLoadAllTilesDuringCinematic; // 0x60(0x01)
	bool bRebaseOriginIn3DSpace; // 0x61(0x01)
	char pad_62[0x2]; // 0x62(0x02)
	float RebaseOriginDistance; // 0x64(0x04)
};

// Class Engine.WorldPartition
// Size: 0x88 (Inherited: 0x30)
struct UWorldPartition : UActorDescContainer {
	char pad_30[0x30]; // 0x30(0x30)
	struct UWorldPartitionRuntimeHash* RuntimeHash; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)
	struct UWorldPartitionStreamingPolicy* StreamingPolicy; // 0x70(0x08)
	char pad_78[0x10]; // 0x78(0x10)
};

// Class Engine.WorldPartitionEditorHash
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionEditorHash : UObject {
};

// Class Engine.WorldPartitionEditorCell
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionEditorCell : UObject {
};

// Class Engine.WorldPartitionEditorPerProjectUserSettings
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionEditorPerProjectUserSettings : UObject {
};

// Class Engine.WorldPartitionEditorSpatialHash
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionEditorSpatialHash : UWorldPartitionEditorHash {
};

// Class Engine.WorldPartitionLevelStreamingDynamic
// Size: 0x1a0 (Inherited: 0x180)
struct UWorldPartitionLevelStreamingDynamic : ULevelStreamingDynamic {
	bool bShouldBeAlwaysLoaded; // 0x180(0x01)
	char pad_181[0x3]; // 0x181(0x03)
	struct TWeakObjectPtr<struct UWorldPartitionRuntimeLevelStreamingCell> StreamingCell; // 0x184(0x08)
	struct TWeakObjectPtr<struct UWorldPartition> OuterWorldPartition; // 0x18c(0x08)
	char pad_194[0xc]; // 0x194(0x0c)
};

// Class Engine.WorldPartitionStreamingPolicy
// Size: 0x9f0 (Inherited: 0x28)
struct UWorldPartitionStreamingPolicy : UObject {
	char pad_28[0x9c8]; // 0x28(0x9c8)
};

// Class Engine.WorldPartitionLevelStreamingPolicy
// Size: 0xa40 (Inherited: 0x9f0)
struct UWorldPartitionLevelStreamingPolicy : UWorldPartitionStreamingPolicy {
	struct TMap<struct FName, struct FName> SubObjectsToCellRemapping; // 0x9f0(0x50)
};

// Class Engine.WorldPartitionMiniMap
// Size: 0x338 (Inherited: 0x278)
struct AWorldPartitionMiniMap : AInfo {
	struct FBox MiniMapWorldBounds; // 0x278(0x38)
	struct FBox2D UVOffset; // 0x2b0(0x28)
	struct UTexture2D* MiniMapTexture; // 0x2d8(0x08)
	struct TSet<struct FActorDataLayer> ExcludedDataLayers; // 0x2e0(0x50)
	int32_t MiniMapTileSize; // 0x330(0x04)
	char pad_334[0x4]; // 0x334(0x04)
};

// Class Engine.WorldPartitionReplay
// Size: 0x2a0 (Inherited: 0x278)
struct AWorldPartitionReplay : AActor {
	struct TArray<struct FName> StreamingSourceNames; // 0x278(0x10)
	char pad_288[0x18]; // 0x288(0x18)
};

// Class Engine.WorldPartitionRuntimeCell
// Size: 0x88 (Inherited: 0x28)
struct UWorldPartitionRuntimeCell : UObject {
	bool bIsAlwaysLoaded; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct TArray<struct FName> DataLayers; // 0x30(0x10)
	struct FIntVector Coords; // 0x40(0x0c)
	struct FName GridName; // 0x4c(0x08)
	char pad_54[0x4]; // 0x54(0x04)
	struct FString DebugName; // 0x58(0x10)
	int32_t Priority; // 0x68(0x04)
	bool bClientOnlyVisible; // 0x6c(0x01)
	bool bIsHLOD; // 0x6d(0x01)
	bool bBlockOnSlowLoading; // 0x6e(0x01)
	char pad_6F[0x19]; // 0x6f(0x19)
};

// Class Engine.WorldPartitionRuntimeHash
// Size: 0x28 (Inherited: 0x28)
struct UWorldPartitionRuntimeHash : UObject {
};

// Class Engine.WorldPartitionRuntimeSpatialHashCell
// Size: 0xc8 (Inherited: 0x88)
struct UWorldPartitionRuntimeSpatialHashCell : UWorldPartitionRuntimeCell {
	struct FVector position; // 0x88(0x18)
	float Extent; // 0xa0(0x04)
	int32_t Level; // 0xa4(0x04)
	char pad_A8[0x20]; // 0xa8(0x20)
};

// Class Engine.WorldPartitionRuntimeLevelStreamingCell
// Size: 0xd0 (Inherited: 0xc8)
struct UWorldPartitionRuntimeLevelStreamingCell : UWorldPartitionRuntimeSpatialHashCell {
	struct UWorldPartitionLevelStreamingDynamic* LevelStreaming; // 0xc8(0x08)

	void OnLevelShown(); // Function Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelShown // (Final|Native|Private) // @ game+0x4bcfdf0
	void OnLevelHidden(); // Function Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelHidden // (Final|Native|Private) // @ game+0x4bcfdd0
};

// Class Engine.SpatialHashRuntimeGridInfo
// Size: 0x280 (Inherited: 0x278)
struct ASpatialHashRuntimeGridInfo : AInfo {
	struct FSpatialHashRuntimeGrid GridSettings; // 0x278(0x01)
	char pad_279[0x7]; // 0x279(0x07)
};

// Class Engine.WorldPartitionRuntimeSpatialHash
// Size: 0x88 (Inherited: 0x28)
struct UWorldPartitionRuntimeSpatialHash : UWorldPartitionRuntimeHash {
	struct TArray<struct FSpatialHashStreamingGrid> StreamingGrids; // 0x28(0x10)
	char pad_38[0x50]; // 0x38(0x50)
};

// Class Engine.WorldPartitionStreamingSourceComponent
// Size: 0xe8 (Inherited: 0xb0)
struct UWorldPartitionStreamingSourceComponent : UActorComponent {
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FName TargetGrid; // 0xb8(0x08)
	struct FColor DebugColor; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct UHLODLayer* TargetHLODLayer; // 0xc8(0x08)
	struct TArray<struct FStreamingSourceShape> Shapes; // 0xd0(0x10)
	enum class EStreamingSourcePriority Priority; // 0xe0(0x01)
	bool bStreamingSourceEnabled; // 0xe1(0x01)
	enum class EStreamingSourceTargetState TargetState; // 0xe2(0x01)
	char pad_E3[0x5]; // 0xe3(0x05)

	bool IsStreamingSourceEnabled(); // Function Engine.WorldPartitionStreamingSourceComponent.IsStreamingSourceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bd2850
	bool IsStreamingCompleted(); // Function Engine.WorldPartitionStreamingSourceComponent.IsStreamingCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bd2690
	void EnableStreamingSource(); // Function Engine.WorldPartitionStreamingSourceComponent.EnableStreamingSource // (Final|Native|Public|BlueprintCallable) // @ game+0x4bd2670
	void DisableStreamingSource(); // Function Engine.WorldPartitionStreamingSourceComponent.DisableStreamingSource // (Final|Native|Public|BlueprintCallable) // @ game+0x4bd2650
};

// Class Engine.WorldPartitionSubsystem
// Size: 0x50 (Inherited: 0x40)
struct UWorldPartitionSubsystem : UTickableWorldSubsystem {
	char pad_40[0x10]; // 0x40(0x10)

	bool IsStreamingCompleted(enum class EWorldPartitionRuntimeCellState QueryState, struct TArray<struct FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState); // Function Engine.WorldPartitionSubsystem.IsStreamingCompleted // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x4bd26c0
};

// Class Engine.WorldPartitionVolume
// Size: 0x2b0 (Inherited: 0x2b0)
struct AWorldPartitionVolume : AVolume {
};

// Class Engine.HierarchicalLODSetup
// Size: 0x60 (Inherited: 0x28)
struct UHierarchicalLODSetup : UObject {
	struct TArray<struct FHierarchicalSimplification> HierarchicalLODSetup; // 0x28(0x10)
	struct TSoftObjectPtr<UMaterialInterface> OverrideBaseMaterial; // 0x38(0x28)
};

